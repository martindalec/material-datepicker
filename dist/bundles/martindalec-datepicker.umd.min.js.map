{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://@martindalec/datepicker/core/date-adapter.ts","ng://@martindalec/datepicker/core/date-formats.ts","ng://@martindalec/datepicker/core/native-date-adapter.ts","ng://@martindalec/datepicker/core/native-date-formats.ts","ng://@martindalec/datepicker/core/index.ts","ng://@martindalec/datepicker/moment-adapter/moment-date-adapter.ts","ng://@martindalec/datepicker/moment-adapter/moment-date-formats.ts","ng://@martindalec/datepicker/moment-adapter/index.ts","ng://@martindalec/datepicker/datepicker-errors.ts","ng://@martindalec/datepicker/clock-view.ts","ng://@martindalec/datepicker/datepicker-animations.ts","ng://@martindalec/datepicker/datepicker-intl.ts","ng://@martindalec/datepicker/calendar-body.ts","ng://@martindalec/datepicker/month-view.ts","ng://@martindalec/datepicker/year-view.ts","ng://@martindalec/datepicker/years-view.ts","ng://@martindalec/datepicker/calendar.ts","ng://@martindalec/datepicker/datepicker.ts","ng://@martindalec/datepicker/datepicker-input.ts","ng://@martindalec/datepicker/datepicker-toggle.ts","ng://@martindalec/datepicker/datepicker-module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","MAT_DATE_LOCALE","InjectionToken","providedIn","factory","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","provide","useExisting","DateAdapter","_localeChanges","Subject","defineProperty","deserialize","value","isDateInstance","isValid","invalid","setLocale","locale","next","compareDate","first","second","unit","f","getYear","toString","indexOf","Number","concat","getMonth","slice","getDate","getHours","getMinutes","sameDate","clampDate","date","min","max","MAT_DATE_FORMATS","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","long","short","narrow","DEFAULT_DATE_NAMES","range","String","DEFAULT_HOUR_NAMES","DEFAULT_MINUTE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","valueFunction","valuesArray","NativeDateAdapter","_super","platform","matDateLocale","_this","useUtcForDisplay","TRIDENT","_clampDate","EDGE","tslib_1.__extends","getFullYear","setHours","setMinutes","setSeconds","ms","getDayOfWeek","getDay","getMonthNames","style","dtf_1","DateTimeFormat","month","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","dtf_2","day","getHourNames","dtf_3","hour","format","getMinuteNames","dtf_4","minute","getDayOfWeekNames","dtf_5","weekday","getYearName","dtf","year","getFirstDayOfWeek","getNumDaysInMonth","_createDateWithOverflow","clone","createDate","hours","minutes","Error","result","today","parse","displayFormat","setFullYear","Math","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","addCalendarHours","addCalendarMinutes","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","obj","isNaN","getTime","NaN","str","replace","UTC","getSeconds","getMilliseconds","Injectable","Platform","Optional","type","Inject","args","MAT_NATIVE_DATE_FORMATS","datetime","time","display","dateA11yLabel","monthDayLabel","monthDayA11yLabel","monthYearLabel","monthYearA11yLabel","timeLabel","NativeDateModule","NgModule","imports","PlatformModule","providers","useClass","MatNativeDateModule","useValue","ɵ0$1","moment","momentNs","MomentDateAdapter","dateLocale","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","shortMonths","monthsShort","dates","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","seconds","milliseconds","daysInMonth","parseFormat","add","ISO_8601","isMoment","MAT_MOMENT_DATE_FORMATS","MomentDateModule","deps","MatMomentDateModule","ɵ0$2","createMissingDateImplError","provider","MatClockView","_changeDetectorRef","_element","_dateAdapter","_dateFormats","clockStep","twelveHour","hourView","selectedTime","EventEmitter","selectedChange","changeView","_hours","_minutes","mouseMoveListener","event","_handleMousemove","mouseUpListener","_handleMouseup","_activeDate","oldActiveDate","validDate","_getValidDateOrNull","minDate","maxDate","_init","_selected","_minDate","_maxDate","_selectedHour","activeDate","_selectedMinute","radius","deg","round","transform","height","margin-top","ngAfterContentInit","_handleMousedown","setTime","document","addEventListener","preventDefault","removeEventListener","hourNames","minuteNames","_anteMeridian","radian","PI","push","displayValue","enabled","dateFilter","top","cos","left","sin","fontSize","markForCheck","trigger","nativeElement","triggerRect","getBoundingClientRect","width","offsetWidth","offsetHeight","pageX","undefined","touches","pageY","x","window","pageXOffset","y","pageYOffset","z","sqrt","outer","atan2","emit","_focusActiveCell","Component","selector","template","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","role","(mousedown)","preserveWhitespaces","ChangeDetectorRef","ElementRef","decorators","Input","Output","slideCalendar","transition","animate","keyframes","offset","opacity","controlActive","transformPanel","state","group","query","animateChild","fadeInCalendar","MatDatepickerIntl","changes","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","setToAMLabel","setToPMLabel","switchToMinuteViewLabel","switchToHourViewLabel","switchToMonthViewLabel","switchToYearViewLabel","switchToYearsViewLabel","buttonSubmitText","buttonSubmitLabel","buttonCancelText","buttonCancelLabel","ariaLabel","MatCalendarBody","_elementRef","_ngZone","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","runOutsideAngular","onStable","asObservable","pipe","take","subscribe","querySelector","focus","class","attr.aria-readonly","NgZone","MatMonthView","_dir","_userSelection","activeDateChange","narrowWeekdays","map","_weekdays","_activeValue","_getDateInCurrentMonth","_hasSameMonthAndYear","_selectedDate","_dateSelected","selectedYear","selectedMonth","selectedHours","selectedMinutes","selectedDate","_handleCalendarBodyKeydown","isRtl","_isRtl","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","END","PAGE_UP","altKey","PAGE_DOWN","ENTER","selected","_todayDate","_monthLabel","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","_createWeekCells","_matCalendarBody","dateNames","_weeks","_shouldEnableDate","MatCalendarCell","d1","d2","animations","Directionality","ViewChild","MatYearView","_selectedMonth","_getMonthInCurrentYear","_monthSelected","selectedDay","_todayMonth","_yearLabel","monthNames","_months","row","_createCellForMonth","monthName","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","MatYearsView","element","_years","_selectedYear","lastPosition","scrolled","_disposeScroller","fromEvent","sampleTime","mergeMap","ev","obsOf","_calculatePoints","pos","_handleScroll","ngOnDestroy","unsubscribe","abs","_populateYears","setTimeout","scrollTop","YEAR_LINE_HEIGHT","down","scroll","unshift","_yearSelected","el","total","scrollHeight","position","MatCalendar","_intl","changeDetectorRef","_moveFocusOnNextTick","startView","_dateFilterForViews","stateChanges","_hourView","_intlChanges","_startAt","_clampedActiveDate","_isAm","view","diff","_animationDir","_periodButtonText","_yearButtonText","_monthdayButtonText","_dayButtonText","_hourButtonText","_minuteButtonText","_currentView","startAt","ngAfterViewChecked","focusActiveCell","complete","ngOnChanges","_hasTime","change","firstChange","_getCurrentViewComponent","_periodButtonLabel","_nextButtonLabel","_prevButtonLabel","_submitClicked","_cancelClicked","_timeChanged","_timeSelected","_currentPeriodClicked","_previousClicked","_navCalendar","_nextClicked","_showHourView","_showMinuteView","_toggleAmPm","am","_previousEnabled","_isSameView","_nextEnabled","date1","date2","monthYear","hourMinute","clockView","monthView","yearView","yearsView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","Overlay","useFactory","MatDatepickerContent","ngAfterViewInit","_calendar","_handleKeydown","ESCAPE","datepicker","close","stopPropagation","[@transformPanel]","[class.mat-datepicker-content-touch]","(keydown)","MatDatepicker","_dialog","_overlay","_viewContainerRef","_scrollStrategy","_document","_touchUi","openedStream","closedStream","_opened","id","_validSelected","_focusedElementBeforeOpen","_inputSubscription","Subscription","EMPTY","_disabledChange","_selectedChanged","_datepickerInput","coerceBooleanProperty","_disabled","disabled","newValue","_datepicker","open","valid","_dateFilter","ngOnInit","_select","_popupRef","dispose","_popupComponentRef","oldValue","_registerInput","input","_valueChange","activeElement","touchUi","_openAsDialog","_openAsPopup","reset","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","direction","viewContainerRef","panelClass","afterClosed","componentInstance","ComponentPortal","_createPopup","attach","instance","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","scrollStrategy","merge","backdropClick","detachments","keydownEvents","filter","flexibleConnectedTo","getPopupConnectionElementRef","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPush","withPositions","originX","originY","overlayX","overlayY","MatDialog","ViewContainerRef","DOCUMENT","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","target","targetElement","_formField","dateChange","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","matDatepickerFilter","_validator","Validators","compose","registerDatepicker","_value","oldDate","_formatValue","_min","_max","blur","localeChanges","MatDatepickerInputEvent","_firstValue","registerOnValidatorChange","fn","validate","c","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","_onInput","_onChange","_onBlur","Directive","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[attr.disabled]","(input)","(change)","(blur)","MatFormField","MatDatepickerToggleIcon","MatDatepickerToggle","_stateChanges","_watchStateChanges","_open","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","ContentChild","MatDatepickerModule","CommonModule","MatButtonModule","MatDialogModule","MatIconModule","OverlayModule","A11yModule","exports","declarations","entryComponents"],"mappings":"8kDAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YCzBnBI,EAAkB,IAAIC,EAAAA,eAAuB,kBAAmB,CAC3EC,WAAY,OACZC,QAASC,IAIX,SAAgBA,IACd,OAAOC,EAAAA,OAAOC,EAAAA,WAShB,IAAaC,EAA2B,CAAEC,QAASR,EAAiBS,YAAaH,EAAAA,wBAGjF,SAAAI,IAQYxB,KAAAyB,eAAiB,IAAIC,EAAAA,QAkSjC,OArSElC,OAAAmC,eAAIH,EAAAtB,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAKyB,gDAwMdD,EAAAtB,UAAA0B,YAAA,SAAYC,GACV,OAAa,MAATA,GAAkB7B,KAAK8B,eAAeD,IAAU7B,KAAK+B,QAAQF,GACxDA,EAEF7B,KAAKgC,WAOdR,EAAAtB,UAAA+B,UAAA,SAAUC,GACRlC,KAAKkC,OAASA,EACdlC,KAAKyB,eAAeU,QAWtBX,EAAAtB,UAAAkC,YAAA,SAAYC,EAAUC,EAAWC,QAAA,IAAAA,IAAAA,EAAA,cAC3BC,EAAIxC,KAAKyC,QAAQJ,GAAOK,WACxBnC,EAAIP,KAAKyC,QAAQH,GAAQI,WAE7B,MAAI,CAAC,IAAK,OAAQ,SAASC,QAAQJ,IAAS,EACnCK,OAAOJ,GAAKI,OAAOrC,IAE1BiC,EAAIA,EAAEK,QAAQ,KAAO7C,KAAK8C,SAAST,IAAQU,OAAO,IAClDxC,EAAIA,EAAEsC,QAAQ,KAAO7C,KAAK8C,SAASR,IAASS,OAAO,IAGjD,CAAC,IAAK,QAAS,UAAUJ,QAAQJ,IAAS,EACrCK,OAAOJ,GAAKI,OAAOrC,IAE1BiC,EAAIA,EAAEK,QAAQ,KAAO7C,KAAKgD,QAAQX,IAAQU,OAAO,IACjDxC,EAAIA,EAAEsC,QAAQ,KAAO7C,KAAKgD,QAAQV,IAASS,OAAO,IAGhD,CAAC,IAAK,MAAO,QAAQJ,QAAQJ,IAAS,EACjCK,OAAOJ,GAAKI,OAAOrC,IAE1BiC,EAAIA,EAAEK,QAAQ,KAAO7C,KAAKiD,SAASZ,IAAQU,OAAO,IAClDxC,EAAIA,EAAEsC,QAAQ,KAAO7C,KAAKiD,SAASX,IAASS,OAAO,IAGjD,CAAC,IAAK,OAAQ,SAASJ,QAAQJ,IAAS,EACnCK,OAAOJ,GAAKI,OAAOrC,IAE1BiC,EAAIA,EAAEK,QAAQ,KAAO7C,KAAKkD,WAAWb,IAAQU,OAAO,IACpDxC,EAAIA,EAAEsC,QAAQ,KAAO7C,KAAKkD,WAAWZ,IAASS,OAAO,IAGhDH,OAAOJ,GAAKI,OAAOrC,QAW5BiB,EAAAtB,UAAAiD,SAAA,SAASd,EAAiBC,EAAkBC,GAC1C,YAD0C,IAAAA,IAAAA,EAAA,UACnCF,GAASC,GAAUtC,KAAKoC,YAAYC,EAAOC,EAAQC,GAAQF,IAAUC,GAY9Ed,EAAAtB,UAAAkD,UAAA,SAAUC,EAAgBC,EAAgBC,EAAgBhB,GACxD,YADwD,IAAAA,IAAAA,EAAA,UACnDc,EAGDC,GAAOtD,KAAKoC,YAAYiB,EAAMC,EAAKf,GAAQ,EACtCe,EAELC,GAAOvD,KAAKoC,YAAYiB,EAAME,EAAKhB,GAAQ,EACtCgB,EAEFF,EARE,MAUb7B,KC5SagC,EAAmB,IAAIzC,EAAAA,eAA+B,oBCf7D0C,EAAoC,oBAATC,KAG3BC,EAAsB,CAC1BC,KAAM,CACJ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEFC,MAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACrFC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAI5DC,EAAqBC,EAAM,GAAI,SAAAxD,GAAK,OAAAyD,OAAOzD,EAAI,KAG/C0D,EAAqBF,EAAM,GAAIC,QAG/BE,EAAuBH,EAAM,GAAIC,QAGjCG,EAA4B,CAChCR,KAAM,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACzEC,MAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAClDC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAQnCO,EAAiB,qFAGvB,SAASL,EAASrD,EAAgB2D,GAEhC,QADMC,EAAc5E,MAAMgB,GACjBH,EAAI,EAAGA,EAAIG,EAAQH,IAC1B+D,EAAY/D,GAAK8D,EAAc9D,GAEjC,OAAO+D,EAIT,IAAAC,EAAA,SAAAC,GAkBE,SAAAD,EACEE,EAGAC,GAJF,IAAAC,EAMEH,EAAA7D,KAAAZ,OAAOA,YART4E,EAAAC,kBAA4B,EAS1BJ,EAAAvE,UAAM+B,UAASrB,KAAAgE,EAACD,GAGhBC,EAAKC,kBAAoBH,EAASI,QAClCF,EAAKG,WAAaL,EAASI,SAAWJ,EAASM,OAsTnD,OAlVuCC,EAAAA,EAAAA,GA+BrCT,EAAAtE,UAAAuC,QAAA,SAAQY,GACN,OAAOA,EAAK6B,eAGdV,EAAAtE,UAAA4C,SAAA,SAASO,GACP,OAAOA,EAAKP,YAGd0B,EAAAtE,UAAA8C,QAAA,SAAQK,GACN,OAAOA,EAAKL,WAGdwB,EAAAtE,UAAA+C,SAAA,SAASI,GACP,OAAOA,EAAKJ,YAGduB,EAAAtE,UAAAiF,SAAA,SAAS9B,EAAYxB,GACnBwB,EAAK8B,SAAStD,IAGhB2C,EAAAtE,UAAAgD,WAAA,SAAWG,GACT,OAAOA,EAAKH,cAGdsB,EAAAtE,UAAAkF,WAAA,SAAW/B,EAAYxB,GACrBwB,EAAK+B,WAAWvD,IAGlB2C,EAAAtE,UAAAmF,WAAA,SAAWhC,EAAYxB,EAAeyD,GACpCjC,EAAKgC,WAAWxD,EAAOyD,IAGzBd,EAAAtE,UAAAqF,aAAA,SAAalC,GACX,OAAOA,EAAKmC,UAGdhB,EAAAtE,UAAAuF,cAAA,SAAcC,GAAd,IAAAd,EAAA5E,KACE,GAAIyD,EAAmB,KACfkC,EAAM,IAAIjC,KAAKkC,eAAe5F,KAAKkC,OAAQ,CAAE2D,MAAOH,EAAOI,SAAU,QAC3E,OAAO9B,EAAM,GAAE,SAAExD,GAAK,OAAAoE,EAAKmB,+BAA+BnB,EAAKoB,QAAQL,EAAK,IAAIM,KAAK,KAAMzF,EAAG,OAEhG,OAAOmD,EAAoB+B,IAG7BlB,EAAAtE,UAAAgG,aAAA,WAAA,IAAAtB,EAAA5E,KACE,GAAIyD,EAAmB,KACf0C,EAAM,IAAIzC,KAAKkC,eAAe5F,KAAKkC,OAAQ,CAAEkE,IAAK,UAAWN,SAAU,QAC7E,OAAO9B,EAAM,GAAE,SAAExD,GAAK,OAAAoE,EAAKmB,+BAA+BnB,EAAKoB,QAAQG,EAAK,IAAIF,KAAK,KAAM,EAAGzF,EAAI,OAEpG,OAAOuD,GAGTS,EAAAtE,UAAAmG,aAAA,WAAA,IAAAzB,EAAA5E,KACE,GAAIyD,EAAmB,KACf6C,EAAM,IAAI5C,KAAKkC,eAAe5F,KAAKkC,OAAQ,CAAEqE,KAAM,UAAWT,SAAU,QAC9E,OAAO9B,EAAM,GAAE,SAAExD,GAAK,OAAAoE,EAAKmB,+BAA+BO,EAAIE,OAAO,IAAIP,KAAK,KAAM,EAAG,EAAGzF,OAE5F,OAAO0D,GAGTM,EAAAtE,UAAAuG,eAAA,WAAA,IAAA7B,EAAA5E,KACE,GAAIyD,EAAmB,KACfiD,EAAM,IAAIhD,KAAKkC,eAAe5F,KAAKkC,OAAQ,CAAEyE,OAAQ,UAAWb,SAAU,QAChF,OAAO9B,EAAM,GAAE,SAAExD,GAAK,OAAAoE,EAAKmB,+BAA+BW,EAAIF,OAAO,IAAIP,KAAK,KAAM,EAAG,EAAG,EAAGzF,OAE/F,OAAO2D,GAGTK,EAAAtE,UAAA0G,kBAAA,SAAkBlB,GAAlB,IAAAd,EAAA5E,KACE,GAAIyD,EAAmB,KACfoD,EAAM,IAAInD,KAAKkC,eAAe5F,KAAKkC,OAAQ,CAAE4E,QAASpB,EAAOI,SAAU,QAC7E,OAAO9B,EAAM,EAAC,SAAExD,GAAK,OAAAoE,EAAKmB,+BAA+BnB,EAAKoB,QAAQa,EAAK,IAAIZ,KAAK,KAAM,EAAGzF,EAAI,OAEnG,OAAO4D,EAA0BsB,IAGnClB,EAAAtE,UAAA6G,YAAA,SAAY1D,GACV,GAAII,EAAmB,KACfuD,EAAM,IAAItD,KAAKkC,eAAe5F,KAAKkC,OAAQ,CAAE+E,KAAM,UAAWnB,SAAU,QAC9E,OAAO9F,KAAK+F,+BAA+B/F,KAAKgG,QAAQgB,EAAK3D,IAE/D,OAAOY,OAAOjE,KAAKyC,QAAQY,KAG7BmB,EAAAtE,UAAAgH,kBAAA,WAEE,OAAO,GAGT1C,EAAAtE,UAAAiH,kBAAA,SAAkB9D,GAChB,OAAOrD,KAAKgD,QAAQhD,KAAKoH,wBAAwBpH,KAAKyC,QAAQY,GAAOrD,KAAK8C,SAASO,GAAQ,EAAG,KAGhGmB,EAAAtE,UAAAmH,MAAA,SAAMhE,GACJ,OAAOrD,KAAKsH,WACVtH,KAAKyC,QAAQY,GACbrD,KAAK8C,SAASO,GACdrD,KAAKgD,QAAQK,GACbrD,KAAKiD,SAASI,GACdrD,KAAKkD,WAAWG,KAIpBmB,EAAAtE,UAAAoH,WAAA,SAAWL,EAAcpB,EAAexC,EAAckE,EAAgBC,GAGpE,GAAI3B,EAAQ,GAAKA,EAAQ,GACvB,MAAM4B,MAAM,wBAAwB5B,EAAK,8CAG3C,GAAIxC,EAAO,EACT,MAAMoE,MAAM,iBAAiBpE,EAAI,yCAG7BqE,EAAS1H,KAAKoH,wBAAwBH,EAAMpB,EAAOxC,EAAMkE,EAAOC,GAGtE,GAAIE,EAAO5E,aAAe+C,EACxB,MAAM4B,MAAM,iBAAiBpE,EAAI,2BAA2BwC,EAAK,MAGnE,OAAO6B,GAGTlD,EAAAtE,UAAAyH,MAAA,WACE,OAAO,IAAI1B,MAGbzB,EAAAtE,UAAA0H,MAAA,SAAM/F,GAGJ,MAAqB,iBAAVA,EACF,IAAIoE,KAAKpE,GAEXA,EAAQ,IAAIoE,KAAKA,KAAK2B,MAAM/F,IAAU,MAG/C2C,EAAAtE,UAAAsG,OAAA,SAAOnD,EAAYwE,GACjB,IAAK7H,KAAK+B,QAAQsB,GAChB,MAAMoE,MAAM,kDAGd,GAAIhE,EAAmB,CAGjBzD,KAAK+E,aAAe1B,EAAK6B,cAAgB,GAAK7B,EAAK6B,cAAgB,QACrE7B,EAAOrD,KAAKqH,MAAMhE,IACbyE,YAAYC,KAAKxE,IAAI,EAAGwE,KAAKzE,IAAI,KAAMD,EAAK6B,iBAGnD2C,EAAazH,EAAA,GAAQyH,EAAa,CAAE/B,SAAU,YAExCkB,EAAM,IAAItD,KAAKkC,eAAe5F,KAAKkC,OAAQ2F,GACjD,OAAO7H,KAAK+F,+BAA+B/F,KAAKgG,QAAQgB,EAAK3D,IAE/D,OAAOrD,KAAK+F,+BAA+B1C,EAAK2E,iBAGlDxD,EAAAtE,UAAA+H,iBAAA,SAAiB5E,EAAY6E,GAC3B,OAAOlI,KAAKmI,kBAAkB9E,EAAc,GAAR6E,IAGtC1D,EAAAtE,UAAAiI,kBAAA,SAAkB9E,EAAY+E,OACxBC,EAAUrI,KAAKoH,wBACjBpH,KAAKyC,QAAQY,GACbrD,KAAK8C,SAASO,GAAQ+E,EACtBpI,KAAKgD,QAAQK,GACbrD,KAAKiD,SAASI,GACdrD,KAAKkD,WAAWG,IAWlB,OAJIrD,KAAK8C,SAASuF,OAAerI,KAAK8C,SAASO,GAAQ+E,GAAU,GAAK,IAAM,KAC1EC,EAAUrI,KAAKoH,wBAAwBpH,KAAKyC,QAAQ4F,GAAUrI,KAAK8C,SAASuF,GAAU,IAGjFA,GAGT7D,EAAAtE,UAAAoI,gBAAA,SAAgBjF,EAAYkF,GAC1B,OAAOvI,KAAKoH,wBACVpH,KAAKyC,QAAQY,GACbrD,KAAK8C,SAASO,GACdrD,KAAKgD,QAAQK,GAAQkF,EACrBvI,KAAKiD,SAASI,GACdrD,KAAKkD,WAAWG,KAIpBmB,EAAAtE,UAAAsI,iBAAA,SAAiBnF,EAAYkE,GAC3B,OAAOvH,KAAKoH,wBACVpH,KAAKyC,QAAQY,GACbrD,KAAK8C,SAASO,GACdrD,KAAKgD,QAAQK,GACbrD,KAAKiD,SAASI,GAAQkE,EACtBvH,KAAKkD,WAAWG,KAIpBmB,EAAAtE,UAAAuI,mBAAA,SAAmBpF,EAAYmE,GAC7B,OAAOxH,KAAKoH,wBACVpH,KAAKyC,QAAQY,GACbrD,KAAK8C,SAASO,GACdrD,KAAKgD,QAAQK,GACbrD,KAAKiD,SAASI,GACdrD,KAAKkD,WAAWG,GAAQmE,IAI5BhD,EAAAtE,UAAAwI,UAAA,SAAUrF,GACR,MAAO,CAACA,EAAKsF,iBAAkB3I,KAAK4I,QAAQvF,EAAKwF,cAAgB,GAAI7I,KAAK4I,QAAQvF,EAAKyF,eAAeC,KAAK,MAQ7GvE,EAAAtE,UAAA0B,YAAA,SAAYC,GACV,GAAqB,iBAAVA,EAAoB,CAC7B,IAAKA,EACH,OAAO,KAIT,GAAIwC,EAAe2E,KAAKnH,GAAQ,KAC1BwB,EAAO,IAAI4C,KAAKpE,GACpB,GAAI7B,KAAK+B,QAAQsB,GACf,OAAOA,GAIb,OAAOoB,EAAAvE,UAAM0B,YAAWhB,KAAAZ,KAAC6B,IAG3B2C,EAAAtE,UAAA4B,eAAA,SAAemH,GACb,OAAOA,aAAehD,MAGxBzB,EAAAtE,UAAA6B,QAAA,SAAQsB,GACN,OAAQ6F,MAAM7F,EAAK8F,YAGrB3E,EAAAtE,UAAA8B,QAAA,WACE,OAAO,IAAIiE,KAAKmD,MAIV5E,EAAAtE,UAAAkH,wBAAR,SAAgCH,EAAcpB,EAAexC,EAAckE,EAAgBC,OACnFE,EAAS,IAAIzB,KAAKgB,EAAMpB,EAAOxC,EAAMkE,EAAOC,EAAS,GAO3D,OAHIP,GAAQ,GAAKA,EAAO,KACtBS,EAAOI,YAAY9H,KAAKyC,QAAQiF,GAAU,MAErCA,GAQDlD,EAAAtE,UAAA0I,QAAR,SAAgBnI,GACd,OAAQ,KAAOA,GAAGsC,OAAO,IAUnByB,EAAAtE,UAAA6F,+BAAR,SAAuCsD,GACrC,OAAOA,EAAIC,QAAQ,kBAAmB,KAchC9E,EAAAtE,UAAA8F,QAAR,SAAgBgB,EAA0B3D,OAClC/D,EAAI,IAAI2G,KACZA,KAAKsD,IACHlG,EAAK6B,cACL7B,EAAKP,WACLO,EAAKL,UACLK,EAAKJ,WACLI,EAAKH,aACLG,EAAKmG,aACLnG,EAAKoG,oBAGT,OAAOzC,EAAIR,OAAOlH,wBAjVrBoK,EAAAA,sDA7DQC,EAAAA,yCAiFJC,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMC,KAAA,CAACjJ,QA8TZ0D,EAnVA,CACuChD,GC5D1BwI,EAA0C,CACrDpC,MAAO,CACLvE,KAAM,KACN4G,SAAU,KACVC,KAAM,MAERC,QAAS,CACP9G,KAAM,CAAE4D,KAAM,UAAWpB,MAAO,UAAWO,IAAK,WAChD6D,SAAU,CACRhD,KAAM,UACNpB,MAAO,UACPO,IAAK,UACLmB,MAAO,UACPC,QAAS,WAEX0C,KAAM,CAAE3C,MAAO,UAAWC,QAAS,WACnC4C,cAAe,CAAEnD,KAAM,UAAWpB,MAAO,OAAQO,IAAK,WACtDiE,cAAe,CAAExE,MAAO,QAASO,IAAK,WACtCkE,kBAAmB,CAAEzE,MAAO,OAAQO,IAAK,WACzCmE,eAAgB,CAAEtD,KAAM,UAAWpB,MAAO,SAC1C2E,mBAAoB,CAAEvD,KAAM,UAAWpB,MAAO,QAC9C4E,UAAW,CAAElD,MAAO,UAAWC,QAAS,0BCX5C,SAAAkD,KAI+B,2BAJ9BC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CAACC,EAAAA,gBACVC,UAAW,CAAC,CAAExJ,QAASE,EAAauJ,SAAUvG,QAEjBkG,OAIsBV,EAFrDgB,EAAA,WAAA,SAAAA,KAIkC,2BAJjCL,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CAACF,GACVI,UAAW,CAAC,CAAExJ,QAASkC,EAAkByH,SAAQC,QAEjBF,EAJlC,GCZMG,EAASC;;;;;;;OAGf,SAASpH,EAASrD,EAAgB2D,GAEhC,QADMC,EAAc5E,MAAMgB,GACjBH,EAAI,EAAGA,EAAIG,EAAQH,IAC1B+D,EAAY/D,GAAK8D,EAAc9D,GAEjC,OAAO+D,EAIT,IAAA8G,EAAA,SAAA5G,GAiBE,SAAA4G,EAGEC,GAHF,IAAA1G,EAKEH,EAAA7D,KAAAZ,OAAOA,YACP4E,EAAK3C,UAAUqJ,GAAcH,EAAOjJ,YAwMxC,OA9NuC+C,EAAAA,EAAAA,GAyBrCoG,EAAAnL,UAAA+B,UAAA,SAAUC,GAAV,IAAA0C,EAAA5E,KACEyE,EAAAvE,UAAM+B,UAASrB,KAAAZ,KAACkC,OAEVqJ,EAAmBJ,EAAOK,WAAWtJ,GAC3ClC,KAAKyL,YAAc,CACjBC,eAAgBH,EAAiBG,iBACjCC,WAAYJ,EAAiBnD,SAC7BwD,YAAaL,EAAiBM,cAC9BC,MAAO9H,EAAM,GAAE,SAAExD,GAAK,OAAAoE,EAAK0C,WAAW,KAAM,EAAG9G,EAAI,GAAGgG,OAAO,OAC7DuF,eAAgBR,EAAiBS,WACjCC,gBAAiBV,EAAiBW,gBAClCC,iBAAkBZ,EAAiBa,gBAIvCf,EAAAnL,UAAAuC,QAAA,SAAQY,GACN,OAAOrD,KAAKqH,MAAMhE,GAAM4D,QAG1BoE,EAAAnL,UAAA4C,SAAA,SAASO,GACP,OAAOrD,KAAKqH,MAAMhE,GAAMwC,SAG1BwF,EAAAnL,UAAA8C,QAAA,SAAQK,GACN,OAAOrD,KAAKqH,MAAMhE,GAAMA,QAG1BgI,EAAAnL,UAAA+C,SAAA,SAASI,GACP,OAAOrD,KAAKqH,MAAMhE,GAAMkE,SAG1B8D,EAAAnL,UAAAiF,SAAA,SAAS9B,EAAcxB,GACrBwB,EAAKkE,MAAM1F,IAGbwJ,EAAAnL,UAAAgD,WAAA,SAAWG,GACT,OAAOrD,KAAKqH,MAAMhE,GAAMmE,WAG1B6D,EAAAnL,UAAAkF,WAAA,SAAW/B,EAAcxB,GACvBwB,EAAKmE,QAAQ3F,IAGfwJ,EAAAnL,UAAAmF,WAAA,SAAWhC,EAAcxB,EAAeyD,GACtCjC,EAAKgJ,QAAQxK,GACTyD,GACFjC,EAAKiJ,aAAahH,IAItB+F,EAAAnL,UAAAqF,aAAA,SAAalC,GACX,OAAOrD,KAAKqH,MAAMhE,GAAM+C,OAG1BiF,EAAAnL,UAAAuF,cAAA,SAAcC,GAEZ,MAAiB,SAAVA,EAAmB1F,KAAKyL,YAAYE,WAAa3L,KAAKyL,YAAYG,aAG3EP,EAAAnL,UAAAgG,aAAA,WACE,OAAOlG,KAAKyL,YAAYK,OAG1BT,EAAAnL,UAAAmG,aAAA,WAEE,OAAOrC,EAAM,GAAIC,SAGnBoH,EAAAnL,UAAAuG,eAAA,WAEE,OAAOzC,EAAM,GAAIC,SAGnBoH,EAAAnL,UAAA0G,kBAAA,SAAkBlB,GAChB,MAAc,SAAVA,EACK1F,KAAKyL,YAAYM,eAEZ,UAAVrG,EACK1F,KAAKyL,YAAYQ,gBAEnBjM,KAAKyL,YAAYU,kBAG1Bd,EAAAnL,UAAA6G,YAAA,SAAY1D,GACV,OAAOrD,KAAKqH,MAAMhE,GAAMmD,OAAO,SAGjC6E,EAAAnL,UAAAgH,kBAAA,WACE,OAAOlH,KAAKyL,YAAYC,gBAG1BL,EAAAnL,UAAAiH,kBAAA,SAAkB9D,GAChB,OAAOrD,KAAKqH,MAAMhE,GAAMkJ,eAG1BlB,EAAAnL,UAAAmH,MAAA,SAAMhE,GAEJ,OADYA,EAAO8H,EAAO9H,GAAQ8H,KACvBjJ,OAAOlC,KAAKkC,SAGzBmJ,EAAAnL,UAAAoH,WAAA,SAAWL,EAAcpB,EAAexC,EAAckE,EAAgBC,GAGpE,GAAI3B,EAAQ,GAAKA,EAAQ,GACvB,MAAM4B,MAAM,wBAAwB5B,EAAK,8CAG3C,GAAIxC,EAAO,EACT,MAAMoE,MAAM,iBAAiBpE,EAAI,yCAG7BqE,EAASyD,EAAO,CAAElE,KAAIA,EAAEpB,MAAKA,EAAExC,KAAIA,EAAEkE,MAAKA,EAAEC,QAAOA,EAAE6E,QAAS,IAGpE,IAAK3E,EAAO3F,UACV,MAAM0F,MAAM,iBAAiBpE,EAAI,2BAA2BwC,EAAK,MAGnE,OAAO6B,EAAOxF,OAAOlC,KAAKkC,SAG5BmJ,EAAAnL,UAAAyH,MAAA,WACE,OAAOwD,IAASjJ,OAAOlC,KAAKkC,SAG9BmJ,EAAAnL,UAAA0H,MAAA,SAAM/F,EAAY2K,GAChB,OAAIA,GAAe3K,GAA0B,iBAAVA,EAC1BsJ,EAAOtJ,EAAO2K,EAAaxM,KAAKkC,QAAQ,GAE1CL,EAAQsJ,EAAOtJ,GAAOK,OAAOlC,KAAKkC,QAAU,MAGrDmJ,EAAAnL,UAAAsG,OAAA,SAAOnD,EAAcwE,GAEnB,GADAxE,EAAOrD,KAAKqH,MAAMhE,IACbrD,KAAK+B,QAAQsB,GAChB,MAAMoE,MAAM,kDAEd,OAAOpE,EAAKmD,OAAOqB,IAGrBwD,EAAAnL,UAAA+H,iBAAA,SAAiB5E,EAAc6E,GAC7B,OAAOlI,KAAKqH,MAAMhE,GAAMoJ,IAAI,CAAEvE,MAAKA,KAGrCmD,EAAAnL,UAAAiI,kBAAA,SAAkB9E,EAAc+E,GAC9B,OAAOpI,KAAKqH,MAAMhE,GAAMoJ,IAAI,CAAErE,OAAMA,KAGtCiD,EAAAnL,UAAAoI,gBAAA,SAAgBjF,EAAckF,GAC5B,OAAOvI,KAAKqH,MAAMhE,GAAMoJ,IAAI,CAAElE,KAAIA,KAGpC8C,EAAAnL,UAAAsI,iBAAA,SAAiBnF,EAAckE,GAC7B,OAAOvH,KAAKqH,MAAMhE,GAAMoJ,IAAI,CAAElF,MAAKA,KAGrC8D,EAAAnL,UAAAuI,mBAAA,SAAmBpF,EAAcmE,GAC/B,OAAOxH,KAAKqH,MAAMhE,GAAMoJ,IAAI,CAAEjF,QAAOA,KAGvC6D,EAAAnL,UAAAwI,UAAA,SAAUrF,GACR,OAAOrD,KAAKqH,MAAMhE,GAAMmD,UAQ1B6E,EAAAnL,UAAA0B,YAAA,SAAYC,OACNwB,EAIJ,GAHIxB,aAAiBoE,OACnB5C,EAAO8H,EAAOtJ,IAEK,iBAAVA,EAAoB,CAC7B,IAAKA,EACH,OAAO,KAETwB,EAAO8H,EAAOtJ,EAAOsJ,EAAOuB,UAAUxK,OAAOlC,KAAKkC,QAEpD,OAAImB,GAAQrD,KAAK+B,QAAQsB,GAChBA,EAEFoB,EAAAvE,UAAM0B,YAAWhB,KAAAZ,KAAC6B,IAG3BwJ,EAAAnL,UAAA4B,eAAA,SAAemH,GACb,OAAOkC,EAAOwB,SAAS1D,GAAOjJ,KAAKqH,MAAM4B,GAAKlH,UAAYoJ,EAAOlC,GAAKlH,WAGxEsJ,EAAAnL,UAAA6B,QAAA,SAAQsB,GACN,OAAOrD,KAAKqH,MAAMhE,GAAMtB,WAG1BsJ,EAAAnL,UAAA8B,QAAA,WACE,OAAOmJ,EAAOnJ,+BA7NjB0H,EAAAA,+EAkBIE,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMC,KAAA,CAACjJ,QA4MZuK,EA/NA,CACuC7J,GCjB1BoL,EAA0C,CACrDhF,MAAO,CACLvE,KAAM,CAAC,aAAc,aAAc,MACnC4G,SAAU,CAAC,mBAAoB,mBAAoB,YACnDC,KAAM,CAAC,OAAQ,QAAS,SAAU,YAEpCC,QAAS,CACP9G,KAAM,KACN4G,SAAU,WACVC,KAAM,SACNE,cAAe,KACfC,cAAe,QACfC,kBAAmB,SACnBC,eAAgB,YAChBC,mBAAoB,YACpBC,UAAW,uBCRf,SAAAoC,KAG+B,2BAH9BlC,EAAAA,SAAQZ,KAAA,CAAC,CACRe,UAAW,CAAC,CAAExJ,QAASE,EAAauJ,SAAUM,EAAmByB,KAAM,CAAChM,SAE3C+L,OAIsBD,EAFrDG,EAAA,WAAA,SAAAA,KAIkC,2BAJjCpC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CAACiC,GACV/B,UAAW,CAAC,CAAExJ,QAASkC,EAAkByH,SAAQ+B,QAEjBD,EAJlC;;;;;;;;;;;;;;;ACbA,SAAgBE,EAA2BC,GACzC,OAAOzF,MACL,wCAAwCyF,EAAQ,yJCMpD,IAWAC,EAAA,WAwHE,SAAAA,EACUC,EACAC,EACWC,EAGXC,GANV,IAAA3I,EAAA5E,KAQE,GAPQA,KAAAoN,mBAAAA,EACApN,KAAAqN,SAAAA,EACWrN,KAAAsN,aAAAA,EAGXtN,KAAAuN,aAAAA,EA9DDvN,KAAAwN,UAAY,EAEZxN,KAAAyN,YAAa,EAGbzN,KAAA0N,UAAW,EAGD1N,KAAA2N,aAAe,IAAIC,EAAAA,aAGnB5N,KAAA6N,eAAiB,IAAID,EAAAA,aAGrB5N,KAAA8N,WAAa,IAAIF,EAAAA,aAGpC5N,KAAA+N,OAAqB,GACrB/N,KAAAgO,SAAuB,IA8ChBhO,KAAKsN,aACR,MAAML,EAA2B,eAEnC,IAAKjN,KAAKuN,aACR,MAAMN,EAA2B,oBAGnCjN,KAAKiO,kBAAiB,SAAIC,GACxBtJ,EAAKuJ,iBAAiBD,IAExBlO,KAAKoO,gBAAe,WAClBxJ,EAAKyJ,kBAmKX,OA9RE7O,OAAAmC,eACIwL,EAAAjN,UAAA,aAAU,KADd,WAEE,OAAOF,KAAKsO,iBAEd,SAAezM,OACP0M,EAAgBvO,KAAKsO,YACrBE,EAAYxO,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,KAAW7B,KAAKsN,aAAa3F,QACtG3H,KAAKsO,YAActO,KAAKsN,aAAalK,UAAUoL,EAAWxO,KAAK0O,QAAS1O,KAAK2O,SAEzEJ,GAAiBvO,KAAKsN,aAAalL,YAAYmM,EAAevO,KAAKsO,YAAa,WAClFtO,KAAK4O,yCAMTpP,OAAAmC,eACIwL,EAAAjN,UAAA,WAAQ,KADZ,WAEE,OAAOF,KAAK6O,eAEd,SAAahN,GACX7B,KAAK6O,UAAY7O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAK1ErC,OAAAmC,eACIwL,EAAAjN,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK8O,cAEd,SAAYjN,GACV7B,KAAK8O,SAAW9O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAKzErC,OAAAmC,eACIwL,EAAAjN,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK+O,cAEd,SAAYlN,GACV7B,KAAK+O,SAAW/O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAkCzErC,OAAAmC,eAAIwL,EAAAjN,UAAA,QAAK,KAAT,WACEF,KAAKgP,cAAgBhP,KAAKsN,aAAarK,SAASjD,KAAKiP,YACrDjP,KAAKkP,gBAAkBlP,KAAKsN,aAAapK,WAAWlD,KAAKiP,gBACrDE,EAvG0B,MAwG1BC,EAAM,GAENpP,KAAKyN,aACPzN,KAAKgP,cAAgBhP,KAAKgP,cAAgB,GAAKhP,KAAKgP,cAAgBhP,KAAKgP,cAAgB,GACzFhP,KAAKgP,cAAuC,IAAvBhP,KAAKgP,cAAsB,GAAKhP,KAAKgP,eAGxDhP,KAAK0N,WAEPyB,EADcnP,KAAKgP,cAAgB,GAAKhP,KAAKgP,cAAgB,GAhHjC,MADA,KAmHxBhP,KAAKyN,aACP0B,EAnH0B,OAqH5BC,EAAMrH,KAAKsH,MAAwB,GAAlBrP,KAAKgP,gBAEtBI,EAAMrH,KAAKsH,MAA0B,EAApBrP,KAAKkP,iBAGxB,MAAO,CACLI,UAAW,UAAUF,EAAG,OACxBG,OAAWJ,EAAM,IACjBK,aAAiB,GAAKL,EAAM,sCA2BhChC,EAAAjN,UAAAuP,mBAAA,WACEzP,KAAK4O,SAIPzB,EAAAjN,UAAAwP,iBAAA,SAAiBxB,GACflO,KAAK2P,QAAQzB,GACb0B,SAASC,iBAAiB,YAAa7P,KAAKiO,mBAC5C2B,SAASC,iBAAiB,YAAa7P,KAAKiO,mBAC5C2B,SAASC,iBAAiB,UAAW7P,KAAKoO,iBAC1CwB,SAASC,iBAAiB,WAAY7P,KAAKoO,kBAG7CjB,EAAAjN,UAAAiO,iBAAA,SAAiBD,GACfA,EAAM4B,iBACN9P,KAAK2P,QAAQzB,IAGff,EAAAjN,UAAAmO,eAAA,WACEuB,SAASG,oBAAoB,YAAa/P,KAAKiO,mBAC/C2B,SAASG,oBAAoB,YAAa/P,KAAKiO,mBAC/C2B,SAASG,oBAAoB,UAAW/P,KAAKoO,iBAC7CwB,SAASG,oBAAoB,WAAY/P,KAAKoO,kBAIhDjB,EAAAjN,UAAA0O,MAAA,WACE5O,KAAK+N,OAAOpN,OAAS,EACrBX,KAAKgO,SAASrN,OAAS,MAEjBqP,EAAYhQ,KAAKsN,aAAajH,eAC9B4J,EAAcjQ,KAAKsN,aAAa7G,iBAEtC,GAAIzG,KAAKyN,WAAY,CACnBzN,KAAKkQ,cAAgBlQ,KAAKsN,aAAarK,SAASjD,KAAKiP,YAAc,GAEnE,IAAK,IAAIzO,EAAI,EAAGA,EAAIwP,EAAUrP,OAAS,EAAGH,IAAK,KACvC2P,EAAS3P,EAAI,EAAIuH,KAAKqI,GACtBjB,EA9LoB,MA+LpB9L,EAAOrD,KAAKsN,aAAahG,WAC7BtH,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAC/BjP,KAAKsN,aAAaxK,SAAS9C,KAAKiP,YAChCjP,KAAKsN,aAAatK,QAAQhD,KAAKiP,YAC/BjP,KAAKkQ,cAAgB1P,EAAIA,EAAI,IAE/BR,KAAK+N,OAAOsC,KAAK,CACfxO,MAAOrB,EACP8P,aAAoB,IAAN9P,EAAU,KAAOwP,EAAUxP,GACzC+P,SAAUvQ,KAAKwQ,YAAcxQ,KAAKwQ,WAAWnN,EAAM,QACnDoN,IA3MkB,GA2ME1I,KAAK2I,IAAIP,GAAUhB,EAxMhB,OAyMvBwB,KA5MkB,GA4MG5I,KAAK6I,IAAIT,GAAUhB,EAzMjB,eA6M3B,IAAS3O,EAAI,EAAGA,EAAIwP,EAAUrP,OAAQH,IAAK,CACnC2P,EAAS3P,EAAI,EAAIuH,KAAKqI,GAEtBjB,EADQ3O,EAAI,GAAKA,EAAI,GAhND,MADA,KAmNpB6C,EAAOrD,KAAKsN,aAAahG,WAC7BtH,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAC/BjP,KAAKsN,aAAaxK,SAAS9C,KAAKiP,YAChCjP,KAAKsN,aAAatK,QAAQhD,KAAKiP,YAC/BzO,GAEFR,KAAK+N,OAAOsC,KAAK,CACfxO,MAAOrB,EACP8P,aAAoB,IAAN9P,EAAU,KAAOwP,EAAUxP,GACzC+P,SAAUvQ,KAAKwQ,YAAcxQ,KAAKwQ,WAAWnN,EAAM,QACnDoN,IA9NkB,GA8NE1I,KAAK2I,IAAIP,GAAUhB,EA3NhB,OA4NvBwB,KA/NkB,GA+NG5I,KAAK6I,IAAIT,GAAUhB,EA5NjB,OA6NvB0B,SAAUrQ,EAAI,GAAKA,EAAI,GAAK,GAAK,QAKvC,IAASA,EAAI,EAAGA,EAAIyP,EAAYtP,OAAQH,GAAK,EAAG,CACxC2P,EAAS3P,EAAI,GAAKuH,KAAKqI,GACvB/M,EAAOrD,KAAKsN,aAAahG,WAC7BtH,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAC/BjP,KAAKsN,aAAaxK,SAAS9C,KAAKiP,YAChCjP,KAAKsN,aAAatK,QAAQhD,KAAKiP,YAC/BjP,KAAKsN,aAAarK,SAASjD,KAAKiP,YAChCzO,GAEFR,KAAKgO,SAASqC,KAAK,CACjBxO,MAAOrB,EACP8P,aAAoB,IAAN9P,EAAU,KAAOyP,EAAYzP,GAC3C+P,SAAUvQ,KAAKwQ,YAAcxQ,KAAKwQ,WAAWnN,EAAM,UACnDoN,IAlPoB,GAEM,MAgPN1I,KAAK2I,IAAIP,GA/OJ,OAgPzBQ,KAnPoB,GAEM,MAiPL5I,KAAK6I,IAAIT,GAhPL,SAoP7BnQ,KAAKoN,mBAAmB0D,gBAIlB3D,EAAAjN,UAAAyP,QAAR,SAAgBzB,OACR6C,EAAU/Q,KAAKqN,SAAS2D,cACxBC,EAAcF,EAAQG,wBACtBC,EAAQJ,EAAQK,YAChB7B,EAASwB,EAAQM,aACjBC,EAAQpD,EAAMoD,QAAUC,UAAYrD,EAAMoD,MAAQpD,EAAMsD,QAAQ,GAAGF,MACnEG,EAAQvD,EAAMuD,QAAUF,UAAYrD,EAAMuD,MAAQvD,EAAMsD,QAAQ,GAAGC,MACnEC,EAAIP,EAAQ,GAAKG,EAAQL,EAAYN,KAAOgB,OAAOC,aACnDC,EAAItC,EAAS,GAAKkC,EAAQR,EAAYR,IAAMkB,OAAOG,aACnDvP,EAAOwF,KAAKqI,IAAMpQ,KAAK0N,SAAW,EAAI1N,KAAKwN,UAAY,GAAKxN,KAAKwN,UAAY,IAC7EuE,EAAIhK,KAAKiK,KAAKN,EAAIA,EAAIG,EAAIA,GAC1BI,EAAQjS,KAAK0N,UAAYqE,GAAU,MAALZ,EAA0C,KAALA,GAAsC,EAE3GhB,EAASpI,KAAKmK,OAAOR,EAAGG,GACxB1B,EAAS,IACXA,EAAmB,EAAVpI,KAAKqI,GAASD,OAErBtO,EAAQkG,KAAKsH,MAAMc,EAAS5N,GAE1Bc,EAAOrD,KAAKsN,aAAajG,MAAMrH,KAAKiP,YAEtCjP,KAAK0N,UACO,KAAV7L,IACFA,EAAQ,GAEVA,EAAQ7B,KAAKyN,WACTzN,KAAKkQ,cAAgBrO,EAAQA,EAAQ,GACrCoQ,EAAmB,IAAVpQ,EAAc,GAAKA,EAAmB,IAAVA,EAAc,EAAIA,EAAQ,GACnE7B,KAAKsN,aAAanI,SAAS9B,EAAMxB,KAE7B7B,KAAKwN,YACP3L,GAAS7B,KAAKwN,WAEF,KAAV3L,IACFA,EAAQ,GAEV7B,KAAKsN,aAAalI,WAAW/B,EAAMxB,IAIjC7B,KAAKwQ,aAAexQ,KAAKwQ,WAAWnN,EAAMrD,KAAK0N,SAAW,OAAS,YAIvE1N,KAAKiP,WAAa5L,EACdrD,KAAK0N,UACP1N,KAAK8N,WAAWqE,OAChBnS,KAAK6N,eAAesE,KAAKnS,KAAKiP,aAE9BjP,KAAK2N,aAAawE,KAAKnS,KAAKiP,cAIhC9B,EAAAjN,UAAAkS,iBAAA,aAMQjF,EAAAjN,UAAAuO,oBAAR,SAA4BxF,GAC1B,OAAOjJ,KAAKsN,aAAaxL,eAAemH,IAAQjJ,KAAKsN,aAAavL,QAAQkH,GAAOA,EAAM,0BA5S1FoJ,EAAAA,UAAStI,KAAA,CAAC,CACTuI,SAAU,iBACVC,SAAA,m9BACAC,SAAU,eACVC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,KAAM,CACJC,KAAM,QACNC,cAAe,4BAEjBC,qBAAqB,+CAnCrBC,EAAAA,yBAEAC,EAAAA,kBASO5R,EAAW6R,WAAA,CAAA,CAAAxJ,KAyIfD,EAAAA,8CACAA,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMC,KAAA,CAACvG,4CA7GT8P,EAAAA,wBAgBAA,EAAAA,uBAUAA,EAAAA,uBAUAA,EAAAA,0BAUAA,EAAAA,yBAEAA,EAAAA,0BAEAA,EAAAA,wBAGAA,EAAAA,4BAGAC,EAAAA,+BAGAA,EAAAA,2BAGAA,EAAAA,UAgOHpG,EA9SA,GCfaqG,EAA0CzC,EAAAA,QAAQ,gBAAiB,CAC9E0C,EAAAA,WAAW,YAAa,CACtBC,EAAAA,QACE,IACAC,EAAAA,UAAU,CACRjO,EAAAA,MAAM,CAAE4J,UAAW,kBAAmBsE,OAAQ,GAAKC,QAAS,IAC5DnO,EAAAA,MAAM,CAAE4J,UAAW,mBAAoBsE,OAAQ,IAAMC,QAAS,IAC9DnO,EAAAA,MAAM,CAAE4J,UAAW,gBAAiBsE,OAAQ,EAAGC,QAAS,SAI9DJ,EAAAA,WAAW,aAAc,CACvBC,EAAAA,QACE,IACAC,EAAAA,UAAU,CACRjO,EAAAA,MAAM,CAAE4J,UAAW,mBAAoBsE,OAAQ,GAAKC,QAAS,IAC7DnO,EAAAA,MAAM,CAAE4J,UAAW,kBAAmBsE,OAAQ,IAAMC,QAAS,IAC7DnO,EAAAA,MAAM,CAAE4J,UAAW,gBAAiBsE,OAAQ,EAAGC,QAAS,WAMnDC,EAA0C/C,EAAAA,QAAQ,gBAAiB,CAC9E0C,EAAAA,WAAW,cAAe,CACxBC,EAAAA,QACE,cACAC,EAAAA,UAAU,CACRjO,EAAAA,MAAM,CAAE4J,UAAW,eACnB5J,EAAAA,MAAM,CAAE4J,UAAW,eACnB5J,EAAAA,MAAM,CAAE4J,UAAW,oBAMdyE,EAA2ChD,EAAAA,QAAQ,iBAAkB,CAChFiD,EAAAA,MAAM,OAAQtO,EAAAA,MAAM,CAAEmO,QAAS,EAAGvE,UAAW,iBAC7C0E,EAAAA,MAAM,QAAStO,EAAAA,MAAM,CAAEmO,QAAS,EAAGvE,UAAW,iBAC9CmE,EAAAA,WACE,gBACAQ,EAAAA,MAAM,CACJC,EAAAA,MAAM,kBAAmBC,EAAAA,gBACzBT,EAAAA,QAAQ,6CAGZD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBhO,EAAAA,MAAM,CAAEmO,QAAS,QAGtDO,EAA2CrD,EAAAA,QAAQ,iBAAkB,CAChFiD,EAAAA,MAAM,OAAQtO,EAAAA,MAAM,CAAEmO,QAAS,KAC/BG,EAAAA,MAAM,QAAStO,EAAAA,MAAM,CAAEmO,QAAS,KAChCJ,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,mDCjClCW,GAAA,WAAA,SAAAA,IAMWrU,KAAAsU,QAAU,IAAI5S,EAAAA,QAGvB1B,KAAAuU,cAAgB,WAGhBvU,KAAAwU,kBAAoB,gBAGpBxU,KAAAyU,eAAiB,iBAGjBzU,KAAA0U,eAAiB,aAGjB1U,KAAA2U,cAAgB,gBAGhB3U,KAAA4U,cAAgB,YAGhB5U,KAAA6U,aAAe,iBAGf7U,KAAA8U,aAAe,iBAGf9U,KAAA+U,wBAA0B,wBAG1B/U,KAAAgV,sBAAwB,sBAGxBhV,KAAAiV,uBAAyB,uBAGzBjV,KAAAkV,sBAAwB,sBAGxBlV,KAAAmV,uBAAyB,uBAGzBnV,KAAAoV,iBAAmB,KAGnBpV,KAAAqV,kBAAoB,0BAGpBrV,KAAAsV,iBAAmB,SAGnBtV,KAAAuV,kBAAoB,uDAzDrB7L,EAAAA,WAAUK,KAAA,CAAC,CAAE/I,WAAY,gHAA1B,iBCDA,OANE,SACSa,EACAyO,EACAkF,EACAjF,GAHAvQ,KAAA6B,MAAAA,EACA7B,KAAAsQ,aAAAA,EACAtQ,KAAAwV,UAAAA,EACAxV,KAAAuQ,QAAAA,MAQXkF,GAAA,WAmDE,SAAAA,EAAoBC,EAAiCC,GAAjC3V,KAAA0V,YAAAA,EAAiC1V,KAAA2V,QAAAA,EAjB5C3V,KAAA4V,QAAU,EAGV5V,KAAA6V,wBAAyB,EAGzB7V,KAAA8V,WAAa,EAMb9V,KAAA+V,gBAAkB,IAGR/V,KAAAgW,oBAAsB,IAAIpI,EAAAA,aAwC/C,OApCE6H,EAAAvV,UAAA+V,aAAA,SAAaC,IACNlW,KAAK6V,wBAA2BK,EAAK3F,UAG1CvQ,KAAKgW,oBAAoB7D,KAAK+D,EAAKrU,QAIrCrC,OAAAmC,eAAI8T,EAAAvV,UAAA,kBAAe,KAAnB,WACE,OAAOF,KAAKmW,MAAQnW,KAAKmW,KAAKxV,QAAUX,KAAKmW,KAAK,GAAGxV,OACjDX,KAAK4V,QAAU5V,KAAKmW,KAAK,GAAGxV,OAC5B,mCAGN8U,EAAAvV,UAAAkW,cAAA,SAAcC,EAAkBC,OAC1BC,EAAaF,EAAWrW,KAAK4V,QAAUU,EAO3C,OAJID,IACFE,GAAcvW,KAAKwW,iBAGdD,IAAevW,KAAK8V,YAI7BL,EAAAvV,UAAAkS,iBAAA,WAAA,IAAAxN,EAAA5E,KACEA,KAAK2V,QAAQc,kBAAiB,WAC5B7R,EAAK+Q,QAAQe,SACVC,eACAC,KAAKC,EAAAA,KAAK,IACVC,UAAS,WACRlS,EAAK8Q,YAAY1E,cAAc+F,cAAc,6BAA6BC,iCArFnF3E,EAAAA,UAAStI,KAAA,CAAC,CACTuI,SAAU,sBACVC,SAAA,q6EAEAQ,KAAM,CACJkE,QAAO,oBACPjE,KAAM,OACNkE,qBAAsB,QAExB1E,SAAU,kBACVC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCI,qBAAqB,+CAtCrBE,EAAAA,kBAGA+D,EAAAA,yCAuCC7D,EAAAA,oBAGAA,EAAAA,0BAGAA,EAAAA,2BAGAA,EAAAA,6BAGAA,EAAAA,qCAGAA,EAAAA,uBAGAA,EAAAA,sCAGAA,EAAAA,0BAGAA,EAAAA,+BAMAA,EAAAA,mCAGAC,EAAAA,UAwCHkC,EAzFA,GCQA2B,GAAA,WAsGE,SAAAA,EACUhK,EAGAG,EACWD,EACC+J,GAEpB,GAPQrX,KAAAoN,mBAAAA,EAGApN,KAAAuN,aAAAA,EACWvN,KAAAsN,aAAAA,EACCtN,KAAAqX,KAAAA,EAzCHrX,KAAA6N,eAAiB,IAAID,EAAAA,aAGrB5N,KAAAsX,eAAiB,IAAI1J,EAAAA,aAGrB5N,KAAAuX,iBAAmB,IAAI3J,EAAAA,cAqCnC5N,KAAKsN,aACR,MAAML,EAA2B,eAEnC,IAAKjN,KAAKuN,aACR,MAAMN,EAA2B,wBAG7BvB,EAAiB1L,KAAKsN,aAAapG,oBACnCsQ,EAAiBxX,KAAKsN,aAAa1G,kBAAkB,UAIrDoF,EAHehM,KAAKsN,aAAa1G,kBAAkB,QAG3B6Q,IAAG,SAAE7T,EAAMpD,GACvC,MAAO,CAAEoD,KAAIA,EAAEE,OAAQ0T,EAAehX,GAAGuC,MAAM,EAAG,MAEpD/C,KAAK0X,UAAY1L,EAASjJ,MAAM2I,GAAgB7I,OAAOmJ,EAASjJ,MAAM,EAAG2I,IAiL7E,OAjSElM,OAAAmC,eACIyV,EAAAlX,UAAA,aAAU,KADd,WAEE,OAAOF,KAAKsO,iBAEd,SAAezM,OACP0M,EAAgBvO,KAAKsO,YACrBE,EAAYxO,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,KAAW7B,KAAKsN,aAAa3F,QACtG3H,KAAKsO,YAActO,KAAKsN,aAAalK,UAAUoL,EAAWxO,KAAK0O,QAAS1O,KAAK2O,SAC7E3O,KAAK2X,aAAe3X,KAAK4X,uBAAuB5X,KAAKiP,YAEjDV,IAAkBvO,KAAK6X,qBAAqBtJ,EAAevO,KAAKsO,cAClEtO,KAAK4O,yCAMTpP,OAAAmC,eACIyV,EAAAlX,UAAA,WAAQ,KADZ,WAEE,OAAOF,KAAK6O,eAEd,SAAahN,GACX7B,KAAK6O,UAAY7O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,IACxE7B,KAAK8X,cAAgB9X,KAAK4X,uBAAuB5X,KAAK6O,4CAKxDrP,OAAAmC,eACIyV,EAAAlX,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK8O,cAEd,SAAYjN,GACV7B,KAAK8O,SAAW9O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAKzErC,OAAAmC,eACIyV,EAAAlX,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK+O,cAEd,SAAYlN,GACV7B,KAAK+O,SAAW/O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAwEzEuV,EAAAlX,UAAAuP,mBAAA,WACEzP,KAAK4O,SAIPwI,EAAAlX,UAAA6X,cAAA,SAAc1U,GACZ,GAAIrD,KAAK8X,gBAAkBzU,EAAM,KACzB2U,EAAehY,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAC9CgJ,EAAgBjY,KAAKsN,aAAaxK,SAAS9C,KAAKiP,YAChDiJ,EAAgBlY,KAAKsN,aAAarK,SAASjD,KAAKiP,YAChDkJ,EAAkBnY,KAAKsN,aAAapK,WAAWlD,KAAKiP,YACpDmJ,EAAepY,KAAKsN,aAAahG,WACrC0Q,EACAC,EACA5U,EACA6U,EACAC,GAGFnY,KAAK6N,eAAesE,KAAKiG,GAG3BpY,KAAKsX,eAAenF,QAItBiF,EAAAlX,UAAAmY,2BAAA,SAA2BnK,OAKnBK,EAAgBvO,KAAKsO,YAErBgK,EAAQtY,KAAKuY,SACnB,OAAQrK,EAAMsK,SACZ,KAAKC,EAAAA,WACHzY,KAAKiP,WAAajP,KAAKsN,aAAahF,gBAAgBtI,KAAKsO,YAAagK,EAAQ,GAAK,GACnF,MACF,KAAKI,EAAAA,YACH1Y,KAAKiP,WAAajP,KAAKsN,aAAahF,gBAAgBtI,KAAKsO,YAAagK,GAAS,EAAI,GACnF,MACF,KAAKK,EAAAA,SACH3Y,KAAKiP,WAAajP,KAAKsN,aAAahF,gBAAgBtI,KAAKsO,aAAc,GACvE,MACF,KAAKsK,EAAAA,WACH5Y,KAAKiP,WAAajP,KAAKsN,aAAahF,gBAAgBtI,KAAKsO,YAAa,GACtE,MACF,KAAKuK,EAAAA,KACH7Y,KAAKiP,WAAajP,KAAKsN,aAAahF,gBAClCtI,KAAKsO,YACL,EAAItO,KAAKsN,aAAatK,QAAQhD,KAAKsO,cAErC,MACF,KAAKwK,EAAAA,IACH9Y,KAAKiP,WAAajP,KAAKsN,aAAahF,gBAClCtI,KAAKsO,YACLtO,KAAKsN,aAAanG,kBAAkBnH,KAAKsO,aAAetO,KAAKsN,aAAatK,QAAQhD,KAAKsO,cAEzF,MACF,KAAKyK,EAAAA,QACH/Y,KAAKiP,WAAaf,EAAM8K,OACpBhZ,KAAKsN,aAAarF,iBAAiBjI,KAAKsO,aAAc,GACtDtO,KAAKsN,aAAanF,kBAAkBnI,KAAKsO,aAAc,GAC3D,MACF,KAAK2K,EAAAA,UACHjZ,KAAKiP,WAAaf,EAAM8K,OACpBhZ,KAAKsN,aAAarF,iBAAiBjI,KAAKsO,YAAa,GACrDtO,KAAKsN,aAAanF,kBAAkBnI,KAAKsO,YAAa,GAC1D,MACF,KAAK4K,EAAAA,MAOH,YANKlZ,KAAKwQ,aAAcxQ,KAAKwQ,WAAWxQ,KAAKsO,eAC3CtO,KAAK+X,cAAc/X,KAAKsN,aAAatK,QAAQhD,KAAKsO,cAClDtO,KAAKsX,eAAenF,OAEpBjE,EAAM4B,mBAGV,QAEE,OAGA9P,KAAKsN,aAAalL,YAAYmM,EAAevO,KAAKiP,aACpDjP,KAAKuX,iBAAiBpF,KAAKnS,KAAKiP,YAGlCjP,KAAKoS,mBAELlE,EAAM4B,kBAIRsH,EAAAlX,UAAA0O,MAAA,WACE5O,KAAK2X,aAAe3X,KAAK4X,uBAAuB5X,KAAKiP,YACrDjP,KAAK8X,cAAgB9X,KAAK4X,uBAAuB5X,KAAKmZ,UACtDnZ,KAAKoZ,WAAapZ,KAAK4X,uBAAuB5X,KAAKsN,aAAa3F,SAChE3H,KAAKqZ,YAAcrZ,KAAKsN,aACrB7H,cAAc,SACdzF,KAAKsN,aAAaxK,SAAS9C,KAAKiP,aAAaqK,wBAE1CC,EAAevZ,KAAKsN,aAAahG,WACrCtH,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAC/BjP,KAAKsN,aAAaxK,SAAS9C,KAAKiP,YAChC,GAEFjP,KAAKwZ,kBA/Oa,EAgPCxZ,KAAKsN,aAAa/H,aAAagU,GAAgBvZ,KAAKsN,aAAapG,qBAhPlE,EAmPlBlH,KAAKyZ,mBACLzZ,KAAKoN,mBAAmB0D,gBAI1BsG,EAAAlX,UAAAkS,iBAAA,WACEpS,KAAK0Z,iBAAiBtH,oBAIhBgF,EAAAlX,UAAAuZ,iBAAR,eACQlN,EAAcvM,KAAKsN,aAAanG,kBAAkBnH,KAAKiP,YACvD0K,EAAY3Z,KAAKsN,aAAapH,eACpClG,KAAK4Z,OAAS,CAAC,IACf,IAAK,IAAIpZ,EAAI,EAAG0V,EAAOlW,KAAKwZ,iBAAkBhZ,EAAI+L,EAAa/L,IAAK0V,IAAQ,CAjQ1D,IAkQZA,IACFlW,KAAK4Z,OAAOvJ,KAAK,IACjB6F,EAAO,OAEH7S,EAAOrD,KAAKsN,aAAahG,WAC7BtH,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAC/BjP,KAAKsN,aAAaxK,SAAS9C,KAAKiP,YAChCzO,EAAI,GAEA+P,EAAUvQ,KAAK6Z,kBAAkBxW,GACjCmS,EAAYxV,KAAKsN,aAAa9G,OAAOnD,EAAMrD,KAAKuN,aAAapD,QAAQC,eAC3EpK,KAAK4Z,OAAO5Z,KAAK4Z,OAAOjZ,OAAS,GAAG0P,KAAK,IAAIyJ,GAAgBtZ,EAAI,EAAGmZ,EAAUnZ,GAAIgV,EAAWjF,MAKzF6G,EAAAlX,UAAA2Z,kBAAR,SAA0BxW,GACxB,QACIA,KACArD,KAAKwQ,YAAcxQ,KAAKwQ,WAAWnN,EAAM,WACzCrD,KAAK0O,SAAW1O,KAAKsN,aAAalL,YAAYiB,EAAMrD,KAAK0O,QAAS,QAAU,MAC5E1O,KAAK2O,SAAW3O,KAAKsN,aAAalL,YAAYiB,EAAMrD,KAAK2O,QAAS,QAAU,IAQ1EyI,EAAAlX,UAAA0X,uBAAR,SAA+BvU,GAC7B,OAAOA,GAAQrD,KAAK6X,qBAAqBxU,EAAMrD,KAAKiP,YAAcjP,KAAKsN,aAAatK,QAAQK,GAAQ,MAI9F+T,EAAAlX,UAAA2X,qBAAR,SAA6BkC,EAAcC,GACzC,SAAUD,IAAMC,GAAyD,IAAnDha,KAAKsN,aAAalL,YAAY2X,EAAIC,EAAI,WAOtD5C,EAAAlX,UAAAuO,oBAAR,SAA4BxF,GAC1B,OAAOjJ,KAAKsN,aAAaxL,eAAemH,IAAQjJ,KAAKsN,aAAavL,QAAQkH,GAAOA,EAAM,MAIjFmO,EAAAlX,UAAAqY,OAAR,WACE,OAAOvY,KAAKqX,MAA4B,QAApBrX,KAAKqX,KAAKxV,2BA5SjCwQ,EAAAA,UAAStI,KAAA,CAAC,CACTuI,SAAU,iBACVC,SAAA,0oBACAC,SAAU,eACVyH,WAAY,CAACzG,GACbf,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCI,qBAAqB,+CA9BrBC,EAAAA,qDA+HGvJ,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMC,KAAA,CAACvG,YAnHHhC,EAAW6R,WAAA,CAAA,CAAAxJ,KAqHfD,EAAAA,kBAxHIsQ,EAAAA,eAAc7G,WAAA,CAAA,CAAAxJ,KAyHlBD,EAAAA,kDA/FF0J,EAAAA,wBAiBAA,EAAAA,uBAWAA,EAAAA,uBAUAA,EAAAA,0BAUAA,EAAAA,4BAGAA,EAAAA,8BAGAC,EAAAA,+BAGAA,EAAAA,iCAGAA,EAAAA,iCAGA4G,EAAAA,UAASpQ,KAAA,CAAC0L,OAkOb2B,EA9SA,GCFAgD,GAAA,WA2FE,SAAAA,EACUhN,EAGAG,EACWD,EACC+J,GAEpB,GAPQrX,KAAAoN,mBAAAA,EAGApN,KAAAuN,aAAAA,EACWvN,KAAAsN,aAAAA,EACCtN,KAAAqX,KAAAA,EA7BHrX,KAAA6N,eAAiB,IAAID,EAAAA,aAGrB5N,KAAAuX,iBAAmB,IAAI3J,EAAAA,cA4BnC5N,KAAKsN,aACR,MAAML,EAA2B,eAEnC,IAAKjN,KAAKuN,aACR,MAAMN,EAA2B,oBA8MvC,OA1SEzN,OAAAmC,eACIyY,EAAAla,UAAA,aAAU,KADd,WAEE,OAAOF,KAAKsO,iBAEd,SAAezM,OACP0M,EAAgBvO,KAAKsO,YACrBE,EACJxO,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,KAAW7B,KAAKsN,aAAa3F,QACtF3H,KAAKsO,YAActO,KAAKsN,aAAalK,UAAUoL,EAAWxO,KAAK0O,QAAS1O,KAAK2O,SAG3EJ,GACAvO,KAAKsN,aAAa7K,QAAQ8L,KAAmBvO,KAAKsN,aAAa7K,QAAQzC,KAAKsO,cAE5EtO,KAAK4O,yCAMTpP,OAAAmC,eACIyY,EAAAla,UAAA,WAAQ,KADZ,WAEE,OAAOF,KAAK6O,eAEd,SAAahN,GACX7B,KAAK6O,UAAY7O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,IACxE7B,KAAKqa,eAAiBra,KAAKsa,uBAAuBta,KAAK6O,4CAKzDrP,OAAAmC,eACIyY,EAAAla,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK8O,cAEd,SAAYjN,GACV7B,KAAK8O,SAAW9O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAKzErC,OAAAmC,eACIyY,EAAAla,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK+O,cAEd,SAAYlN,GACV7B,KAAK+O,SAAW/O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAkDzEuY,EAAAla,UAAAuP,mBAAA,WACEzP,KAAK4O,SAIPwL,EAAAla,UAAAqa,eAAA,SAAe1U,OACP0G,EAAcvM,KAAKsN,aAAanG,kBACpCnH,KAAKsN,aAAahG,WAAWtH,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAAapJ,EAAO,IAE5EmS,EAAehY,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAC9CuL,EAAcxa,KAAKsN,aAAatK,QAAQhD,KAAKiP,YAC7CiJ,EAAgBlY,KAAKsN,aAAarK,SAASjD,KAAKiP,YAChDkJ,EAAkBnY,KAAKsN,aAAapK,WAAWlD,KAAKiP,YACpD5L,EAAOrD,KAAKsN,aAAahG,WAC7B0Q,EACAnS,EACAkC,KAAKzE,IAAIkX,EAAajO,GACtB2L,EACAC,GAEFnY,KAAK6N,eAAesE,KAAK9O,IAI3B+W,EAAAla,UAAA0O,MAAA,WAAA,IAAAhK,EAAA5E,KACEA,KAAKqa,eAAiBra,KAAKsa,uBAAuBta,KAAKmZ,UACvDnZ,KAAKya,YAAcza,KAAKsa,uBAAuBta,KAAKsN,aAAa3F,SACjE3H,KAAK0a,WAAa1a,KAAKsN,aAAavG,YAAY/G,KAAKiP,gBAE/C0L,EAAa3a,KAAKsN,aAAa7H,cAAc,SAEnDzF,KAAK4a,QAAU,CAAC,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,KAAKnD,IAAG,SAACoD,GAC9D,OAAAA,EAAIpD,IAAG,SAAC5R,GAAS,OAAAjB,EAAKkW,oBAAoBjV,EAAO8U,EAAW9U,QAG9D7F,KAAKoN,mBAAmB0D,gBAOlBsJ,EAAAla,UAAAoa,uBAAR,SAA+BjX,GAC7B,OAAOA,GAAQrD,KAAKsN,aAAa7K,QAAQY,KAAUrD,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAC9EjP,KAAKsN,aAAaxK,SAASO,GAC3B,MAIE+W,EAAAla,UAAA4a,oBAAR,SAA4BjV,EAAekV,OACnCvF,EAAYxV,KAAKsN,aAAa9G,OAClCxG,KAAKsN,aAAahG,WAAWtH,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAAapJ,EAAO,GAChF7F,KAAKuN,aAAapD,QAAQK,oBAE5B,OAAO,IAAIsP,GACTjU,EACAkV,EAAUzB,oBACV9D,EACAxV,KAAKgb,mBAAmBnV,KAKpBuU,EAAAla,UAAA8a,mBAAR,SAA2BnV,OACnBoV,EAAajb,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAElD,GACEpJ,IAAU0L,WACA,OAAV1L,GACA7F,KAAKkb,4BAA4BD,EAAYpV,IAC7C7F,KAAKmb,6BAA6BF,EAAYpV,GAE9C,OAAO,EAGT,IAAK7F,KAAKwQ,WACR,OAAO,EAMT,QACMlR,EAJeU,KAAKsN,aAAahG,WAAW2T,EAAYpV,EAAO,GAKnE7F,KAAKsN,aAAaxK,SAASxD,IAAMuG,EACjCvG,EAAIU,KAAKsN,aAAahF,gBAAgBhJ,EAAG,GAEzC,GAAIU,KAAKwQ,WAAWlR,EAAG,OACrB,OAAO,EAIX,OAAO,GAOD8a,EAAAla,UAAAgb,4BAAR,SAAoCjU,EAAcpB,GAChD,GAAI7F,KAAK2O,QAAS,KACVyM,EAAUpb,KAAKsN,aAAa7K,QAAQzC,KAAK2O,SACzC0M,EAAWrb,KAAKsN,aAAaxK,SAAS9C,KAAK2O,SAEjD,OAAO1H,EAAOmU,GAAYnU,IAASmU,GAAWvV,EAAQwV,EAGxD,OAAO,GAODjB,EAAAla,UAAAib,6BAAR,SAAqClU,EAAcpB,GACjD,GAAI7F,KAAK0O,QAAS,KACV4M,EAAUtb,KAAKsN,aAAa7K,QAAQzC,KAAK0O,SACzC6M,EAAWvb,KAAKsN,aAAaxK,SAAS9C,KAAK0O,SAEjD,OAAOzH,EAAOqU,GAAYrU,IAASqU,GAAWzV,EAAQ0V,IAK1DnB,EAAAla,UAAAmY,2BAAA,SAA2BnK,OAKnBK,EAAgBvO,KAAKsO,YAErBgK,EAAQtY,KAAKuY,SACnB,OAAQrK,EAAMsK,SACZ,KAAKC,EAAAA,WACHzY,KAAKiP,WAAajP,KAAKsN,aAAanF,kBAAkBnI,KAAKsO,YAAagK,EAAQ,GAAK,GACrF,MACF,KAAKI,EAAAA,YACH1Y,KAAKiP,WAAajP,KAAKsN,aAAanF,kBAAkBnI,KAAKsO,YAAagK,GAAS,EAAI,GACrF,MACF,KAAKK,EAAAA,SACH3Y,KAAKiP,WAAajP,KAAKsN,aAAanF,kBAAkBnI,KAAKsO,aAAc,GACzE,MACF,KAAKsK,EAAAA,WACH5Y,KAAKiP,WAAajP,KAAKsN,aAAanF,kBAAkBnI,KAAKsO,YAAa,GACxE,MACF,KAAKuK,EAAAA,KACH7Y,KAAKiP,WAAajP,KAAKsN,aAAanF,kBAClCnI,KAAKsO,YACLtO,KAAKsN,aAAaxK,SAAS9C,KAAKsO,cAElC,MACF,KAAKwK,EAAAA,IACH9Y,KAAKiP,WAAajP,KAAKsN,aAAanF,kBAClCnI,KAAKsO,YACL,GAAKtO,KAAKsN,aAAaxK,SAAS9C,KAAKsO,cAEvC,MACF,KAAKyK,EAAAA,QACH/Y,KAAKiP,WAAajP,KAAKsN,aAAarF,iBAClCjI,KAAKsO,YACLJ,EAAM8K,QAAU,IAAM,GAExB,MACF,KAAKC,EAAAA,UACHjZ,KAAKiP,WAAajP,KAAKsN,aAAarF,iBAClCjI,KAAKsO,YACLJ,EAAM8K,OAAS,GAAK,GAEtB,MACF,KAAKE,EAAAA,MACHlZ,KAAKua,eAAeva,KAAKsN,aAAaxK,SAAS9C,KAAKsO,cACpD,MACF,QAEE,OAGAtO,KAAKsN,aAAalL,YAAYmM,EAAevO,KAAKiP,aACpDjP,KAAKuX,iBAAiBpF,KAAKnS,KAAKiP,YAGlCjP,KAAKoS,mBAELlE,EAAM4B,kBAGRsK,EAAAla,UAAAkS,iBAAA,WACEpS,KAAK0Z,iBAAiBtH,oBAOhBgI,EAAAla,UAAAuO,oBAAR,SAA4BxF,GAC1B,OAAOjJ,KAAKsN,aAAaxL,eAAemH,IAAQjJ,KAAKsN,aAAavL,QAAQkH,GAAOA,EAAM,MAIjFmR,EAAAla,UAAAqY,OAAR,WACE,OAAOvY,KAAKqX,MAA4B,QAApBrX,KAAKqX,KAAKxV,2BAnTjCwQ,EAAAA,UAAStI,KAAA,CAAC,CACTuI,SAAU,gBACVC,SAAA,giBACAC,SAAU,cACVyH,WAAY,CAACzG,GACbf,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCI,qBAAqB,+CA5BrBC,EAAAA,qDAkHGvJ,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMC,KAAA,CAACvG,YAtGHhC,EAAW6R,WAAA,CAAA,CAAAxJ,KAwGfD,EAAAA,kBA3GIsQ,EAAAA,eAAc7G,WAAA,CAAA,CAAAxJ,KA4GlBD,EAAAA,kDAtFF0J,EAAAA,wBAoBAA,EAAAA,uBAWAA,EAAAA,uBAUAA,EAAAA,0BAUAA,EAAAA,4BAGAA,EAAAA,8BAGAC,EAAAA,iCAGAA,EAAAA,iCAGA4G,EAAAA,UAASpQ,KAAA,CAAC0L,OA2Ob2E,EArTA,GCPAoB,GAAA,WA2EE,SAAAA,EACUpO,EACAqO,EACWnO,EAGXC,GAER,GAPQvN,KAAAoN,mBAAAA,EACApN,KAAAyb,QAAAA,EACWzb,KAAAsN,aAAAA,EAGXtN,KAAAuN,aAAAA,EAjBSvN,KAAA6N,eAAiB,IAAID,EAAAA,aAGxC5N,KAAA0b,OAAqD,IAgB9C1b,KAAKsN,aACR,MAAML,EAA2B,eAEnC,IAAKjN,KAAKuN,aACR,MAAMN,EAA2B,oBA8JvC,OA3OEzN,OAAAmC,eACI6Z,EAAAtb,UAAA,aAAU,KADd,WAEE,OAAOF,KAAKsO,iBAEd,SAAezM,OACT0M,EAAgBvO,KAAKsO,YACnBE,EACJxO,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,KAAW7B,KAAKsN,aAAa3F,QACtF3H,KAAKsO,YAActO,KAAKsN,aAAalK,UAAUoL,EAAWxO,KAAK0O,QAAS1O,KAAK2O,SAG3EJ,GACAvO,KAAKsN,aAAa7K,QAAQ8L,IAAkBvO,KAAKsN,aAAa7K,QAAQzC,KAAKsO,cAE3EtO,KAAK4O,yCAMTpP,OAAAmC,eACI6Z,EAAAtb,UAAA,WAAQ,KADZ,WAEE,OAAOF,KAAK6O,eAEd,SAAahN,GACX7B,KAAK6O,UAAY7O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,IACxE7B,KAAK2b,cAAgB3b,KAAK6O,WAAa7O,KAAKsN,aAAa7K,QAAQzC,KAAK6O,4CAKxErP,OAAAmC,eACI6Z,EAAAtb,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK8O,cAEd,SAAYjN,GACV7B,KAAK8O,SAAW9O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAKzErC,OAAAmC,eACI6Z,EAAAtb,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK+O,cAEd,SAAYlN,GACV7B,KAAK+O,SAAW/O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAmCzE2Z,EAAAtb,UAAAuP,mBAAA,WAAA,IAAA7K,EAAA5E,KACQ4b,EAAe,CAAEC,SAAU,GACjC7b,KAAK8b,iBAAmBC,EAAAA,UAAU/b,KAAKyb,QAAQzK,cAAe,UAC3D4F,KAAKoF,EAAAA,WAAW,KAAMC,EAAAA,SAAQ,SAAEC,GAAY,OAAAC,EAAAA,GAAMvX,EAAKwX,uBACvDtF,UAAS,SAAEuF,GAAa,OAAAzX,EAAK0X,cAAcD,EAAKT,KAEnD5b,KAAK4O,SAGP4M,EAAAtb,UAAAqc,YAAA,WACEvc,KAAK8b,iBAAiBU,eAGxBhB,EAAAtb,UAAAuc,IAAA,SAAI5a,GACF,OAAOkG,KAAK0U,IAAI5a,IAIlB2Z,EAAAtb,UAAA0O,MAAA,WAAA,IAAAhK,EAAA5E,KACEA,KAAK2b,cAAgB3b,KAAKsN,aAAa7K,QAAQzC,KAAKmZ,SAAWnZ,KAAKmZ,SAAWnZ,KAAKiP,gBAE9E5L,EAAOrD,KAAKsN,aAAahG,WAC7BtH,KAAK2b,cACL3b,KAAKsN,aAAaxK,SAAS9C,KAAKiP,YAChCjP,KAAKsN,aAAatK,QAAQhD,KAAKiP,YAC/BjP,KAAKsN,aAAarK,SAASjD,KAAKiP,YAChCjP,KAAKsN,aAAapK,WAAWlD,KAAKiP,aAEpCjP,KAAK0b,OAAS,CACZ,CACE7Z,MAAO7B,KAAK2b,cACZpL,SAAUvQ,KAAKwQ,YAAcxQ,KAAKwQ,WAAWnN,EAAM,YAIvDrD,KAAK0c,iBAELC,WAAU,WACR/X,EAAK6W,QAAQzK,cAAc4L,WACzBhY,EAAK6W,QAAQzK,cAAcK,aAAe,EAAIwL,MAC/C,KAGLrB,EAAAtb,UAAAwc,eAAA,SAAeI,GAAf,IAAAlY,EAAA5E,KACE,QADa,IAAA8c,IAAAA,GAAA,IAETA,GAAS9c,KAAK0b,OAAO,GAAGnL,YACzBuM,GAAS9c,KAAK0b,OAAO1b,KAAK0b,OAAO/a,OAAS,GAAG4P,SAFhD,CAaA,QANM0H,EAAgBjY,KAAKsN,aAAaxK,SAAS9C,KAAKiP,YAChDuL,EAAcxa,KAAKsN,aAAatK,QAAQhD,KAAKiP,YAC7CiJ,EAAgBlY,KAAKsN,aAAarK,SAASjD,KAAKiP,YAChDkJ,EAAkBnY,KAAKsN,aAAapK,WAAWlD,KAAKiP,YAEtD8N,EAAS,EACJlL,EAAI,EAAGA,GAAK,GAAIA,IAAK,KACxB5K,EAAOjH,KAAK0b,OAAO1b,KAAK0b,OAAO/a,OAAS,GAAGkB,MAC3CwB,EAAOrD,KAAKsN,aAAahG,WAC3BL,EAAO,EACPgR,EACAuC,EACAtC,EACAC,GAEFnY,KAAK0b,OAAOrL,KAAK,CACfxO,MAAOoF,EAAO,EACdsJ,SAAUvQ,KAAKwQ,YAAcxQ,KAAKwQ,WAAWnN,EAAM,YAGrD4D,EAAOjH,KAAK0b,OAAO,GAAG7Z,MACtBwB,EAAOrD,KAAKsN,aAAahG,WACvBL,EAAO,EACPgR,EACAuC,EACAtC,EACAC,GAEFnY,KAAK0b,OAAOsB,QAAQ,CAClBnb,MAAOoF,EAAO,EACdsJ,SAAUvQ,KAAKwQ,YAAcxQ,KAAKwQ,WAAWnN,EAAM,YAGrD0Z,GArLmB,GAwLrBJ,WAAU,WACR/X,EAAK6W,QAAQzK,cAAc4L,WAAaE,EAzLrB,GAyL+CC,GACjE,IAEH/c,KAAKoN,mBAAmB0D,iBAG1B0K,EAAAtb,UAAA+c,cAAA,SAAchW,OACNgR,EAAgBjY,KAAKsN,aAAaxK,SAAS9C,KAAKiP,YAChDuL,EAAcxa,KAAKsN,aAAatK,QAAQhD,KAAKiP,YAC7CiJ,EAAgBlY,KAAKsN,aAAarK,SAASjD,KAAKiP,YAChDkJ,EAAkBnY,KAAKsN,aAAapK,WAAWlD,KAAKiP,YAC1DjP,KAAK6N,eAAesE,KAClBnS,KAAKsN,aAAahG,WAAWL,EAAMgR,EAAeuC,EAAatC,EAAeC,KAIlFqD,EAAAtb,UAAAkc,iBAAA,eACQc,EAAKld,KAAKyb,QAAQzK,cACxB,MAAO,CACLzB,OAAQ2N,EAAG7L,aACXwK,SAAUqB,EAAGN,UACbO,MAAOD,EAAGE,eAId5B,EAAAtb,UAAAoc,cAAA,SAAce,EAAUzB,GACI,IAAtByB,EAASxB,UAAkBD,EAAaC,SAAW,EACrD7b,KAAK0c,gBAAe,GACXW,EAAS9N,OAAS8N,EAASxB,WAAawB,EAASF,OAC1Dnd,KAAK0c,gBAAe,GAEtBd,EAAaC,SAAWwB,EAASxB,UAInCL,EAAAtb,UAAAmY,2BAAA,SAA2BnK,GAEzB,OAAQA,EAAMsK,SACZ,KAAKG,EAAAA,SACH3Y,KAAKiP,WAAajP,KAAKsN,aAAarF,iBAAiBjI,KAAKsO,aAAc,GACxE,MACF,KAAKsK,EAAAA,WACH5Y,KAAKiP,WAAajP,KAAKsN,aAAarF,iBAAiBjI,KAAKsO,YAAa,GACvE,MACF,KAAK4K,EAAAA,MACHlZ,KAAKid,cAAcjd,KAAKsN,aAAa7K,QAAQzC,KAAKsO,cAClD,MACF,QAEE,OAGJtO,KAAKoS,mBAELlE,EAAM4B,kBAGR0L,EAAAtb,UAAAkS,iBAAA,aAMQoJ,EAAAtb,UAAAuO,oBAAR,SAA4BxF,GAC1B,OAAOjJ,KAAKsN,aAAaxL,eAAemH,IAAQjJ,KAAKsN,aAAavL,QAAQkH,GAAOA,EAAM,0BAnP1FoJ,EAAAA,UAAStI,KAAA,CAAC,CACTuI,SAAU,iBACVC,SAAA,+dACAC,SAAU,eACVC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCI,qBAAqB,+CA9BrBC,EAAAA,yBAEAC,EAAAA,kBAaO5R,EAAW6R,WAAA,CAAA,CAAAxJ,KAuFfD,EAAAA,8CACAA,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMC,KAAA,CAACvG,4CAtET8P,EAAAA,wBAoBAA,EAAAA,uBAWAA,EAAAA,uBAUAA,EAAAA,0BAUAA,EAAAA,8BAGAC,EAAAA,UAqLHiI,EArPA,GCgBA8B,GAAA,WAoNE,SAAAA,EACSC,EACajQ,EAGZC,EACRiQ,GANF,IAAA5Y,EAAA5E,KAQE,GAPOA,KAAAud,MAAAA,EACavd,KAAAsN,aAAAA,EAGZtN,KAAAuN,aAAAA,EArMFvN,KAAAyd,sBAAuB,EAc/Bzd,KAAA6J,KAAwB,OAIxB7J,KAAA0d,UAA6B,QA0C7B1d,KAAAwN,UAAY,EAIZxN,KAAAyN,YAAa,EAIbzN,KAAA6N,eAAiB,IAAID,EAAAA,aAIrB5N,KAAAsX,eAAiB,IAAI1J,EAAAA,aAmBrB5N,KAAA2d,oBAAmB,SAAIta,EAASd,GAC9B,YAD8B,IAAAA,IAAAA,EAAA,YAE1Bc,KACAuB,EAAK4L,YAAc5L,EAAK4L,WAAWnN,OACnCuB,EAAK8J,SAAW9J,EAAK0I,aAAalL,YAAYiB,EAAMuB,EAAK8J,QAASnM,IAAS,MAC3EqC,EAAK+J,SAAW/J,EAAK0I,aAAalL,YAAYiB,EAAMuB,EAAK+J,QAASpM,IAAS,IA4DjFvC,KAAA4d,aAAe,IAAIlc,EAAAA,QAYnB1B,KAAA6d,WAAqB,GAgCd7d,KAAKsN,aACR,MAAML,EAA2B,eAGnC,IAAKjN,KAAKuN,aACR,MAAMN,EAA2B,oBAGnCjN,KAAK8d,aAAeP,EAAMjJ,QAAQwC,UAAS,WACzC0G,EAAkB1M,eAClBlM,EAAKgZ,aAAazb,SAyMxB,OAxZE3C,OAAAmC,eACI2b,EAAApd,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK+d,cAEd,SAAYlc,GACV7B,KAAK+d,SAAW/d,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAgBzErC,OAAAmC,eACI2b,EAAApd,UAAA,WAAQ,KADZ,WAEE,OAAOF,KAAK6O,eAEd,SAAahN,GACX7B,KAAK6O,UAAY7O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,IACxE7B,KAAKiP,WAAajP,KAAK6O,2CAKzBrP,OAAAmC,eACI2b,EAAApd,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK8O,cAEd,SAAYjN,GACV7B,KAAK8O,SAAW9O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAKzErC,OAAAmC,eACI2b,EAAApd,UAAA,UAAO,KADX,WAEE,OAAOF,KAAK+O,cAEd,SAAYlN,GACV7B,KAAK+O,SAAW/O,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAsDzErC,OAAAmC,eAAI2b,EAAApd,UAAA,aAAU,KAAd,WACE,OAAOF,KAAKge,wBAEd,SAAenc,OACP0M,EAAgBvO,KAAKge,mBAC3Bhe,KAAKge,mBAAqBhe,KAAKsN,aAAalK,UAAUvB,EAAO7B,KAAK0O,QAAS1O,KAAK2O,SAChF3O,KAAKie,MAAQje,KAAKsN,aAAarK,SAASjD,KAAKge,oBAAsB,OAE7Dzb,EAAqB,SAAdvC,KAAKke,KAAkB,OAAS,QACvCC,EAAOne,KAAKsN,aAAalL,YAAYmM,EAAevO,KAAKge,mBAAoBzb,GAC/E4b,IACFne,KAAKoe,cAAgBD,EAAO,EAAI,OAAS,aAIrC/X,EAAMpG,KAAKsN,aAAa/H,aAAavF,KAAKiP,YAC5C1H,EAAQvH,KAAKsN,aAAarK,SAASjD,KAAKiP,YACxCjP,KAAKyN,aACPlG,EAAkB,IAAVA,EAAc,GAAKA,EAAQ,GAAKA,EAAQ,GAAKA,OAEjDC,EAAUxH,KAAKsN,aAAapK,WAAWlD,KAAKiP,YAElD,OAAQjP,KAAKke,MACX,IAAK,OACHle,KAAKqe,kBAAoBre,KAAKsN,aAAavG,YAAY/G,KAAKiP,YAC5D,MACF,QACEjP,KAAKqe,kBAAoBre,KAAKsN,aAAa9G,OAAOxG,KAAKiP,WAAYjP,KAAKuN,aAAapD,QAAQI,gBAEjGvK,KAAKse,gBAAkBte,KAAKsN,aAAa7K,QAAQzC,KAAKiP,YAAYvM,WAClE1C,KAAKue,oBAAsBve,KAAKsN,aAAa9G,OAAOxG,KAAKiP,WAAYjP,KAAKuN,aAAapD,QAAQE,eAC/FrK,KAAKwe,eAAiBxe,KAAKsN,aAAa1G,kBAAkB,QAAQR,GAClEpG,KAAKye,gBAAkBlX,EAAM7E,WAC7B1C,KAAK0e,mBAAqB,KAAOlX,GAASzE,OAAO,GAEjD/C,KAAK4d,aAAazb,wCAKpB3C,OAAAmC,eAAI2b,EAAApd,UAAA,cAAW,KAAf,WACE,OAAOF,KAAK2e,kBAEd,SAAgB9c,GACd7B,KAAK2e,aAAe9c,EACpB7B,KAAKyd,sBAAuB,mCAiE9BH,EAAApd,UAAAuP,mBAAA,WACEzP,KAAKiP,WAAajP,KAAK4e,SAAW5e,KAAKsN,aAAa3F,QAEpD3H,KAAK8N,WAAW9N,KAAK0d,WAAW,IAGlCJ,EAAApd,UAAA2e,mBAAA,WACM7e,KAAKyd,uBACPzd,KAAKyd,sBAAuB,EAC5Bzd,KAAK8e,oBAITxB,EAAApd,UAAAqc,YAAA,WACEvc,KAAK8d,aAAatB,cAClBxc,KAAK4d,aAAamB,YAGpBzB,EAAApd,UAAA8e,YAAA,SAAY1K,GACVtU,KAAKif,SAAWjf,KAAK6J,KAAKlH,QAAQ,SAAW,MACvCuc,EAAS5K,EAAQ6E,UAAY7E,EAAQ5F,SAAW4F,EAAQ3F,SAAW2F,EAAQ9D,WAEjF,GAAI0O,IAAWA,EAAOC,YAAa,KAC3BjB,EAAOle,KAAKof,2BACdlB,GACFA,EAAKtP,QAIT5O,KAAK4d,aAAazb,QAGpBmb,EAAApd,UAAA4N,WAAA,SAAWoQ,EAAMlH,GACf,YADe,IAAAA,IAAAA,GAAA,GACPkH,GACN,IAAK,OACHle,KAAKqe,kBAAoBre,KAAKsN,aAAavG,YAAY/G,KAAKiP,YAC5DjP,KAAKqf,mBAAqBrf,KAAKud,MAAMpI,uBACrCnV,KAAKsf,iBAAmBtf,KAAKud,MAAM3I,cACnC5U,KAAKuf,iBAAmBvf,KAAKud,MAAM5I,cACnC,MACF,IAAK,QACH3U,KAAKqe,kBAAoBre,KAAKsN,aAAa9G,OAAOxG,KAAKiP,WAAYjP,KAAKuN,aAAapD,QAAQI,gBAC7FvK,KAAKqf,mBAAqBrf,KAAKud,MAAMrI,sBACrClV,KAAKsf,iBAAmBtf,KAAKud,MAAM7I,eACnC1U,KAAKuf,iBAAmBvf,KAAKud,MAAM9I,eAGvCzU,KAAKke,KAAOA,EACRlH,IACFhX,KAAKyd,sBAAuB,IAIhCH,EAAApd,UAAA4e,gBAAA,WACE9e,KAAKof,2BAA2BhN,oBAGlCkL,EAAApd,UAAAsf,eAAA,WACExf,KAAK6N,eAAesE,KAAKnS,KAAKiP,YAC9BjP,KAAKsX,eAAenF,QAGtBmL,EAAApd,UAAAuf,eAAA,WACEzf,KAAKsX,eAAenF,QAItBmL,EAAApd,UAAAwf,aAAA,SAAarc,GACXrD,KAAKmZ,SAAW9V,GAGlBia,EAAApd,UAAAyf,cAAA,SAActc,GAKZrD,KAAKmZ,SAAW9V,GAIlBia,EAAApd,UAAA6X,cAAA,SAAc1U,GACZrD,KAAKmZ,SAAW9V,EACZrD,KAAKif,UACPjf,KAAK8N,WAAW,UAKpBwP,EAAApd,UAAAqa,eAAA,SAAe1U,GACb7F,KAAKmZ,SAAWtT,EAChB7F,KAAK8N,WAAW,UAGlBwP,EAAApd,UAAA+c,cAAA,SAAchW,GACZjH,KAAKmZ,SAAWlS,EAChBjH,KAAK8N,WAAW,SAIlBwP,EAAApd,UAAA0f,sBAAA,WACE5f,KAAK8N,WAAyB,UAAd9N,KAAKke,KAAmB,OAAS,UAInDZ,EAAApd,UAAA2f,iBAAA,WACE7f,KAAK8f,cAAc,IAIrBxC,EAAApd,UAAA6f,aAAA,WACE/f,KAAK8f,aAAa,IAIpBxC,EAAApd,UAAA8f,cAAA,WACMhgB,KAAKif,WACPjf,KAAK6d,WAAY,EACjB7d,KAAK8N,WAAW,WAIpBwP,EAAApd,UAAA+f,gBAAA,WACEjgB,KAAK6d,WAAY,EACjB7d,KAAK8N,WAAW,UAGlBwP,EAAApd,UAAAggB,YAAA,SAAYC,GACVngB,KAAKie,OAASje,KAAKie,UACb5a,EAAOrD,KAAKsN,aAAa9E,iBAAiBxI,KAAKiP,WAAYjP,KAAKie,OAAS,GAAK,IAChFje,KAAK2d,oBAAoBta,EAAM,YACjCrD,KAAKmZ,SAAW9V,IAYpBia,EAAApd,UAAAkgB,iBAAA,WACE,OAAKpgB,KAAK0O,WAGF1O,KAAK0O,UAAY1O,KAAKqgB,YAAYrgB,KAAKiP,WAAYjP,KAAK0O,WAIlE4O,EAAApd,UAAAogB,aAAA,WACE,OAAQtgB,KAAK2O,UAAY3O,KAAKqgB,YAAYrgB,KAAKiP,WAAYjP,KAAK2O,UAIlE2O,EAAApd,UAAA4f,aAAA,SAAa3B,GACX,OAAQne,KAAKke,MACX,IAAK,OACHle,KAAKiP,WAAajP,KAAKsN,aAAarF,iBAAiBjI,KAAKiP,WAAYkP,GACtE,MACF,IAAK,QACHne,KAAKiP,WAAajP,KAAKsN,aAAanF,kBAAkBnI,KAAKiP,WAAYkP,GACvE,MACF,IAAK,QACHne,KAAKiP,WAAajP,KAAK6d,UACnB7d,KAAKsN,aAAa9E,iBAAiBxI,KAAKiP,WAAYkP,GACpDne,KAAKsN,aAAa7E,mBAAmBzI,KAAKiP,WAAYkP,KAMxDb,EAAApd,UAAAmgB,YAAR,SAAoBE,EAAUC,GAC5B,OAAQxgB,KAAKke,MACX,IAAK,OACH,OAAOle,KAAKsN,aAAa7K,QAAQ8d,KAAWvgB,KAAKsN,aAAa7K,QAAQ+d,GACxE,IAAK,YACGC,EAAYzgB,KAAKuN,aAAapD,QAAQI,eAC5C,OAAOvK,KAAKsN,aAAa9G,OAAO+Z,EAAOE,KAAezgB,KAAKsN,aAAa9G,OAAOga,EAAOC,GACxF,IAAK,YACGC,EAAa1gB,KAAKuN,aAAapD,QAAQM,UAC7C,OAAOzK,KAAKsN,aAAa9G,OAAO+Z,EAAOG,KAAgB1gB,KAAKsN,aAAa9G,OAAOga,EAAOE,KAQrFpD,EAAApd,UAAAuO,oBAAR,SAA4BxF,GAC1B,OAAOjJ,KAAKsN,aAAaxL,eAAemH,IAAQjJ,KAAKsN,aAAavL,QAAQkH,GAAOA,EAAM,MAIjFqU,EAAApd,UAAAkf,yBAAR,WACE,OAAOpf,KAAK2gB,WAAa3gB,KAAK4gB,WAAa5gB,KAAK6gB,UAAY7gB,KAAK8gB,+BA7apEzO,EAAAA,UAAStI,KAAA,CAAC,CACTuI,SAAU,eACVC,SAAA,88MAEAQ,KAAM,CACJkE,QAAO,gBAETgD,WAAY,CAACnG,EAAeN,GAC5Bf,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCI,qBAAqB,+CA/BdmB,UAHA7S,EAAW6R,WAAA,CAAA,CAAAxJ,KA8OfD,EAAAA,8CACAA,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMC,KAAA,CAACvG,YAhQV2P,EAAAA,sDA+DCG,EAAAA,oBAUAA,EAAAA,yBAIAA,EAAAA,wBAOAA,EAAAA,uBAWAA,EAAAA,uBAUAA,EAAAA,0BAUAA,EAAAA,yBAIAA,EAAAA,0BAIAA,EAAAA,8BAIAC,EAAAA,+BAIAA,EAAAA,0BAIA4G,EAAAA,UAASpQ,KAAA,CAACoD,sBAIVgN,EAAAA,UAASpQ,KAAA,CAACqN,sBAIV+C,EAAAA,UAASpQ,KAAA,CAACqQ,uBAIVD,EAAAA,UAASpQ,KAAA,CAACyR,OAoUb8B,EA/aA,GCJIyD,GAAgB,EAGPC,GAAiC,IAAIjgB,EAAAA,eAChD,kCAIF,SAAgBkgB,GAAuCC,GACrD,OAAA,WAAa,OAAAA,EAAQC,iBAAiBC,cAIxC,IAAaC,GAAkD,CAC7D/f,QAAS0f,GACTlU,KAAM,CAACwU,EAAAA,SACPC,WAAYN,IAUdO,GAAA,WAAA,SAAAA,KAyCA,OAfEA,EAAAthB,UAAAuhB,gBAAA,WACEzhB,KAAK0hB,UAAU5C,mBAOjB0C,EAAAthB,UAAAyhB,eAAA,SAAezT,GACTA,EAAMsK,UAAYoJ,EAAAA,SACpB5hB,KAAK6hB,WAAWC,QAChB5T,EAAM4B,iBACN5B,EAAM6T,wCAtCX1P,EAAAA,UAAStI,KAAA,CAAC,CACTuI,SAAU,yBACVC,SAAA,2mBAEAQ,KAAM,CACJkE,QAAO,yBACP+K,oBAAqB,UACrBC,uCAAwC,qBACxCC,YAAa,0BAEfjI,WAAY,CAAClG,EAAgBK,GAC7B5B,SAAU,uBACVC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCI,qBAAqB,yCAIpBiH,EAAAA,UAASpQ,KAAA,CAACuT,OAuBbkE,EAzCA,GA+CAW,GAAA,WAwJE,SAAAA,EACUC,EACAC,EACA1M,EACA2M,EACwCC,EAC7BjV,EACC+J,EAGZmL,GAER,GAXQxiB,KAAAoiB,QAAAA,EACApiB,KAAAqiB,SAAAA,EACAriB,KAAA2V,QAAAA,EACA3V,KAAAsiB,kBAAAA,EACwCtiB,KAAAuiB,gBAAAA,EAC7BviB,KAAAsN,aAAAA,EACCtN,KAAAqX,KAAAA,EAGZrX,KAAAwiB,UAAAA,EA5IDxiB,KAAA6J,KAAwB,OAGxB7J,KAAA0d,UAA6B,QAG7B1d,KAAAwN,UAAY,EAGZxN,KAAAyN,YAAa,EAadzN,KAAAyiB,UAAW,EAgCDziB,KAAA0iB,aAAmC,IAAI9U,EAAAA,aAGvC5N,KAAA2iB,aAAmC,IAAI/U,EAAAA,aAUjD5N,KAAA4iB,SAAU,EAGlB5iB,KAAA6iB,GAAK,kBAAkB9B,KAiBf/gB,KAAA8iB,eAA2B,KA6B3B9iB,KAAA+iB,0BAAgD,KAGhD/iB,KAAAgjB,mBAAqBC,EAAAA,aAAaC,MAMjCljB,KAAAmjB,gBAAkB,IAAIzhB,EAAAA,QAGtB1B,KAAAojB,iBAAmB,IAAI1hB,EAAAA,SAczB1B,KAAKsN,aACR,MAAML,EAA2B,eAuPvC,OAlZEzN,OAAAmC,eACIwgB,EAAAjiB,UAAA,UAAO,KADX,WAIE,OAAOF,KAAK+d,WAAa/d,KAAKqjB,iBAAmBrjB,KAAKqjB,iBAAiBxhB,MAAQ,WAEjF,SAAYA,GACV7B,KAAK+d,SAAW/d,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,qCAoBzErC,OAAAmC,eACIwgB,EAAAjiB,UAAA,UAAO,KADX,WAEE,OAAOF,KAAKyiB,cAEd,SAAY5gB,GACV7B,KAAKyiB,SAAWa,EAAAA,sBAAsBzhB,oCAKxCrC,OAAAmC,eACIwgB,EAAAjiB,UAAA,WAAQ,KADZ,WAEE,OAAOF,KAAKujB,YAAchS,WAAavR,KAAKqjB,iBACxCrjB,KAAKqjB,iBAAiBG,WACpBxjB,KAAKujB,eAEb,SAAa1hB,OACL4hB,EAAWH,EAAAA,sBAAsBzhB,GAEnC4hB,IAAazjB,KAAKujB,YACpBvjB,KAAKujB,UAAYE,EACjBzjB,KAAKmjB,gBAAgBhhB,KAAKshB,qCAM9BjkB,OAAAmC,eACIwgB,EAAAjiB,UAAA,gBAAa,KADjB,SACkB2B,GACZA,IACF7B,KAAK0jB,YAAc7hB,oCAevBrC,OAAAmC,eACIwgB,EAAAjiB,UAAA,SAAM,KADV,WAEE,OAAOF,KAAK4iB,aAEd,SAAW/gB,GACTA,EAAQ7B,KAAK2jB,OAAS3jB,KAAK8hB,yCAQ7BtiB,OAAAmC,eAAIwgB,EAAAjiB,UAAA,YAAS,KAAb,WACE,OAAOF,KAAK8iB,oBAEd,SAAcjhB,OACN+hB,EAAQ5jB,KAAKsN,aAAalK,UAAUvB,EAAO7B,KAAK8O,SAAU9O,KAAK+O,UACrE,GAAI6U,EAAO,KAELpc,EAAUxH,KAAKsN,aAAapK,WAAW0gB,GAC3Cpc,EAAUO,KAAKsH,MAAM7H,EAAUxH,KAAKwN,WAAaxN,KAAKwN,UACtDxN,KAAKsN,aAAalI,WAAWwe,EAAOpc,GACpCxH,KAAKsN,aAAajI,WAAWue,EAAO,GAEtC5jB,KAAK8iB,eAAiBc,mCAKxBpkB,OAAAmC,eAAIwgB,EAAAjiB,UAAA,WAAQ,KAAZ,WACE,OAAOF,KAAKqjB,kBAAoBrjB,KAAKqjB,iBAAiB/f,qCAIxD9D,OAAAmC,eAAIwgB,EAAAjiB,UAAA,WAAQ,KAAZ,WACE,OAAOF,KAAKqjB,kBAAoBrjB,KAAKqjB,iBAAiB9f,qCAGxD/D,OAAAmC,eAAIwgB,EAAAjiB,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKqjB,kBAAoBrjB,KAAKqjB,iBAAiBQ,6CA+CxD1B,EAAAjiB,UAAA4jB,SAAA,WAAA,IAAAlf,EAAA5E,KAEE,OAAQA,KAAK6J,MACX,IAAK,OACH7J,KAAK0d,UAA+B,UAAnB1d,KAAK0d,UAAwB1d,KAAK0d,UAAY,QAC/D,MACF,IAAK,OACH1d,KAAK0d,UAAY,QACjB,MACF,QACE1d,KAAK0d,UAAY1d,KAAK0d,UAGtB1d,KAAK0jB,aACP1jB,KAAK0jB,YAAYN,iBAAiBtM,UAAS,SAAEzT,OACrCxB,EAAQ+C,EAAK0I,aAAahG,WAC9B1C,EAAK0I,aAAa7K,QAAQY,GAC1BuB,EAAK0I,aAAaxK,SAASO,GAC3BuB,EAAK0I,aAAatK,QAAQK,GAC1BuB,EAAKiK,UAAYjK,EAAK0I,aAAarK,SAAS2B,EAAKiK,WAAa,EAC9DjK,EAAKiK,UAAYjK,EAAK0I,aAAapK,WAAW0B,EAAKiK,WAAa,GAGlEjK,EAAKmf,QAAQliB,KAKjB7B,KAAKqjB,iBAAiBxhB,MAAQ7B,KAAK6O,WAGrCsT,EAAAjiB,UAAAqc,YAAA,WACEvc,KAAK8hB,QACL9hB,KAAKgjB,mBAAmBxG,cACxBxc,KAAKojB,iBAAiBrE,WACtB/e,KAAKmjB,gBAAgBpE,WAEjB/e,KAAKgkB,YACPhkB,KAAKgkB,UAAUC,UACfjkB,KAAKkkB,mBAAqB,OAK9B/B,EAAAjiB,UAAA6jB,QAAA,SAAQ1gB,OACA8gB,EAAWnkB,KAAK6O,UACtB7O,KAAK6O,UAAYxL,MACXd,EAAOvC,KAAK6J,KAAKlH,QAAQ,SAAW,EAAI,SAAW,MACpD3C,KAAKsN,aAAanK,SAASghB,EAAUnkB,KAAK6O,UAAWtM,IACxDvC,KAAKojB,iBAAiBjhB,KAAKkB,IAQ/B8e,EAAAjiB,UAAAkkB,eAAA,SAAeC,GAAf,IAAAzf,EAAA5E,KACE,GAAIA,KAAKqjB,iBACP,MAAM5b,MAAM,+DAEdzH,KAAKqjB,iBAAmBgB,EACxBrkB,KAAKgjB,mBAAqBhjB,KAAKqjB,iBAAiBiB,aAAaxN,UAAS,SACnEjV,GACC,OAAC+C,EAAKiK,UACJhN,GAAS+C,EAAK0I,aAAaxL,eAAeD,GAAS+C,EAAK0I,aAAajG,MAAMxF,GAAS,QAK5FsgB,EAAAjiB,UAAAyjB,KAAA,WACE,IAAI3jB,KAAK4iB,UAAW5iB,KAAKwjB,SAAzB,CAGA,IAAKxjB,KAAKqjB,iBACR,MAAM5b,MAAM,gEAEVzH,KAAKwiB,YACPxiB,KAAK+iB,0BAA4B/iB,KAAKwiB,UAAU+B,eAGlDvkB,KAAKwkB,QAAUxkB,KAAKykB,gBAAkBzkB,KAAK0kB,eAC3C1kB,KAAK4iB,SAAU,EACf5iB,KAAK0iB,aAAavQ,SAGpBgQ,EAAAjiB,UAAAykB,MAAA,SAAM9iB,GACJ7B,KAAKqjB,iBAAiBsB,MAAM9iB,IAI9BsgB,EAAAjiB,UAAA4hB,MAAA,WAAA,IAAAld,EAAA5E,KACE,GAAKA,KAAK4iB,QAAV,CAGI5iB,KAAKgkB,WAAahkB,KAAKgkB,UAAUY,eACnC5kB,KAAKgkB,UAAUa,SAEb7kB,KAAK8kB,aACP9kB,KAAK8kB,WAAWhD,QAChB9hB,KAAK8kB,WAAa,MAEhB9kB,KAAK+kB,iBAAmB/kB,KAAK+kB,gBAAgBC,YAC/ChlB,KAAK+kB,gBAAgBF,aAGjBI,EAAa,WAGbrgB,EAAKge,UACPhe,EAAKge,SAAU,EACfhe,EAAK+d,aAAaxQ,OAClBvN,EAAKme,0BAA4B,OAKnC/iB,KAAK+iB,2BAC2C,mBAAzC/iB,KAAK+iB,0BAA0B/L,OAOtChX,KAAK+iB,0BAA0B/L,QAC/B2F,WAAWsI,IAEXA,MAKI9C,EAAAjiB,UAAAukB,cAAR,WAAA,IAAA7f,EAAA5E,KACEA,KAAK8kB,WAAa9kB,KAAKoiB,QAAQuB,KAA8BnC,GAAsB,CACjF0D,UAAWllB,KAAKqX,KAAOrX,KAAKqX,KAAKxV,MAAQ,MACzCsjB,iBAAkBnlB,KAAKsiB,kBACvB8C,WAAY,0BAGdplB,KAAK8kB,WAAWO,cAAcvO,UAAS,WAAO,OAAAlS,EAAKkd,UACnD9hB,KAAK8kB,WAAWQ,kBAAkBzD,WAAa7hB,MAIzCmiB,EAAAjiB,UAAAwkB,aAAR,WAAA,IAAA9f,EAAA5E,KACOA,KAAK+kB,kBACR/kB,KAAK+kB,gBAAkB,IAAIQ,EAAAA,gBACzB/D,GACAxhB,KAAKsiB,oBAIJtiB,KAAKgkB,WACRhkB,KAAKwlB,eAGFxlB,KAAKgkB,UAAUY,gBAClB5kB,KAAKkkB,mBAAqBlkB,KAAKgkB,UAAUyB,OAAOzlB,KAAK+kB,iBACrD/kB,KAAKkkB,mBAAmBwB,SAAS7D,WAAa7hB,KAG9CA,KAAK2V,QAAQe,SACVC,eACAC,KAAKC,EAAAA,KAAK,IACVC,UAAS,WACRlS,EAAKof,UAAU2B,qBAMfxD,EAAAjiB,UAAAslB,aAAR,WAAA,IAAA5gB,EAAA5E,KACQ4lB,EAAgB,IAAIC,EAAAA,cAAc,CACtCC,iBAAkB9lB,KAAK+lB,+BACvBC,aAAa,EACbC,cAAe,mCACff,UAAWllB,KAAKqX,KAChB6O,eAAgBlmB,KAAKuiB,kBACrB6C,WAAY,yBAGdplB,KAAKgkB,UAAYhkB,KAAKqiB,SAASliB,OAAOylB,GAEtCO,EAAAA,MACEnmB,KAAKgkB,UAAUoC,gBACfpmB,KAAKgkB,UAAUqC,cACfrmB,KAAKgkB,UAAUsC,gBAAgB1P,KAC7B2P,EAAAA,OAAM,SAACrY,GAEL,OACEA,EAAMsK,UAAYoJ,EAAAA,QACjBhd,EAAKye,kBAAoBnV,EAAM8K,QAAU9K,EAAMsK,UAAYG,EAAAA,aAIlE7B,UAAS,WAAO,OAAAlS,EAAKkd,WAIjBK,EAAAjiB,UAAA6lB,6BAAR,WACE,OAAO/lB,KAAKqiB,SACThF,WACAmJ,oBAAoBxmB,KAAKqjB,iBAAiBoD,gCAC1CC,sBAAsB,2BACtBC,wBAAuB,GACvBC,mBAAmB,GACnBC,UAAS,GACTC,cAAc,CACb,CACEC,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,OAEZ,CACEH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,UAEZ,CACEH,QAAS,MACTC,QAAS,SACTC,SAAU,MACVC,SAAU,OAEZ,CACEH,QAAS,MACTC,QAAS,MACTC,SAAU,MACVC,SAAU,aASV/E,EAAAjiB,UAAAuO,oBAAR,SAA4BxF,GAC1B,OAAOjJ,KAAKsN,aAAaxL,eAAemH,IAAQjJ,KAAKsN,aAAavL,QAAQkH,GAAOA,EAAM,0BA1Z1FoJ,EAAAA,UAAStI,KAAA,CAAC,CACTuI,SAAU,iBACVC,SAAU,GACVC,SAAU,gBACVI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCO,qBAAqB,+CAzFdiU,EAAAA,iBA1BP7F,EAAAA,eAiBAnK,EAAAA,cAMAiQ,EAAAA,oDAmPGtd,EAAAA,OAAMC,KAAA,CAACiX,aA5OHxf,EAAW6R,WAAA,CAAA,CAAAxJ,KA6OfD,EAAAA,kBA/QIsQ,EAAAA,eAAc7G,WAAA,CAAA,CAAAxJ,KAgRlBD,EAAAA,8CACAA,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMC,KAAA,CAACsd,EAAAA,gDAvJT/T,EAAAA,oBAYAA,EAAAA,yBAGAA,EAAAA,yBAGAA,EAAAA,0BAGAA,EAAAA,uBAMAA,EAAAA,wBAUAA,EAAAA,6BAiBAA,EAAAA,0BASAA,EAAAA,4BAGAC,EAAAA,OAAMxJ,KAAA,CAAC,gCAGPwJ,EAAAA,OAAMxJ,KAAA,CAAC,0BAGPuJ,EAAAA,SA0UH6O,EA5ZA,GCjFamF,GAAqC,CAChDhmB,QAASimB,EAAAA,kBACThmB,YAAaimB,EAAAA,WAAU,WAAO,OAAAC,KAC9BC,OAAO,GAGIC,GAAiC,CAC5CrmB,QAASsmB,EAAAA,cACTrmB,YAAaimB,EAAAA,WAAU,WAAO,OAAAC,KAC9BC,OAAO,iBAoBT,OARE,SAESG,EAEAC,GAFA9nB,KAAA6nB,OAAAA,EAEA7nB,KAAA8nB,cAAAA,EAEP9nB,KAAK6B,MAAQ7B,KAAK6nB,OAAOhmB,UAK7B4lB,GAAA,WA+KE,SAAAA,EACU/R,EACWpI,EAGXC,EACYwa,GANtB,IAAAnjB,EAAA5E,KAQE,GAPQA,KAAA0V,YAAAA,EACW1V,KAAAsN,aAAAA,EAGXtN,KAAAuN,aAAAA,EACYvN,KAAA+nB,WAAAA,EArEH/nB,KAAAgoB,WAAa,IAAIpa,EAAAA,aAGjB5N,KAAAioB,UAAY,IAAIra,EAAAA,aAGnC5N,KAAAskB,aAAe,IAAI1W,EAAAA,aAGnB5N,KAAAmjB,gBAAkB,IAAIvV,EAAAA,aAEtB5N,KAAAkoB,WAAU,aAEFloB,KAAAmoB,aAAY,aAEZnoB,KAAAooB,mBAAkB,aAElBpoB,KAAAqoB,wBAA0BpF,EAAAA,aAAaC,MAEvCljB,KAAAsoB,oBAAsBrF,EAAAA,aAAaC,MAGnCljB,KAAAuoB,gBAAe,WACrB,OAAO3jB,EAAK4jB,gBACR,KACA,CAAEC,mBAAoB,CAAEC,KAAM9jB,EAAK8Q,YAAY1E,cAAcnP,SAI3D7B,KAAA2oB,cAAa,SAAiBC,OAC9BC,EAAejkB,EAAK6J,oBAAoB7J,EAAK0I,aAAa1L,YAAYgnB,EAAQ/mB,QACpF,OAAQ+C,EAAKtB,MAAQulB,GAAgBjkB,EAAK0I,aAAalL,YAAYwC,EAAKtB,IAAKulB,IAAiB,EAC1F,KACA,CAAEC,iBAAkB,CAAExlB,IAAKsB,EAAKtB,IAAKylB,OAAQF,KAI3C7oB,KAAAgpB,cAAa,SAAiBJ,OAC9BC,EAAejkB,EAAK6J,oBAAoB7J,EAAK0I,aAAa1L,YAAYgnB,EAAQ/mB,QACpF,OAAQ+C,EAAKrB,MAAQslB,GAAgBjkB,EAAK0I,aAAalL,YAAYwC,EAAKrB,IAAKslB,IAAiB,EAC1F,KACA,CAAEI,iBAAkB,CAAE1lB,IAAKqB,EAAKrB,IAAKwlB,OAAQF,KAI3C7oB,KAAAkpB,iBAAgB,SAAiBN,OACjCC,EAAejkB,EAAK6J,oBAAoB7J,EAAK0I,aAAa1L,YAAYgnB,EAAQ/mB,QACpF,OAAQ+C,EAAKif,aAAgBgF,IAAgBjkB,EAAKif,YAAYgF,GAE1D,CAAEM,qBAAqB,GADvB,MAKEnpB,KAAAopB,WAAiCC,EAAAA,WAAWC,QAAQ,CAC1DtpB,KAAKuoB,gBACLvoB,KAAK2oB,cACL3oB,KAAKgpB,cACLhpB,KAAKkpB,mBAIClpB,KAAAwoB,iBAAkB,GAUnBxoB,KAAKsN,aACR,MAAML,EAA2B,eAEnC,IAAKjN,KAAKuN,aACR,MAAMN,EAA2B,oBAmIvC,OAvSEzN,OAAAmC,eACI8lB,EAAAvnB,UAAA,gBAAa,KADjB,SACkB2B,GAChB7B,KAAKupB,mBAAmB1nB,oCAIlB4lB,EAAAvnB,UAAAqpB,mBAAR,SAA2B1nB,GACrBA,IACF7B,KAAK0jB,YAAc7hB,EACnB7B,KAAK0jB,YAAYU,eAAepkB,QAKpCR,OAAAmC,eACI8lB,EAAAvnB,UAAA,sBAAmB,KADvB,SACwBqmB,GACtBvmB,KAAK6jB,YAAc0C,EACnBvmB,KAAKooB,sDAKP5oB,OAAAmC,eACI8lB,EAAAvnB,UAAA,QAAK,KADT,WAEE,OAAOF,KAAKwpB,YAEd,SAAU3nB,GACRA,EAAQ7B,KAAKsN,aAAa1L,YAAYC,GACtC7B,KAAKwoB,iBAAmB3mB,GAAS7B,KAAKsN,aAAavL,QAAQF,GAC3DA,EAAQ7B,KAAKyO,oBAAoB5M,OAE3B4nB,EAAUzpB,KAAK6B,MACrB7B,KAAKwpB,OAAS3nB,EACd7B,KAAK0pB,aAAa7nB,GAEb7B,KAAKsN,aAAanK,SAASsmB,EAAS5nB,IACvC7B,KAAKskB,aAAanS,KAAKtQ,oCAO3BrC,OAAAmC,eACI8lB,EAAAvnB,UAAA,MAAG,KADP,WAEE,OAAOF,KAAK2pB,UAEd,SAAQ9nB,GACN7B,KAAK2pB,KAAO3pB,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,IACnE7B,KAAKooB,sDAKP5oB,OAAAmC,eACI8lB,EAAAvnB,UAAA,MAAG,KADP,WAEE,OAAOF,KAAK4pB,UAEd,SAAQ/nB,GACN7B,KAAK4pB,KAAO5pB,KAAKyO,oBAAoBzO,KAAKsN,aAAa1L,YAAYC,IACnE7B,KAAKooB,sDAKP5oB,OAAAmC,eACI8lB,EAAAvnB,UAAA,WAAQ,KADZ,WAEE,QAASF,KAAKujB,eAEhB,SAAa1hB,OACL4hB,EAAWH,EAAAA,sBAAsBzhB,GACjC4Z,EAAUzb,KAAK0V,YAAY1E,cAE7BhR,KAAKujB,YAAcE,IACrBzjB,KAAKujB,UAAYE,EACjBzjB,KAAKmjB,gBAAgBhR,KAAKsR,IAIxBA,GAAYhI,EAAQoO,MAItBpO,EAAQoO,wCAqFZpC,EAAAvnB,UAAAuP,mBAAA,WAAA,IAAA7K,EAAA5E,KAEEA,KAAKsoB,oBAAsBtoB,KAAKsN,aAAawc,cAAchT,UAAS,WAClElS,EAAK/C,MAAQ+C,EAAK/C,QAGhB7B,KAAK0jB,cACP1jB,KAAKqoB,wBAA0BroB,KAAK0jB,YAAYN,iBAAiBtM,UAAS,SAAEqC,GAC1EvU,EAAK/C,MAAQsX,EACbvU,EAAKujB,aAAahP,GAClBvU,EAAKsjB,aACLtjB,EAAKqjB,UAAU9V,KAAK,IAAI4X,GAAwBnlB,EAAMA,EAAK8Q,YAAY1E,gBACvEpM,EAAKojB,WAAW7V,KAAK,IAAI4X,GAAwBnlB,EAAMA,EAAK8Q,YAAY1E,oBAK9EyW,EAAAvnB,UAAAqc,YAAA,WACEvc,KAAKqoB,wBAAwB7L,cAC7Bxc,KAAKsoB,oBAAoB9L,cACzBxc,KAAKskB,aAAavF,WAClB/e,KAAKmjB,gBAAgBpE,YAGvB0I,EAAAvnB,UAAAykB,MAAA,SAAM9iB,GACJ7B,KAAK6B,MAAQA,IAAU0P,UAAY1P,EAAQ7B,KAAKgqB,YAChDhqB,KAAKmoB,aAAanoB,KAAKwpB,SAGzB/B,EAAAvnB,UAAA+pB,0BAAA,SAA0BC,GACxBlqB,KAAKooB,mBAAqB8B,GAG5BzC,EAAAvnB,UAAAiqB,SAAA,SAASC,GACP,OAAOpqB,KAAKopB,WAAappB,KAAKopB,WAAWgB,GAAK,MAOhD3C,EAAAvnB,UAAAumB,6BAAA,WACE,OAAOzmB,KAAKqqB,6BAOd5C,EAAAvnB,UAAAmqB,0BAAA,WACE,OAAOrqB,KAAK+nB,WAAa/nB,KAAK+nB,WAAWsC,4BAA8BrqB,KAAK0V,aAI9E+R,EAAAvnB,UAAAoqB,WAAA,SAAWzoB,GACL7B,KAAKgqB,cAAgBzY,YACvBvR,KAAKgqB,YAAcnoB,GAErB7B,KAAK6B,MAAQA,GAIf4lB,EAAAvnB,UAAAqqB,iBAAA,SAAiBL,GACflqB,KAAKmoB,aAAe+B,GAItBzC,EAAAvnB,UAAAsqB,kBAAA,SAAkBN,GAChBlqB,KAAKkoB,WAAagC,GAIpBzC,EAAAvnB,UAAAuqB,iBAAA,SAAiBC,GACf1qB,KAAKwjB,SAAWkH,GAGlBjD,EAAAvnB,UAAAyqB,WAAA,SAAWzc,GACLA,EAAM8K,QAAU9K,EAAMsK,UAAYI,EAAAA,aACpC5Y,KAAK0jB,YAAYC,OACjBzV,EAAM4B,mBAIV2X,EAAAvnB,UAAA0qB,SAAA,SAAS/oB,OACDgI,EAAO7J,KAAK0jB,YAAY7Z,KAC1BxG,EAAOrD,KAAKsN,aAAa1F,MAAM/F,EAAO7B,KAAKuN,aAAa3F,MAAMiC,IAClE7J,KAAKwoB,iBAAoB3mB,IAAUwB,GAASrD,KAAKsN,aAAavL,QAAQsB,GACtEA,EAAOrD,KAAKyO,oBAAoBpL,GAE3BrD,KAAKsN,aAAanK,SAASE,EAAMrD,KAAKwpB,UACzCxpB,KAAKwpB,OAASnmB,EACdrD,KAAKskB,aAAanS,KAAK9O,GACvBrD,KAAKioB,UAAU9V,KAAK,IAAI4X,GAAwB/pB,KAAMA,KAAK0V,YAAY1E,iBAGzEhR,KAAKmoB,aAAa9kB,IAGpBokB,EAAAvnB,UAAA2qB,UAAA,WACE7qB,KAAKgoB,WAAW7V,KAAK,IAAI4X,GAAwB/pB,KAAMA,KAAK0V,YAAY1E,iBAI1EyW,EAAAvnB,UAAA4qB,QAAA,WAEM9qB,KAAK6B,OACP7B,KAAK0pB,aAAa1pB,KAAK6B,OAGzB7B,KAAKkoB,cAICT,EAAAvnB,UAAAwpB,aAAR,SAAqB7nB,OACbgI,EAAO7J,KAAK0jB,YAAY7Z,KAC9B7J,KAAK0V,YAAY1E,cAAcnP,MAAQA,EACnC7B,KAAKsN,aAAa9G,OAAO3E,EAAO7B,KAAKuN,aAAapD,QAAQN,IAC1D,IAOE4d,EAAAvnB,UAAAuO,oBAAR,SAA4BxF,GAC1B,OAAOjJ,KAAKsN,aAAaxL,eAAemH,IAAQjJ,KAAKsN,aAAavL,QAAQkH,GAAOA,EAAM,0BA5T1F8hB,EAAAA,UAAShhB,KAAA,CAAC,CACTuI,SAAU,uBACVxH,UAAW,CACTwc,GACAK,GACA,CAAErmB,QAAS0pB,EAAAA,yBAA0BzpB,YAAakmB,IAEpD1U,KAAM,CACJkY,uBAAwB,OACxBC,mBAAoB,kDACpBC,aAAc,2CACdC,aAAc,2CACdC,kBAAmB,WACnBC,UAAW,gCACXC,WAAY,cACZC,SAAU,YACVtJ,YAAa,sBAEf1P,SAAU,kEA7EVY,EAAAA,kBAsBO5R,EAAW6R,WAAA,CAAA,CAAAxJ,KAsNfD,EAAAA,8CACAA,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMC,KAAA,CAACvG,YA1NHioB,EAAAA,aAAYpY,WAAA,CAAA,CAAAxJ,KA4NhBD,EAAAA,qDA9JF0J,EAAAA,mCAcAA,EAAAA,qBAQAA,EAAAA,mBAqBAA,EAAAA,mBAWAA,EAAAA,wBAWAA,EAAAA,0BAwBAC,EAAAA,0BAGAA,EAAAA,UA2MHkU,EA9TA,GC7CAiE,GAAA,WAAA,SAAAA,KAGsC,2BAHrCX,EAAAA,UAAShhB,KAAA,CAAC,CACTuI,SAAU,gCAE0BoZ,EAHtC,GAKAC,GAAA,WAgCE,SAAAA,EAAmBpO,EAAkCnQ,GAAlCpN,KAAAud,MAAAA,EAAkCvd,KAAAoN,mBAAAA,EAlB7CpN,KAAA4rB,cAAgB3I,EAAAA,aAAaC,MA6DvC,OAvDE1jB,OAAAmC,eACIgqB,EAAAzrB,UAAA,WAAQ,KADZ,WAEE,OAAOF,KAAKujB,YAAchS,UAAYvR,KAAK6hB,WAAW2B,WAAaxjB,KAAKujB,eAE1E,SAAa1hB,GACX7B,KAAKujB,UAAYD,EAAAA,sBAAsBzhB,oCASzC8pB,EAAAzrB,UAAA8e,YAAA,SAAY1K,GACNA,EAAQuN,YACV7hB,KAAK6rB,sBAITF,EAAAzrB,UAAAqc,YAAA,WACEvc,KAAK4rB,cAAcpP,eAGrBmP,EAAAzrB,UAAAuP,mBAAA,WACEzP,KAAK6rB,sBAGPF,EAAAzrB,UAAA4rB,MAAA,SAAM5d,GACAlO,KAAK6hB,aAAe7hB,KAAKwjB,WAC3BxjB,KAAK6hB,WAAW8B,OAChBzV,EAAM6T,oBAIF4J,EAAAzrB,UAAA2rB,mBAAR,WAAA,IAAAjnB,EAAA5E,KACQ+rB,EAAqB/rB,KAAK6hB,WAAa7hB,KAAK6hB,WAAWsB,gBAAkBhH,EAAAA,KAEzE6P,EACJhsB,KAAK6hB,YAAc7hB,KAAK6hB,WAAWwB,iBAC/BrjB,KAAK6hB,WAAWwB,iBAAiBF,gBACjChH,EAAAA,KAEA8P,EAAoBjsB,KAAK6hB,WAC3BsE,EAAAA,MAAMnmB,KAAK6hB,WAAWa,aAAc1iB,KAAK6hB,WAAWc,cACpDxG,EAAAA,KAEJnc,KAAK4rB,cAAcpP,cACnBxc,KAAK4rB,cAAgBzF,EAAAA,MACnBnmB,KAAKud,MAAMjJ,QACXyX,EACAC,EACAC,GACAnV,UAAS,WAAO,OAAAlS,EAAKwI,mBAAmB0D,sCAzE7CuB,EAAAA,UAAStI,KAAA,CAAC,CACTuI,SAAU,wBACVC,SAAA,upBAEAQ,KAAM,CACJkE,QAAO,wBACPiV,uCAAwC,mCAE1C1Z,SAAU,sBACVC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCI,qBAAqB,+CAnBdmB,UAZPlB,EAAAA,yDAqCCG,EAAAA,MAAKvJ,KAAA,CAAC,yBAGNuJ,EAAAA,2BAUA6Y,EAAAA,aAAYpiB,KAAA,CAAC2hB,OA6ChBC,EA3EA,iBCFA,SAAAS,KAsCkC,2BAtCjCzhB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPyhB,EAAAA,aACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,YAEFC,QAAS,CACPrP,GACA7H,GACA0M,GACAX,GACAiG,GACAkE,GACAD,GACAve,EACAiK,GACAgD,GACAoB,IAEFoR,aAAc,CACZtP,GACA7H,GACA0M,GACAX,GACAiG,GACAkE,GACAD,GACAve,EACAiK,GACAgD,GACAoB,IAEF1Q,UAAW,CAACuJ,GAAmBgN,IAC/BwL,gBAAiB,CAACrL,QAEc4K,0BXlDA,0BACA,qBAFN,uBAGK","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { inject, InjectionToken, LOCALE_ID } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n/** InjectionToken for datepicker that can be used to override default locale code. */\r\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\r\n  providedIn: 'root',\r\n  factory: MAT_DATE_LOCALE_FACTORY\r\n});\r\n\r\n/** @docs-private */\r\nexport function MAT_DATE_LOCALE_FACTORY(): string {\r\n  return inject(LOCALE_ID);\r\n}\r\n\r\n/**\r\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\r\n * If you are importing and providing this in your code you can simply remove it.\r\n * @deprecated\r\n * @deletion-target 7.0.0\r\n */\r\nexport const MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID };\r\n\r\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\r\nexport abstract class DateAdapter<D> {\r\n  /** The locale to use for all dates. */\r\n  protected locale: any;\r\n\r\n  /** A stream that emits when the locale changes. */\r\n  get localeChanges(): Observable<void> {\r\n    return this._localeChanges;\r\n  }\r\n  protected _localeChanges = new Subject<void>();\r\n\r\n  /**\r\n   * Gets the year component of the given date.\r\n   * @param date The date to extract the year from.\r\n   * @returns The year component.\r\n   */\r\n  abstract getYear(date: D): number;\r\n\r\n  /**\r\n   * Gets the month component of the given date.\r\n   * @param date The date to extract the month from.\r\n   * @returns The month component (0-indexed, 0 = January).\r\n   */\r\n  abstract getMonth(date: D): number;\r\n\r\n  abstract getHours(date: D): number;\r\n\r\n  abstract setHours(date: D, value: number): void;\r\n\r\n  abstract getMinutes(date: D): number;\r\n\r\n  abstract setMinutes(date: D, value: number): void;\r\n\r\n  abstract setSeconds(date: D, value: number, ms?: number): void;\r\n\r\n  /**\r\n   * Gets the date of the month component of the given date.\r\n   * @param date The date to extract the date of the month from.\r\n   * @returns The month component (1-indexed, 1 = first of month).\r\n   */\r\n  abstract getDate(date: D): number;\r\n\r\n  /**\r\n   * Gets the day of the week component of the given date.\r\n   * @param date The date to extract the day of the week from.\r\n   * @returns The month component (0-indexed, 0 = Sunday).\r\n   */\r\n  abstract getDayOfWeek(date: D): number;\r\n\r\n  /**\r\n   * Gets a list of names for the months.\r\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\r\n   * @returns An ordered list of all month names, starting with January.\r\n   */\r\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\r\n\r\n  /**\r\n   * Gets a list of names for the dates of the month.\r\n   * @returns An ordered list of all date of the month names, starting with '1'.\r\n   */\r\n  abstract getDateNames(): string[];\r\n\r\n  abstract getHourNames(): string[];\r\n\r\n  abstract getMinuteNames(): string[];\r\n\r\n  /**\r\n   * Gets a list of names for the days of the week.\r\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\r\n   * @returns An ordered list of all weekday names, starting with Sunday.\r\n   */\r\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\r\n\r\n  /**\r\n   * Gets the name for the year of the given date.\r\n   * @param date The date to get the year name for.\r\n   * @returns The name of the given year (e.g. '2017').\r\n   */\r\n  abstract getYearName(date: D): string;\r\n\r\n  /**\r\n   * Gets the first day of the week.\r\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\r\n   */\r\n  abstract getFirstDayOfWeek(): number;\r\n\r\n  /**\r\n   * Gets the number of days in the month of the given date.\r\n   * @param date The date whose month should be checked.\r\n   * @returns The number of days in the month of the given date.\r\n   */\r\n  abstract getNumDaysInMonth(date: D): number;\r\n\r\n  /**\r\n   * Clones the given date.\r\n   * @param date The date to clone\r\n   * @returns A new date equal to the given date.\r\n   */\r\n  abstract clone(date: D): D;\r\n\r\n  /**\r\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\r\n   * month and date.\r\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\r\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\r\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\r\n   * @returns The new date, or null if invalid.\r\n   */\r\n  abstract createDate(year: number, month: number, date: number, hours?: number, minutes?: number): D;\r\n\r\n  /**\r\n   * Gets today's date.\r\n   * @returns Today's date.\r\n   */\r\n  abstract today(): D;\r\n\r\n  /**\r\n   * Parses a date from a user-provided value.\r\n   * @param value The value to parse.\r\n   * @param parseFormat The expected format of the value being parsed\r\n   *     (type is implementation-dependent).\r\n   * @returns The parsed date.\r\n   */\r\n  abstract parse(value: any, parseFormat: any): D | null;\r\n\r\n  /**\r\n   * Formats a date as a string according to the given format.\r\n   * @param date The value to format.\r\n   * @param displayFormat The format to use to display the date as a string.\r\n   * @returns The formatted date string.\r\n   */\r\n  abstract format(date: D, displayFormat: any): string;\r\n\r\n  /**\r\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\r\n   * calendar for each year and then finding the closest date in the new month. For example when\r\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\r\n   * @param date The date to add years to.\r\n   * @param years The number of years to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of years added.\r\n   */\r\n  abstract addCalendarYears(date: D, years: number): D;\r\n\r\n  /**\r\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\r\n   * calendar for each month and then finding the closest date in the new month. For example when\r\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\r\n   * @param date The date to add months to.\r\n   * @param months The number of months to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of months added.\r\n   */\r\n  abstract addCalendarMonths(date: D, months: number): D;\r\n\r\n  /**\r\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\r\n   * calendar for each day.\r\n   * @param date The date to add days to.\r\n   * @param days The number of days to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of days added.\r\n   */\r\n  abstract addCalendarDays(date: D, days: number): D;\r\n\r\n  abstract addCalendarHours(date: D, hours: number): D;\r\n\r\n  abstract addCalendarMinutes(date: D, minutes: number): D;\r\n\r\n  /**\r\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\r\n   * This method is used to generate date strings that are compatible with native HTML attributes\r\n   * such as the `min` or `max` attribute of an `<input>`.\r\n   * @param date The date to get the ISO date string for.\r\n   * @returns The ISO date string date string.\r\n   */\r\n  abstract toIso8601(date: D): string;\r\n\r\n  /**\r\n   * Checks whether the given object is considered a date instance by this DateAdapter.\r\n   * @param obj The object to check\r\n   * @returns Whether the object is a date instance.\r\n   */\r\n  abstract isDateInstance(obj: any): boolean;\r\n\r\n  /**\r\n   * Checks whether the given date is valid.\r\n   * @param date The date to check.\r\n   * @returns Whether the date is valid.\r\n   */\r\n  abstract isValid(date: D): boolean;\r\n\r\n  /**\r\n   * Gets date instance that is not valid.\r\n   * @returns An invalid date.\r\n   */\r\n  abstract invalid(): D;\r\n\r\n  /**\r\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\r\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\r\n   * string). The default implementation does not allow any deserialization, it simply checks that\r\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\r\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\r\n   * support passing values from your backend directly to these properties by overriding this method\r\n   * to also deserialize the format used by your backend.\r\n   * @param value The value to be deserialized into a date object.\r\n   * @returns The deserialized date object, either a valid date, null if the value can be\r\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\r\n   */\r\n  deserialize(value: any): D | null {\r\n    if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\r\n      return value;\r\n    }\r\n    return this.invalid();\r\n  }\r\n\r\n  /**\r\n   * Sets the locale used for all dates.\r\n   * @param locale The new locale.\r\n   */\r\n  setLocale(locale: any) {\r\n    this.locale = locale;\r\n    this._localeChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Compares two dates.\r\n   * @param first The first date to compare.\r\n   * @param second The second date to compare.\r\n   * @param unit Unit deep of the comparision.\r\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n   *     a number greater than 0 if the first date is later.\r\n   */\r\n  compareDate(first: D, second: D, unit = 'minute'): number {\r\n    let f = this.getYear(first).toString();\r\n    let s = this.getYear(second).toString();\r\n\r\n    if (['y', 'year', 'years'].indexOf(unit) >= 0) {\r\n      return Number(f) - Number(s);\r\n    } else {\r\n      f = f.concat(('00' + this.getMonth(first)).slice(-2));\r\n      s = s.concat(('00' + this.getMonth(second)).slice(-2));\r\n    }\r\n\r\n    if (['M', 'month', 'months'].indexOf(unit) >= 0) {\r\n      return Number(f) - Number(s);\r\n    } else {\r\n      f = f.concat(('00' + this.getDate(first)).slice(-2));\r\n      s = s.concat(('00' + this.getDate(second)).slice(-2));\r\n    }\r\n\r\n    if (['d', 'day', 'days'].indexOf(unit) >= 0) {\r\n      return Number(f) - Number(s);\r\n    } else {\r\n      f = f.concat(('00' + this.getHours(first)).slice(-2));\r\n      s = s.concat(('00' + this.getHours(second)).slice(-2));\r\n    }\r\n\r\n    if (['h', 'hour', 'hours'].indexOf(unit) >= 0) {\r\n      return Number(f) - Number(s);\r\n    } else {\r\n      f = f.concat(('00' + this.getMinutes(first)).slice(-2));\r\n      s = s.concat(('00' + this.getMinutes(second)).slice(-2));\r\n    }\r\n\r\n    return Number(f) - Number(s);\r\n  }\r\n\r\n  /**\r\n   * Checks if two dates are equal.\r\n   * @param first The first date to check.\r\n   * @param second The second date to check.\r\n   * @param unit Unit deep of the comparision.\r\n   * @returns Whether the two dates are equal.\r\n   *     Null dates are considered equal to other null dates.\r\n   */\r\n  sameDate(first: D | null, second: D | null, unit = 'minute'): boolean {\r\n    return first && second ? !this.compareDate(first, second, unit) : first === second;\r\n  }\r\n\r\n  /**\r\n   * Clamp the given date between min and max dates.\r\n   * @param date The date to clamp.\r\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\r\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\r\n   * @param unit Unit deep of the comparision.\r\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r\n   *     otherwise `date`.\r\n   */\r\n  clampDate(date: D | null, min?: D | null, max?: D | null, unit = 'minute'): D | null {\r\n    if (!date) {\r\n      return null;\r\n    }\r\n    if (min && this.compareDate(date, min, unit) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDate(date, max, unit) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nexport interface MatDateFormats {\r\n  parse: {\r\n    date: any;\r\n    datetime: any;\r\n    time: any;\r\n  };\r\n  display: {\r\n    date: any;\r\n    datetime: any;\r\n    time: any;\r\n    dateA11yLabel: any;\r\n    monthDayLabel: any;\r\n    monthDayA11yLabel: any;\r\n    monthYearLabel: any;\r\n    monthYearA11yLabel: any;\r\n    timeLabel: any;\r\n  };\r\n}\r\n\r\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_LOCALE } from './date-adapter';\r\n\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nconst SUPPORTS_INTL_API = typeof Intl !== 'undefined';\r\n\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n  long: [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n  ],\r\n  short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n\r\n/** The default hour names to use if Intl API is not available. */\r\nconst DEFAULT_HOUR_NAMES = range(24, String);\r\n\r\n/** The default minute names to use if Intl API is not available. */\r\nconst DEFAULT_MINUTE_NAMES = range(60, String);\r\n\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\n@Injectable()\r\nexport class NativeDateAdapter extends DateAdapter<Date> {\r\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n  private readonly _clampDate: boolean;\r\n\r\n  /**\r\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n   * will produce `'8/13/1800'`.\r\n   *\r\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n   * getting the string representation of a Date object from it's utc representation. We're keeping\r\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n   * though.\r\n   */\r\n  useUtcForDisplay: boolean = true;\r\n\r\n  constructor(\r\n    platform: Platform,\r\n    @Optional()\r\n    @Inject(MAT_DATE_LOCALE)\r\n    matDateLocale: string\r\n  ) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n\r\n    // IE does its own time zone correction, so we disable this on IE.\r\n    this.useUtcForDisplay = !platform.TRIDENT;\r\n    this._clampDate = platform.TRIDENT || platform.EDGE;\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return date.getDate();\r\n  }\r\n\r\n  getHours(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n\r\n  setHours(date: Date, value: number): void {\r\n    date.setHours(value);\r\n  }\r\n\r\n  getMinutes(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n\r\n  setMinutes(date: Date, value: number): void {\r\n    date.setMinutes(value);\r\n  }\r\n\r\n  setSeconds(date: Date, value: number, ms?: number): void {\r\n    date.setSeconds(value, ms);\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\r\n      return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\r\n      return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\r\n\r\n  getHourNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { hour: 'numeric', timeZone: 'utc' });\r\n      return range(24, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, 0, 0, i))));\r\n    }\r\n    return DEFAULT_HOUR_NAMES;\r\n  }\r\n\r\n  getMinuteNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { minute: 'numeric', timeZone: 'utc' });\r\n      return range(60, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, 0, 0, 0, i))));\r\n    }\r\n    return DEFAULT_MINUTE_NAMES;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\r\n      return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return this.createDate(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date),\r\n      this.getHours(date),\r\n      this.getMinutes(date)\r\n    );\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number, hours?: number, minutes?: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    const result = this._createDateWithOverflow(year, month, date, hours, minutes);\r\n\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() !== month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value === 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n\r\n    if (SUPPORTS_INTL_API) {\r\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n        date = this.clone(date);\r\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n      }\r\n\r\n      displayFormat = { ...displayFormat, timeZone: 'utc' };\r\n\r\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date) + months,\r\n      this.getDate(date),\r\n      this.getHours(date),\r\n      this.getMinutes(date)\r\n    );\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date) + days,\r\n      this.getHours(date),\r\n      this.getMinutes(date)\r\n    );\r\n  }\r\n\r\n  addCalendarHours(date: Date, hours: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date),\r\n      this.getHours(date) + hours,\r\n      this.getMinutes(date)\r\n    );\r\n  }\r\n\r\n  addCalendarMinutes(date: Date, minutes: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date),\r\n      this.getHours(date),\r\n      this.getMinutes(date) + minutes\r\n    );\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n   * invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Date | null {\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n      // string is the right format first.\r\n      if (ISO_8601_REGEX.test(value)) {\r\n        let date = new Date(value);\r\n        if (this.isValid(date)) {\r\n          return date;\r\n        }\r\n      }\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number, hours?: number, minutes?: number) {\r\n    const result = new Date(year, month, date, hours, minutes, 0);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * When converting Date object to string, javascript built-in functions may return wrong\r\n   * results because it applies its internal DST rules. The DST rules around the world change\r\n   * very frequently, and the current valid rule is not always valid in previous years though.\r\n   * We work around this problem building a new Date object which has its internal UTC\r\n   * representation with the local date and time.\r\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n   *    timeZone set to 'utc' to work fine.\r\n   * @param date Date from which we want to get the string representation according to dtf\r\n   * @returns A Date object with its UTC representation based on the passed in date info\r\n   */\r\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\r\n    const d = new Date(\r\n      Date.UTC(\r\n        date.getFullYear(),\r\n        date.getMonth(),\r\n        date.getDate(),\r\n        date.getHours(),\r\n        date.getMinutes(),\r\n        date.getSeconds(),\r\n        date.getMilliseconds()\r\n      )\r\n    );\r\n    return dtf.format(d);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { MatDateFormats } from './date-formats';\r\n\r\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\r\n  parse: {\r\n    date: null,\r\n    datetime: null,\r\n    time: null\r\n  },\r\n  display: {\r\n    date: { year: 'numeric', month: 'numeric', day: 'numeric' },\r\n    datetime: {\r\n      year: 'numeric',\r\n      month: 'numeric',\r\n      day: 'numeric',\r\n      hours: 'numeric',\r\n      minutes: 'numeric'\r\n    },\r\n    time: { hours: 'numeric', minutes: 'numeric' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthDayLabel: { month: 'short', day: 'numeric' },\r\n    monthDayA11yLabel: { month: 'long', day: 'numeric' },\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n    timeLabel: { hours: 'numeric', minutes: 'numeric' }\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { PlatformModule } from '@angular/cdk/platform';\r\nimport { NgModule } from '@angular/core';\r\nimport { DateAdapter } from './date-adapter';\r\nimport { MAT_DATE_FORMATS } from './date-formats';\r\nimport { NativeDateAdapter } from './native-date-adapter';\r\nimport { MAT_NATIVE_DATE_FORMATS } from './native-date-formats';\r\n\r\nexport * from './date-adapter';\r\nexport * from './date-formats';\r\nexport * from './native-date-adapter';\r\nexport * from './native-date-formats';\r\n\r\n@NgModule({\r\n  imports: [PlatformModule],\r\n  providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }]\r\n})\r\nexport class NativeDateModule {}\r\n\r\n@NgModule({\r\n  imports: [NativeDateModule],\r\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS }]\r\n})\r\nexport class MatNativeDateModule {}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_LOCALE } from '../core/index';\r\n\r\n// TODO(mmalerba): See if we can clean this up at some point.\r\nimport * as momentNs from 'moment-timezone';\r\nexport type Moment = momentNs.Moment;\r\nconst moment = momentNs;\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts Moment.js Dates for use with Angular Material. */\r\n@Injectable()\r\nexport class MomentDateAdapter extends DateAdapter<Moment> {\r\n  // Note: all of the methods that accept a `Moment` input parameter immediately call `this.clone`\r\n  // on it. This is to ensure that we're working with a `Moment` that has the correct locale setting\r\n  // while avoiding mutating the original object passed to us. Just calling `.locale(...)` on the\r\n  // input would mutate the object.\r\n\r\n  private _localeData: {\r\n    firstDayOfWeek: number;\r\n    longMonths: string[];\r\n    shortMonths: string[];\r\n    dates: string[];\r\n    longDaysOfWeek: string[];\r\n    shortDaysOfWeek: string[];\r\n    narrowDaysOfWeek: string[];\r\n  };\r\n\r\n  constructor(\r\n    @Optional()\r\n    @Inject(MAT_DATE_LOCALE)\r\n    dateLocale: string\r\n  ) {\r\n    super();\r\n    this.setLocale(dateLocale || moment.locale());\r\n  }\r\n\r\n  setLocale(locale: string) {\r\n    super.setLocale(locale);\r\n\r\n    const momentLocaleData = moment.localeData(locale);\r\n    this._localeData = {\r\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\r\n      longMonths: momentLocaleData.months(),\r\n      shortMonths: momentLocaleData.monthsShort(),\r\n      dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\r\n      longDaysOfWeek: momentLocaleData.weekdays(),\r\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\r\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin()\r\n    };\r\n  }\r\n\r\n  getYear(date: Moment): number {\r\n    return this.clone(date).year();\r\n  }\r\n\r\n  getMonth(date: Moment): number {\r\n    return this.clone(date).month();\r\n  }\r\n\r\n  getDate(date: Moment): number {\r\n    return this.clone(date).date();\r\n  }\r\n\r\n  getHours(date: Moment): number {\r\n    return this.clone(date).hours();\r\n  }\r\n\r\n  setHours(date: Moment, value: number): void {\r\n    date.hours(value);\r\n  }\r\n\r\n  getMinutes(date: Moment): number {\r\n    return this.clone(date).minutes();\r\n  }\r\n\r\n  setMinutes(date: Moment, value: number): void {\r\n    date.minutes(value);\r\n  }\r\n\r\n  setSeconds(date: Moment, value: number, ms?: number): void {\r\n    date.seconds(value);\r\n    if (ms) {\r\n      date.milliseconds(ms);\r\n    }\r\n  }\r\n\r\n  getDayOfWeek(date: Moment): number {\r\n    return this.clone(date).day();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\r\n    return style === 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return this._localeData.dates;\r\n  }\r\n\r\n  getHourNames(): string[] {\r\n    // TODO SUPPORTS_INTL_API\r\n    return range(24, String);\r\n  }\r\n\r\n  getMinuteNames(): string[] {\r\n    // TODO SUPPORTS_INTL_API\r\n    return range(60, String);\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (style === 'long') {\r\n      return this._localeData.longDaysOfWeek;\r\n    }\r\n    if (style === 'short') {\r\n      return this._localeData.shortDaysOfWeek;\r\n    }\r\n    return this._localeData.narrowDaysOfWeek;\r\n  }\r\n\r\n  getYearName(date: Moment): string {\r\n    return this.clone(date).format('YYYY');\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return this._localeData.firstDayOfWeek;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Moment): number {\r\n    return this.clone(date).daysInMonth();\r\n  }\r\n\r\n  clone(date: Moment): Moment {\r\n    const obj = date ? moment(date) : moment();\r\n    return obj.locale(this.locale);\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number, hours?: number, minutes?: number): Moment {\r\n    // Moment.js will create an invalid date if any of the components are out of bounds, but we\r\n    // explicitly check each case so we can throw more descriptive errors.\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    const result = moment({ year, month, date, hours, minutes, seconds: 0 });\r\n\r\n    // If the result isn't valid, the date must have been out of bounds for this month.\r\n    if (!result.isValid()) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result.locale(this.locale);\r\n  }\r\n\r\n  today(): Moment {\r\n    return moment().locale(this.locale);\r\n  }\r\n\r\n  parse(value: any, parseFormat: string | string[]): Moment | null {\r\n    if (parseFormat && value && typeof value === 'string') {\r\n      return moment(value, parseFormat, this.locale, true);\r\n    }\r\n    return value ? moment(value).locale(this.locale) : null;\r\n  }\r\n\r\n  format(date: Moment, displayFormat: string): string {\r\n    date = this.clone(date);\r\n    if (!this.isValid(date)) {\r\n      throw Error('MomentDateAdapter: Cannot format invalid date.');\r\n    }\r\n    return date.format(displayFormat);\r\n  }\r\n\r\n  addCalendarYears(date: Moment, years: number): Moment {\r\n    return this.clone(date).add({ years });\r\n  }\r\n\r\n  addCalendarMonths(date: Moment, months: number): Moment {\r\n    return this.clone(date).add({ months });\r\n  }\r\n\r\n  addCalendarDays(date: Moment, days: number): Moment {\r\n    return this.clone(date).add({ days });\r\n  }\r\n\r\n  addCalendarHours(date: Moment, hours: number): Moment {\r\n    return this.clone(date).add({ hours });\r\n  }\r\n\r\n  addCalendarMinutes(date: Moment, minutes: number): Moment {\r\n    return this.clone(date).add({ minutes });\r\n  }\r\n\r\n  toIso8601(date: Moment): string {\r\n    return this.clone(date).format();\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n   * string into null. Returns an invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Moment | null {\r\n    let date;\r\n    if (value instanceof Date) {\r\n      date = moment(value);\r\n    }\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      date = moment(value, moment.ISO_8601).locale(this.locale);\r\n    }\r\n    if (date && this.isValid(date)) {\r\n      return date;\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return moment.isMoment(obj) ? this.clone(obj).isValid() : moment(obj).isValid();\r\n  }\r\n\r\n  isValid(date: Moment): boolean {\r\n    return this.clone(date).isValid();\r\n  }\r\n\r\n  invalid(): Moment {\r\n    return moment.invalid();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { MatDateFormats } from '../core/index';\r\n\r\nexport const MAT_MOMENT_DATE_FORMATS: MatDateFormats = {\r\n  parse: {\r\n    date: ['YYYY-MM-DD', 'YYYY/MM/DD', 'll'],\r\n    datetime: ['YYYY-MM-DD HH:mm', 'YYYY/MM/DD HH:mm', 'll h:mma'],\r\n    time: ['H:mm', 'HH:mm', 'h:mm a', 'hh:mm a']\r\n  },\r\n  display: {\r\n    date: 'll',\r\n    datetime: 'll h:mma',\r\n    time: 'h:mm a',\r\n    dateA11yLabel: 'LL',\r\n    monthDayLabel: 'MMM D',\r\n    monthDayA11yLabel: 'MMMM D',\r\n    monthYearLabel: 'MMMM YYYY',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n    timeLabel: 'HH:mm'\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '../core/index';\r\nimport { MomentDateAdapter } from './moment-date-adapter';\r\nimport { MAT_MOMENT_DATE_FORMATS } from './moment-date-formats';\r\n\r\nexport * from './moment-date-adapter';\r\nexport * from './moment-date-formats';\r\nexport { DateAdapter, MatDateFormats, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '../core/index';\r\n\r\n@NgModule({\r\n  providers: [{ provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] }]\r\n})\r\nexport class MomentDateModule {}\r\n\r\n@NgModule({\r\n  imports: [MomentDateModule],\r\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS }]\r\n})\r\nexport class MatMomentDateModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n    `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule ` +\r\n      `or provide a custom implementation.`\r\n  );\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nexport const CLOCK_RADIUS = 50;\r\nexport const CLOCK_INNER_RADIUS = 27.5;\r\nexport const CLOCK_OUTER_RADIUS = 41.25;\r\nexport const CLOCK_TICK_RADIUS = 7.0833;\r\n\r\nexport type ClockView = 'hour' | 'minute';\r\n\r\n/**\r\n * A clock that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-clock-view',\r\n  templateUrl: 'clock-view.html',\r\n  exportAs: 'matClockView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    role: 'clock',\r\n    '(mousedown)': '_handleMousedown($event)'\r\n  },\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatClockView<D> implements AfterContentInit {\r\n  /**\r\n   * The time to display in this clock view. (the rest is ignored)\r\n   */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (oldActiveDate && this._dateAdapter.compareDate(oldActiveDate, this._activeDate, 'minute')) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  // The currently selected date.\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  // A function used to filter which dates are selectable.\r\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  @Input() clockStep = 1;\r\n\r\n  @Input() twelveHour = false;\r\n\r\n  // Whether the clock is in hour view.\r\n  @Input() hourView = true;\r\n\r\n  // Emits when the final time was selected.\r\n  @Output() readonly selectedTime = new EventEmitter<D>();\r\n\r\n  // Emits when the currently selected date changes.\r\n  @Output() readonly selectedChange = new EventEmitter<D>();\r\n\r\n  // Emits when the currently selected date changes.\r\n  @Output() readonly changeView = new EventEmitter<void>();\r\n\r\n  // Hours and Minutes representing the clock view.\r\n  _hours: Array<any> = [];\r\n  _minutes: Array<any> = [];\r\n\r\n  _selectedHour: number | null;\r\n  _selectedMinute: number | null;\r\n  _anteMeridian: boolean;\r\n\r\n  private mouseMoveListener: any;\r\n  private mouseUpListener: any;\r\n\r\n  get _hand(): any {\r\n    this._selectedHour = this._dateAdapter.getHours(this.activeDate);\r\n    this._selectedMinute = this._dateAdapter.getMinutes(this.activeDate);\r\n    let radius = CLOCK_OUTER_RADIUS;\r\n    let deg = 0;\r\n\r\n    if (this.twelveHour) {\r\n      this._selectedHour = this._selectedHour < 12 ? this._selectedHour : this._selectedHour - 12;\r\n      this._selectedHour = this._selectedHour === 0 ? 12 : this._selectedHour;\r\n    }\r\n\r\n    if (this.hourView) {\r\n      const outer = this._selectedHour > 0 && this._selectedHour < 13;\r\n      radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\r\n      if (this.twelveHour) {\r\n        radius = CLOCK_OUTER_RADIUS;\r\n      }\r\n      deg = Math.round(this._selectedHour * (360 / (24 / 2)));\r\n    } else {\r\n      deg = Math.round(this._selectedMinute * (360 / 60));\r\n    }\r\n\r\n    return {\r\n      transform: `rotate(${deg}deg)`,\r\n      height: `${radius}%`,\r\n      'margin-top': `${50 - radius}%`\r\n    };\r\n  }\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _element: ElementRef,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this.mouseMoveListener = (event: any) => {\r\n      this._handleMousemove(event);\r\n    };\r\n    this.mouseUpListener = () => {\r\n      this._handleMouseup();\r\n    };\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  // Handles mousedown events on the clock body.\r\n  _handleMousedown(event: any) {\r\n    this.setTime(event);\r\n    document.addEventListener('mousemove', this.mouseMoveListener);\r\n    document.addEventListener('touchmove', this.mouseMoveListener);\r\n    document.addEventListener('mouseup', this.mouseUpListener);\r\n    document.addEventListener('touchend', this.mouseUpListener);\r\n  }\r\n\r\n  _handleMousemove(event: any) {\r\n    event.preventDefault();\r\n    this.setTime(event);\r\n  }\r\n\r\n  _handleMouseup() {\r\n    document.removeEventListener('mousemove', this.mouseMoveListener);\r\n    document.removeEventListener('touchmove', this.mouseMoveListener);\r\n    document.removeEventListener('mouseup', this.mouseUpListener);\r\n    document.removeEventListener('touchend', this.mouseUpListener);\r\n  }\r\n\r\n  // Initializes this clock view.\r\n  _init() {\r\n    this._hours.length = 0;\r\n    this._minutes.length = 0;\r\n\r\n    const hourNames = this._dateAdapter.getHourNames();\r\n    const minuteNames = this._dateAdapter.getMinuteNames();\r\n\r\n    if (this.twelveHour) {\r\n      this._anteMeridian = this._dateAdapter.getHours(this.activeDate) < 12;\r\n\r\n      for (let i = 0; i < hourNames.length / 2; i++) {\r\n        const radian = i / 6 * Math.PI;\r\n        const radius = CLOCK_OUTER_RADIUS;\r\n        const date = this._dateAdapter.createDate(\r\n          this._dateAdapter.getYear(this.activeDate),\r\n          this._dateAdapter.getMonth(this.activeDate),\r\n          this._dateAdapter.getDate(this.activeDate),\r\n          this._anteMeridian ? i : i + 12\r\n        );\r\n        this._hours.push({\r\n          value: i,\r\n          displayValue: i === 0 ? '12' : hourNames[i],\r\n          enabled: !this.dateFilter || this.dateFilter(date, 'hour'),\r\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\r\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS\r\n        });\r\n      }\r\n    } else {\r\n      for (let i = 0; i < hourNames.length; i++) {\r\n        const radian = i / 6 * Math.PI;\r\n        const outer = i > 0 && i < 13;\r\n        const radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\r\n        const date = this._dateAdapter.createDate(\r\n          this._dateAdapter.getYear(this.activeDate),\r\n          this._dateAdapter.getMonth(this.activeDate),\r\n          this._dateAdapter.getDate(this.activeDate),\r\n          i\r\n        );\r\n        this._hours.push({\r\n          value: i,\r\n          displayValue: i === 0 ? '12' : hourNames[i],\r\n          enabled: !this.dateFilter || this.dateFilter(date, 'hour'),\r\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\r\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,\r\n          fontSize: i > 0 && i < 13 ? '' : '80%'\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < minuteNames.length; i += 5) {\r\n      const radian = i / 30 * Math.PI;\r\n      const date = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate),\r\n        this._dateAdapter.getDate(this.activeDate),\r\n        this._dateAdapter.getHours(this.activeDate),\r\n        i\r\n      );\r\n      this._minutes.push({\r\n        value: i,\r\n        displayValue: i === 0 ? '00' : minuteNames[i],\r\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute'),\r\n        top: CLOCK_RADIUS - Math.cos(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS,\r\n        left: CLOCK_RADIUS + Math.sin(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS\r\n      });\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  // Set Time\r\n  private setTime(event: any) {\r\n    const trigger = this._element.nativeElement;\r\n    const triggerRect = trigger.getBoundingClientRect();\r\n    const width = trigger.offsetWidth;\r\n    const height = trigger.offsetHeight;\r\n    const pageX = event.pageX !== undefined ? event.pageX : event.touches[0].pageX;\r\n    const pageY = event.pageY !== undefined ? event.pageY : event.touches[0].pageY;\r\n    const x = width / 2 - (pageX - triggerRect.left - window.pageXOffset);\r\n    const y = height / 2 - (pageY - triggerRect.top - window.pageYOffset);\r\n    const unit = Math.PI / (this.hourView ? 6 : this.clockStep ? 30 / this.clockStep : 30);\r\n    const z = Math.sqrt(x * x + y * y);\r\n    const outer = this.hourView && z > (width * (CLOCK_OUTER_RADIUS / 100) + width * (CLOCK_INNER_RADIUS / 100)) / 2;\r\n\r\n    let radian = Math.atan2(-x, y);\r\n    if (radian < 0) {\r\n      radian = Math.PI * 2 + radian;\r\n    }\r\n    let value = Math.round(radian / unit);\r\n\r\n    const date = this._dateAdapter.clone(this.activeDate);\r\n\r\n    if (this.hourView) {\r\n      if (value === 12) {\r\n        value = 0;\r\n      }\r\n      value = this.twelveHour\r\n        ? this._anteMeridian ? value : value + 12\r\n        : outer ? (value === 0 ? 12 : value) : value === 0 ? 0 : value + 12;\r\n      this._dateAdapter.setHours(date, value);\r\n    } else {\r\n      if (this.clockStep) {\r\n        value *= this.clockStep;\r\n      }\r\n      if (value === 60) {\r\n        value = 0;\r\n      }\r\n      this._dateAdapter.setMinutes(date, value);\r\n    }\r\n\r\n    // validate if the resulting value is disabled and do not take action\r\n    if (this.dateFilter && !this.dateFilter(date, this.hourView ? 'hour' : 'minute')) {\r\n      return;\r\n    }\r\n\r\n    this.activeDate = date;\r\n    if (this.hourView) {\r\n      this.changeView.emit();\r\n      this.selectedChange.emit(this.activeDate);\r\n    } else {\r\n      this.selectedTime.emit(this.activeDate);\r\n    }\r\n  }\r\n\r\n  _focusActiveCell() {}\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n}\r\n","import {\r\n  animate,\r\n  animateChild,\r\n  AnimationTriggerMetadata,\r\n  group,\r\n  keyframes,\r\n  query,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger\r\n} from '@angular/animations';\r\n\r\nexport const slideCalendar: AnimationTriggerMetadata = trigger('slideCalendar', [\r\n  transition('* => left', [\r\n    animate(\r\n      180,\r\n      keyframes([\r\n        style({ transform: 'translateX(50%)', offset: 0.5, opacity: 0 }),\r\n        style({ transform: 'translateX(-50%)', offset: 0.51, opacity: 0 }),\r\n        style({ transform: 'translateX(0)', offset: 1, opacity: 1 })\r\n      ])\r\n    )\r\n  ]),\r\n  transition('* => right', [\r\n    animate(\r\n      180,\r\n      keyframes([\r\n        style({ transform: 'translateX(-50%)', offset: 0.5, opacity: 0 }),\r\n        style({ transform: 'translateX(50%)', offset: 0.51, opacity: 0 }),\r\n        style({ transform: 'translateX(0)', offset: 1, opacity: 1 })\r\n      ])\r\n    )\r\n  ])\r\n]);\r\n\r\nexport const controlActive: AnimationTriggerMetadata = trigger('controlActive', [\r\n  transition('* => active', [\r\n    animate(\r\n      '0.4s linear',\r\n      keyframes([\r\n        style({ transform: 'scale(0.9)' }),\r\n        style({ transform: 'scale(1.1)' }),\r\n        style({ transform: 'scale(1)' })\r\n      ])\r\n    )\r\n  ])\r\n]);\r\n\r\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\r\n  state('void', style({ opacity: 0, transform: 'scale(1, 0)' })),\r\n  state('enter', style({ opacity: 1, transform: 'scale(1, 1)' })),\r\n  transition(\r\n    'void => enter',\r\n    group([\r\n      query('@fadeInCalendar', animateChild()),\r\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\r\n    ])\r\n  ),\r\n  transition('* => void', animate('100ms linear', style({ opacity: 0 })))\r\n]);\r\n\r\nexport const fadeInCalendar: AnimationTriggerMetadata = trigger('fadeInCalendar', [\r\n  state('void', style({ opacity: 0 })),\r\n  state('enter', style({ opacity: 1 })),\r\n  transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\r\n]);\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport interface MatDatepickerIntlCatalog {\r\n  calendarLabel: string;\r\n  openCalendarLabel: string;\r\n  prevMonthLabel: string;\r\n  nextMonthLabel: string;\r\n  prevYearLabel: string;\r\n  nextYearLabel: string;\r\n  setToAMLabel: string;\r\n  setToPMLabel: string;\r\n  switchToMinuteViewLabel: string;\r\n  switchToHourViewLabel: string;\r\n  switchToMonthViewLabel: string;\r\n  switchToYearViewLabel: string;\r\n  switchToYearsViewLabel: string;\r\n  buttonSubmitText: string;\r\n  buttonSubmitLabel: string;\r\n  buttonCancelText: string;\r\n  buttonCancelLabel: string;\r\n}\r\n\r\n/** Datepicker data that requires internationalization. */\r\n@Injectable({ providedIn: 'root' })\r\nexport class MatDatepickerIntl implements MatDatepickerIntlCatalog {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes = new Subject<void>();\r\n\r\n  /** A label for the calendar popup (used by screen readers). */\r\n  calendarLabel = 'Calendar';\r\n\r\n  /** A label for the button used to open the calendar popup (used by screen readers). */\r\n  openCalendarLabel = 'Open calendar';\r\n\r\n  /** A label for the previous month button (used by screen readers). */\r\n  prevMonthLabel = 'Previous month';\r\n\r\n  /** A label for the next month button (used by screen readers). */\r\n  nextMonthLabel = 'Next month';\r\n\r\n  /** A label for the previous year button (used by screen readers). */\r\n  prevYearLabel = 'Previous year';\r\n\r\n  /** A label for the next year button (used by screen readers). */\r\n  nextYearLabel = 'Next year';\r\n\r\n  /** A label for the 'AM' button (used by screen readers). */\r\n  setToAMLabel = 'Set date to AM';\r\n\r\n  /** A label for the 'PM' button (used by screen readers). */\r\n  setToPMLabel = 'Set date to PM';\r\n\r\n  /** A label for the 'switch to minute view' button (used by screen readers). */\r\n  switchToMinuteViewLabel = 'Change to minute view';\r\n\r\n  /** A label for the 'switch to hour view' button (used by screen readers). */\r\n  switchToHourViewLabel = 'Change to hour view';\r\n\r\n  /** A label for the 'switch to month view' button (used by screen readers). */\r\n  switchToMonthViewLabel = 'Change to month view';\r\n\r\n  /** A label for the 'switch to year view' button (used by screen readers). */\r\n  switchToYearViewLabel = 'Change to year view';\r\n\r\n  /** A label for the 'switch to years view' button (used by screen readers). */\r\n  switchToYearsViewLabel = 'Change to years view';\r\n\r\n  /** Text for the 'submit' button. */\r\n  buttonSubmitText = 'Ok';\r\n\r\n  /** A label for the 'submit' button (used by screen readers). */\r\n  buttonSubmitLabel = 'Choose the current date';\r\n\r\n  /** Text for the 'cancel' button. */\r\n  buttonCancelText = 'Cancel';\r\n\r\n  /** A label for the 'cancel' button (used by screen readers). */\r\n  buttonCancelLabel = 'Cancel the date selection';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  NgZone,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { take } from 'rxjs/operators';\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class MatCalendarCell {\r\n  constructor(\r\n    public value: number,\r\n    public displayValue: string,\r\n    public ariaLabel: string,\r\n    public enabled: boolean\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: '[mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  // styleUrls: ['calendar-body.scss'],\r\n  host: {\r\n    class: 'mat-calendar-body',\r\n    role: 'grid',\r\n    'attr.aria-readonly': 'true'\r\n  },\r\n  exportAs: 'matCalendarBody',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatCalendarBody {\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: MatCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** The value in the table that is active. */\r\n  @Input() activeValue: number;\r\n\r\n  /** The value in the table that is currently selected. */\r\n  @Input() selectedValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols = 7;\r\n\r\n  /** Whether to allow selection of disabled cells. */\r\n  @Input() allowDisabledSelection = false;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell = 0;\r\n\r\n  /**\r\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n   * maintained even as the table resizes.\r\n   */\r\n  @Input() cellAspectRatio = 0.55;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() readonly selectedValueChange = new EventEmitter<number>();\r\n\r\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) {}\r\n\r\n  _cellClicked(cell: MatCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  get _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length\r\n      ? this.numCols - this.rows[0].length\r\n      : 0;\r\n  }\r\n\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber === this.activeCell;\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable\r\n        .asObservable()\r\n        .pipe(take(1))\r\n        .subscribe(() => {\r\n          this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\r\n        });\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { slideCalendar } from './datepicker-animations';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'matMonthView',\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatMonthView<D> implements AfterContentInit {\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    this._activeValue = this._getDateInCurrentMonth(this.activeDate);\r\n\r\n    if (oldActiveDate && !this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  /** Animations handler */\r\n  @Input() animationDir: string;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection = new EventEmitter<void>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /** The active date on the calendar. */\r\n  _activeValue: number | null;\r\n\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number | null;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: { long: string; narrow: string }[];\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional() private _dir?: Directionality\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    const weekdays = longWeekdays.map((long, i) => {\r\n      return { long, narrow: narrowWeekdays[i].slice(0, 1) };\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    if (this._selectedDate !== date) {\r\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const selectedHours = this._dateAdapter.getHours(this.activeDate);\r\n      const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\r\n      const selectedDate = this._dateAdapter.createDate(\r\n        selectedYear,\r\n        selectedMonth,\r\n        date,\r\n        selectedHours,\r\n        selectedMinutes\r\n      );\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n\r\n    const isRtl = this._isRtl();\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(\r\n          this._activeDate,\r\n          1 - this._dateAdapter.getDate(this._activeDate)\r\n        );\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(\r\n          this._activeDate,\r\n          this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate)\r\n        );\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = event.altKey\r\n          ? this._dateAdapter.addCalendarYears(this._activeDate, -1)\r\n          : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = event.altKey\r\n          ? this._dateAdapter.addCalendarYears(this._activeDate, 1)\r\n          : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\r\n          this._userSelection.emit();\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._activeValue = this._getDateInCurrentMonth(this.activeDate);\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel = this._dateAdapter\r\n      .getMonthNames('short')\r\n      [this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate),\r\n      this._dateAdapter.getMonth(this.activeDate),\r\n      1\r\n    );\r\n    this._firstWeekOffset =\r\n      (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) %\r\n      DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell === DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate),\r\n        i + 1\r\n      );\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return (\r\n      !!date &&\r\n      (!this.dateFilter || this.dateFilter(date, 'day')) &&\r\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate, 'day') >= 0) &&\r\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate, 'day') <= 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.compareDate(d1, d2, 'month') === 0);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { slideCalendar } from './datepicker-animations';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'matYearView',\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatYearView<D> implements AfterContentInit {\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (\r\n      oldActiveDate &&\r\n      this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)\r\n    ) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  /** Animations handler */\r\n  @Input() animationDir: string;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional() private _dir?: Directionality\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1)\r\n    );\r\n    const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n    const selectedDay = this._dateAdapter.getDate(this.activeDate);\r\n    const selectedHours = this._dateAdapter.getHours(this.activeDate);\r\n    const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\r\n    const date = this._dateAdapter.createDate(\r\n      selectedYear,\r\n      month,\r\n      Math.min(selectedDay, daysInMonth),\r\n      selectedHours,\r\n      selectedMinutes\r\n    );\r\n    this.selectedChange.emit(date);\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    const monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row =>\r\n      row.map(month => this._createCellForMonth(month, monthNames[month]))\r\n    );\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate)\r\n      ? this._dateAdapter.getMonth(date)\r\n      : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    const ariaLabel = this._dateAdapter.format(\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n      this._dateFormats.display.monthYearA11yLabel\r\n    );\r\n    return new MatCalendarCell(\r\n      month,\r\n      monthName.toLocaleUpperCase(),\r\n      ariaLabel,\r\n      this._shouldEnableMonth(month)\r\n    );\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (\r\n      month === undefined ||\r\n      month === null ||\r\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n      this._isYearAndMonthBeforeMinDate(activeYear, month)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (\r\n      let d = firstOfMonth;\r\n      this._dateAdapter.getMonth(d) == month;\r\n      d = this._dateAdapter.addCalendarDays(d, 1)\r\n    ) {\r\n      if (this.dateFilter(d, 'day')) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n\r\n    const isRtl = this._isRtl();\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(\r\n          this._activeDate,\r\n          this._dateAdapter.getMonth(this._activeDate)\r\n        );\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(\r\n          this._activeDate,\r\n          11 - this._dateAdapter.getMonth(this._activeDate)\r\n        );\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          event.altKey ? -10 : -1\r\n        );\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          event.altKey ? 10 : 1\r\n        );\r\n        break;\r\n      case ENTER:\r\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { DOWN_ARROW, ENTER, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { of as obsOf, fromEvent } from 'rxjs';\r\nimport { mergeMap, sampleTime } from 'rxjs/operators';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nconst YEAR_LINE_HEIGHT = 35;\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-years-view',\r\n  templateUrl: 'years-view.html',\r\n  exportAs: 'matYearsView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatYearsView<D> implements AfterContentInit, OnDestroy {\r\n  /** The date to display in this view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (\r\n      oldActiveDate &&\r\n      this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)\r\n    ) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange = new EventEmitter<D>();\r\n\r\n  /** List of years. */\r\n  _years: Array<{ value: number; enabled: boolean }> = [];\r\n\r\n  /** The selected year. */\r\n  _selectedYear: number | null;\r\n\r\n  /** Scroller subscription. */\r\n  _disposeScroller: Subscription;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private element: ElementRef,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    const lastPosition = { scrolled: 0 };\r\n    this._disposeScroller = fromEvent(this.element.nativeElement, 'scroll')\r\n      .pipe(sampleTime(300), mergeMap((ev: any) => obsOf(this._calculatePoints())))\r\n      .subscribe((pos: any) => this._handleScroll(pos, lastPosition));\r\n\r\n    this._init();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._disposeScroller.unsubscribe();\r\n  }\r\n\r\n  abs(value: number) {\r\n    return Math.abs(value);\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedYear = this._dateAdapter.getYear(this.selected ? this.selected : this.activeDate);\r\n\r\n    const date = this._dateAdapter.createDate(\r\n      this._selectedYear,\r\n      this._dateAdapter.getMonth(this.activeDate),\r\n      this._dateAdapter.getDate(this.activeDate),\r\n      this._dateAdapter.getHours(this.activeDate),\r\n      this._dateAdapter.getMinutes(this.activeDate)\r\n    );\r\n    this._years = [\r\n      {\r\n        value: this._selectedYear,\r\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute')\r\n      }\r\n    ];\r\n\r\n    this._populateYears();\r\n\r\n    setTimeout(() => {\r\n      this.element.nativeElement.scrollTop -=\r\n        this.element.nativeElement.offsetHeight / 2 - YEAR_LINE_HEIGHT / 2;\r\n    }, 20);\r\n  }\r\n\r\n  _populateYears(down = false) {\r\n    if (\r\n      (!down && !this._years[0].enabled) ||\r\n      (down && !this._years[this._years.length - 1].enabled)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n    const selectedDay = this._dateAdapter.getDate(this.activeDate);\r\n    const selectedHours = this._dateAdapter.getHours(this.activeDate);\r\n    const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\r\n\r\n    let scroll = 0;\r\n    for (let y = 1; y <= 10; y++) {\r\n      let year = this._years[this._years.length - 1].value;\r\n      let date = this._dateAdapter.createDate(\r\n        year + 1,\r\n        selectedMonth,\r\n        selectedDay,\r\n        selectedHours,\r\n        selectedMinutes\r\n      );\r\n      this._years.push({\r\n        value: year + 1,\r\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute')\r\n      });\r\n\r\n      year = this._years[0].value;\r\n      date = this._dateAdapter.createDate(\r\n        year - 1,\r\n        selectedMonth,\r\n        selectedDay,\r\n        selectedHours,\r\n        selectedMinutes\r\n      );\r\n      this._years.unshift({\r\n        value: year - 1,\r\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute')\r\n      });\r\n\r\n      scroll += YEAR_LINE_HEIGHT;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.element.nativeElement.scrollTop += down ? YEAR_LINE_HEIGHT : scroll;\r\n    }, 10);\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  _yearSelected(year: number) {\r\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n    const selectedDay = this._dateAdapter.getDate(this.activeDate);\r\n    const selectedHours = this._dateAdapter.getHours(this.activeDate);\r\n    const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\r\n    this.selectedChange.emit(\r\n      this._dateAdapter.createDate(year, selectedMonth, selectedDay, selectedHours, selectedMinutes)\r\n    );\r\n  }\r\n\r\n  _calculatePoints() {\r\n    const el = this.element.nativeElement;\r\n    return {\r\n      height: el.offsetHeight,\r\n      scrolled: el.scrollTop,\r\n      total: el.scrollHeight\r\n    };\r\n  }\r\n\r\n  _handleScroll(position, lastPosition) {\r\n    if (position.scrolled === 0 && lastPosition.scrolled > 0) {\r\n      this._populateYears(false);\r\n    } else if (position.height + position.scrolled === position.total) {\r\n      this._populateYears(true);\r\n    }\r\n    lastPosition.scrolled = position.scrolled;\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO handle @angular/cdk/keycode\r\n    switch (event.keyCode) {\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _focusActiveCell() {}\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { MatClockView } from './clock-view';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { controlActive, slideCalendar } from './datepicker-animations';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\nimport { MatDatepickerIntl } from './datepicker-intl';\r\nimport { MatMonthView } from './month-view';\r\nimport { MatYearView } from './year-view';\r\nimport { MatYearsView } from './years-view';\r\n\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport type MatCalendarView = 'clock' | 'month' | 'year' | 'years';\r\n\r\n/**\r\n * Possible return types.\r\n * @docs-private\r\n */\r\nexport type MatCalendarType = 'date' | 'datetime' | 'time';\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  // styleUrls: ['calendar.css'],\r\n  host: {\r\n    class: 'mat-calendar'\r\n  },\r\n  animations: [controlActive, slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnChanges, OnDestroy {\r\n  private _intlChanges: Subscription;\r\n\r\n  /**\r\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n   * We need to schedule it, rather than do it immediately, because we have to wait\r\n   * for Angular to re-evaluate the view children.\r\n   */\r\n  private _moveFocusOnNextTick = false;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    return this._startAt;\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The type of value handled by the calendar. */\r\n  @Input()\r\n  type: MatCalendarType = 'date';\r\n\r\n  /** Which view the calendar should be started in. */\r\n  @Input()\r\n  startView: MatCalendarView = 'month';\r\n\r\n  /** Current calendar view */\r\n  view: MatCalendarView;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this.activeDate = this._selected;\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input()\r\n  dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  /** Clock interval */\r\n  @Input()\r\n  clockStep = 1;\r\n\r\n  /** Clock hour format */\r\n  @Input()\r\n  twelveHour = false;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output()\r\n  selectedChange = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output()\r\n  _userSelection = new EventEmitter<void>();\r\n\r\n  /** Reference to the current clock view component. */\r\n  @ViewChild(MatClockView)\r\n  clockView: MatClockView<D>;\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(MatMonthView)\r\n  monthView: MatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(MatYearView)\r\n  yearView: MatYearView<D>;\r\n\r\n  /** Reference to the current years view component. */\r\n  @ViewChild(MatYearsView)\r\n  yearsView: MatYearsView<D>;\r\n\r\n  /** Date filter for the month and year views. */\r\n  _dateFilterForViews = (date: D, unit = 'minute') => {\r\n    return (\r\n      !!date &&\r\n      (!this.dateFilter || this.dateFilter(date)) &&\r\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate, unit) >= 0) &&\r\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate, unit) <= 0)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get activeDate(): D {\r\n    return this._clampedActiveDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._clampedActiveDate;\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n    this._isAm = this._dateAdapter.getHours(this._clampedActiveDate) < 12;\r\n\r\n    const unit = this.view === 'year' ? 'year' : 'month';\r\n    const diff = this._dateAdapter.compareDate(oldActiveDate, this._clampedActiveDate, unit);\r\n    if (diff) {\r\n      this._animationDir = diff > 0 ? 'left' : 'right';\r\n    }\r\n\r\n    // update the labels\r\n    const day = this._dateAdapter.getDayOfWeek(this.activeDate);\r\n    let hours = this._dateAdapter.getHours(this.activeDate);\r\n    if (this.twelveHour) {\r\n      hours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\r\n    }\r\n    const minutes = this._dateAdapter.getMinutes(this.activeDate);\r\n\r\n    switch (this.view) {\r\n      case 'year':\r\n        this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);\r\n        break;\r\n      default:\r\n        this._periodButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthYearLabel);\r\n    }\r\n    this._yearButtonText = this._dateAdapter.getYear(this.activeDate).toString();\r\n    this._monthdayButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthDayLabel);\r\n    this._dayButtonText = this._dateAdapter.getDayOfWeekNames('long')[day];\r\n    this._hourButtonText = hours.toString();\r\n    this._minuteButtonText = ('00' + minutes).slice(-2);\r\n\r\n    this.stateChanges.next();\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  get currentView(): MatCalendarView {\r\n    return this._currentView;\r\n  }\r\n  set currentView(value: MatCalendarView) {\r\n    this._currentView = value;\r\n    this._moveFocusOnNextTick = true;\r\n  }\r\n  private _currentView: MatCalendarView;\r\n\r\n  /**\r\n   * Emits whenever there is a state change that the header may need to respond to.\r\n   */\r\n  stateChanges = new Subject<void>();\r\n\r\n  /** Animations handler */\r\n  _animationDir: string;\r\n\r\n  /** Whether the active date is AM or not */\r\n  _isAm: boolean;\r\n\r\n  /** Whether the calendar process the time. */\r\n  _hasTime: boolean;\r\n\r\n  /** Whether the calendar is in hour view. */\r\n  _hourView: boolean = true;\r\n\r\n  /** The label for the calendar header buttons. */\r\n  _yearButtonText: string;\r\n\r\n  _dayButtonText: string;\r\n\r\n  _monthdayButtonText: string;\r\n\r\n  _hourButtonText: string;\r\n\r\n  _minuteButtonText: string;\r\n\r\n  /** The label for the current calendar view. */\r\n  _periodButtonText: string;\r\n\r\n  _periodButtonLabel: string;\r\n\r\n  /** The label for the the previous button. */\r\n  _prevButtonLabel: string;\r\n\r\n  /** The label for the the next button. */\r\n  _nextButtonLabel: string;\r\n\r\n  constructor(\r\n    public _intl: MatDatepickerIntl,\r\n    @Optional() private _dateAdapter: DateAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => {\r\n      changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.activeDate = this.startAt || this._dateAdapter.today();\r\n\r\n    this.changeView(this.startView, false);\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._moveFocusOnNextTick) {\r\n      this._moveFocusOnNextTick = false;\r\n      this.focusActiveCell();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this._hasTime = this.type.indexOf('time') >= 0;\r\n    const change = changes.selected || changes.minDate || changes.maxDate || changes.dateFilter;\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this._getCurrentViewComponent();\r\n      if (view) {\r\n        view._init();\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  changeView(view, focus = true) {\r\n    switch (view) {\r\n      case 'year':\r\n        this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);\r\n        this._periodButtonLabel = this._intl.switchToYearsViewLabel;\r\n        this._nextButtonLabel = this._intl.nextYearLabel;\r\n        this._prevButtonLabel = this._intl.prevYearLabel;\r\n        break;\r\n      case 'month':\r\n        this._periodButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthYearLabel);\r\n        this._periodButtonLabel = this._intl.switchToYearViewLabel;\r\n        this._nextButtonLabel = this._intl.nextMonthLabel;\r\n        this._prevButtonLabel = this._intl.prevMonthLabel;\r\n    }\r\n\r\n    this.view = view;\r\n    if (focus) {\r\n      this._moveFocusOnNextTick = true;\r\n    }\r\n  }\r\n\r\n  focusActiveCell() {\r\n    this._getCurrentViewComponent()._focusActiveCell();\r\n  }\r\n\r\n  _submitClicked(): void {\r\n    this.selectedChange.emit(this.activeDate);\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  _cancelClicked(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles date selection in the clock view. */\r\n  _timeChanged(date: D): void {\r\n    this.selected = date;\r\n  }\r\n\r\n  _timeSelected(date: D): void {\r\n    // if (this.autoOk && this.type === 'time') {\r\n    //   this.selectedChange.emit(date);\r\n    //   this._userSelection.emit();\r\n    // }\r\n    this.selected = date;\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D): void {\r\n    this.selected = date;\r\n    if (this._hasTime) {\r\n      this.changeView('clock');\r\n    }\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelected(month: D): void {\r\n    this.selected = month;\r\n    this.changeView('month');\r\n  }\r\n\r\n  _yearSelected(year: D): void {\r\n    this.selected = year;\r\n    this.changeView('year');\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  _currentPeriodClicked(): void {\r\n    this.changeView(this.view === 'month' ? 'year' : 'years');\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  _previousClicked(): void {\r\n    this._navCalendar(-1);\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  _nextClicked(): void {\r\n    this._navCalendar(1);\r\n  }\r\n\r\n  /** Handles user clicks on the time labels. */\r\n  _showHourView(): void {\r\n    if (this._hasTime) {\r\n      this._hourView = true;\r\n      this.changeView('clock');\r\n    }\r\n  }\r\n\r\n  _showMinuteView(): void {\r\n    this._hourView = false;\r\n    this.changeView('clock');\r\n  }\r\n\r\n  _toggleAmPm(am): void {\r\n    this._isAm = !this._isAm;\r\n    const date = this._dateAdapter.addCalendarHours(this.activeDate, this._isAm ? -12 : 12);\r\n    if (this._dateFilterForViews(date, 'minute')) {\r\n      this.selected = date;\r\n    }\r\n\r\n    // if (this._isAm !== am) {\r\n    //   const date = this._dateAdapter.addCalendarHours(this.activeDate, this._isAm ? 12 : -12);\r\n    //   if (this._dateFilterForViews(date, 'minute')) {\r\n    //     this.selected = date;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  _previousEnabled(): boolean {\r\n    if (!this.minDate) {\r\n      return true;\r\n    }\r\n    return !this.minDate || !this._isSameView(this.activeDate, this.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  _nextEnabled(): boolean {\r\n    return !this.maxDate || !this._isSameView(this.activeDate, this.maxDate);\r\n  }\r\n\r\n  /** Handles calendar diffs. */\r\n  _navCalendar(diff): void {\r\n    switch (this.view) {\r\n      case 'year':\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this.activeDate, diff);\r\n        break;\r\n      case 'month':\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this.activeDate, diff);\r\n        break;\r\n      case 'clock':\r\n        this.activeDate = this._hourView\r\n          ? this._dateAdapter.addCalendarHours(this.activeDate, diff)\r\n          : this._dateAdapter.addCalendarMinutes(this.activeDate, diff);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    switch (this.view) {\r\n      case 'year':\r\n        return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);\r\n      case 'month':\r\n        const monthYear = this._dateFormats.display.monthYearLabel;\r\n        return this._dateAdapter.format(date1, monthYear) === this._dateAdapter.format(date2, monthYear);\r\n      case 'clock':\r\n        const hourMinute = this._dateFormats.display.timeLabel;\r\n        return this._dateAdapter.format(date1, hourMinute) === this._dateAdapter.format(date2, hourMinute);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n  /** Returns the component instance that corresponds to the current calendar view. */\r\n  private _getCurrentViewComponent() {\r\n    return this.clockView || this.monthView || this.yearView || this.yearsView;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  ScrollStrategy\r\n} from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { take, filter } from 'rxjs/operators';\r\nimport { merge, Subject, Subscription } from 'rxjs';\r\nimport { MatCalendar, MatCalendarType, MatCalendarView } from './calendar';\r\nimport { DateAdapter } from './core/index';\r\nimport { fadeInCalendar, transformPanel } from './datepicker-animations';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\nimport { MatDatepickerInput } from './datepicker-input';\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\r\n  'mat-datepicker-scroll-strategy'\r\n);\r\n\r\n/** @docs-private */\r\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY\r\n};\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  // styleUrls: ['datepicker-content.scss'],\r\n  host: {\r\n    class: 'mat-datepicker-content',\r\n    '[@transformPanel]': '\"enter\"',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n    '(keydown)': '_handleKeydown($event)'\r\n  },\r\n  animations: [transformPanel, fadeInCalendar],\r\n  exportAs: 'matDatepickerContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatDatepickerContent<D> implements AfterViewInit {\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\r\n\r\n  /** Reference to the datepicker that created the overlay. */\r\n  datepicker: MatDatepicker<D>;\r\n\r\n  /** Whether the datepicker is above or below the input. */\r\n  _isAbove: boolean;\r\n\r\n  ngAfterViewInit() {\r\n    this._calendar.focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * Handles keydown event on datepicker content.\r\n   * @param event The event.\r\n   */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ESCAPE) {\r\n      this.datepicker.close();\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  selector: 'mat-datepicker',\r\n  template: '',\r\n  exportAs: 'matDatepicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatDatepicker<D> implements OnInit, OnDestroy {\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The type of value handled by the calendar. */\r\n  @Input() type: MatCalendarType = 'date';\r\n\r\n  /** Which view the calendar should be started in. */\r\n  @Input() startView: MatCalendarView = 'month';\r\n\r\n  /** Clock interval */\r\n  @Input() clockStep = 1;\r\n\r\n  /** Clock hour format */\r\n  @Input() twelveHour = true;\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean {\r\n    return this._touchUi;\r\n  }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = true;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this._datepickerInput\r\n      ? this._datepickerInput.disabled\r\n      : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Whether the datepicker is connected to a date type one */\r\n  @Input()\r\n  set matDatepicker(value: MatDatepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n    }\r\n  }\r\n  _datepicker: MatDatepicker<D>;\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean {\r\n    return this._opened;\r\n  }\r\n  set opened(value: boolean) {\r\n    value ? this.open() : this.close();\r\n  }\r\n  private _opened = false;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null {\r\n    return this._validSelected;\r\n  }\r\n  set _selected(value: D | null) {\r\n    const valid = this._dateAdapter.clampDate(value, this._minDate, this._maxDate);\r\n    if (valid) {\r\n      // round the minutes\r\n      let minutes = this._dateAdapter.getMinutes(valid);\r\n      minutes = Math.round(minutes / this.clockStep) * this.clockStep;\r\n      this._dateAdapter.setMinutes(valid, minutes);\r\n      this._dateAdapter.setSeconds(valid, 0);\r\n    }\r\n    this._validSelected = valid;\r\n  }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null, unit?: string) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\r\n\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  _datepickerInput: MatDatepickerInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly _disabledChange = new Subject<boolean>();\r\n\r\n  /** Emits new selected date when selected date changes. */\r\n  readonly _selectedChanged = new Subject<D>();\r\n\r\n  constructor(\r\n    private _dialog: MatDialog,\r\n    private _overlay: Overlay,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional()\r\n    @Inject(DOCUMENT)\r\n    private _document: any\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // prevent inconsistent type and view\r\n    switch (this.type) {\r\n      case 'date':\r\n        this.startView = this.startView !== 'clock' ? this.startView : 'month';\r\n        break;\r\n      case 'time':\r\n        this.startView = 'clock';\r\n        break;\r\n      default:\r\n        this.startView = this.startView;\r\n    }\r\n\r\n    if (this._datepicker) {\r\n      this._datepicker._selectedChanged.subscribe((date: D) => {\r\n        const value = this._dateAdapter.createDate(\r\n          this._dateAdapter.getYear(date),\r\n          this._dateAdapter.getMonth(date),\r\n          this._dateAdapter.getDate(date),\r\n          this._selected ? this._dateAdapter.getHours(this._selected) : 0,\r\n          this._selected ? this._dateAdapter.getMinutes(this._selected) : 0\r\n        );\r\n        // update the corresponding changes\r\n        this._select(value);\r\n      });\r\n    }\r\n\r\n    // refresh the input\r\n    this._datepickerInput.value = this._selected;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._selectedChanged.complete();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /** Selects the given date */\r\n  _select(date: D): void {\r\n    const oldValue = this._selected;\r\n    this._selected = date;\r\n    const unit = this.type.indexOf('time') >= 0 ? 'minute' : 'day';\r\n    if (!this._dateAdapter.sameDate(oldValue, this._selected, unit)) {\r\n      this._selectedChanged.next(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: MatDatepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('A MatDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription = this._datepickerInput._valueChange.subscribe(\r\n      (value: D | null) =>\r\n        (this._selected =\r\n          value && this._dateAdapter.isDateInstance(value) ? this._dateAdapter.clone(value) : null)\r\n    );\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  reset(value?: D | null) {\r\n    this._datepickerInput.reset(value);\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (\r\n      this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function'\r\n    ) {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog'\r\n    });\r\n\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(\r\n        MatDatepickerContent,\r\n        this._viewContainerRef\r\n      );\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\r\n      this._popupComponentRef.instance.datepicker = this;\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable\r\n        .asObservable()\r\n        .pipe(take(1))\r\n        .subscribe(() => {\r\n          this._popupRef.updatePosition();\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup'\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(\r\n        filter(event => {\r\n          // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n          return (\r\n            event.keyCode === ESCAPE ||\r\n            (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW)\r\n          );\r\n        })\r\n      )\r\n    ).subscribe(() => this.close());\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay\r\n      .position()\r\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\r\n      .withTransformOriginOn('.mat-datepicker-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withPush(false)\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators\r\n} from '@angular/forms';\r\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { Subscription } from 'rxjs';\r\nimport { DateAdapter } from './core/index';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { MatDatepicker } from './datepicker';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport class MatDatepickerInputEvent<D> {\r\n  /** The new value for the target datepicker input. */\r\n  value: D | null;\r\n\r\n  constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    public target: MatDatepickerInput<D>,\r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    public targetElement: HTMLElement\r\n  ) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n/** Directive used to connect an input to a MatDatepicker. */\r\n@Directive({\r\n  selector: 'input[matDatepicker]',\r\n  providers: [\r\n    MAT_DATEPICKER_VALUE_ACCESSOR,\r\n    MAT_DATEPICKER_VALIDATORS,\r\n    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput }\r\n  ],\r\n  host: {\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[attr.disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onBlur()',\r\n    '(keydown)': '_onKeydown($event)'\r\n  },\r\n  exportAs: 'matDatepickerInput'\r\n})\r\nexport class MatDatepickerInput<D>\r\n  implements AfterContentInit, ControlValueAccessor, OnDestroy, Validator {\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set matDatepicker(value: MatDatepicker<D>) {\r\n    this.registerDatepicker(value);\r\n  }\r\n  _datepicker: MatDatepicker<D>;\r\n\r\n  private registerDatepicker(value: MatDatepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\r\n\r\n  /** Function that can be used to filter out dates within the datepicker. */\r\n  @Input()\r\n  set matDatepickerFilter(filter: (date: D | null, unit?: string) => boolean) {\r\n    this._dateFilter = filter;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null, unit?: string) => boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null {\r\n    return this._value;\r\n  }\r\n  set value(value: D | null) {\r\n    value = this._dateAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n\r\n    const oldDate = this.value;\r\n    this._value = value;\r\n    this._formatValue(value);\r\n\r\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n  }\r\n  private _value: D | null;\r\n  private _firstValue: D | null;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null {\r\n    return this._min;\r\n  }\r\n  set min(value: D | null) {\r\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _min: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null {\r\n    return this._max;\r\n  }\r\n  set max(value: D | null) {\r\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _max: D | null;\r\n\r\n  /** Whether the datepicker-input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n    const element = this._elementRef.nativeElement;\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n\r\n    // We need to null check the `blur` method, because it's undefined during SSR.\r\n    if (newValue && element.blur) {\r\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n      // is problematic, because it would mean that it triggers another change detection cycle,\r\n      // which then causes a changed after checked error if the input element was focused before.\r\n      element.blur();\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<D | null>();\r\n\r\n  /** Emits when the disabled state has changed */\r\n  _disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {};\r\n\r\n  private _cvaOnChange: (value: any) => void = () => {};\r\n\r\n  private _validatorOnChange = () => {};\r\n\r\n  private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n  private _localeSubscription = Subscription.EMPTY;\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid\r\n      ? null\r\n      : { matDatepickerParse: { text: this._elementRef.nativeElement.value } };\r\n  };\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this.min || !controlValue || this._dateAdapter.compareDate(this.min, controlValue) <= 0\r\n      ? null\r\n      : { matDatepickerMin: { min: this.min, actual: controlValue } };\r\n  };\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this.max || !controlValue || this._dateAdapter.compareDate(this.max, controlValue) >= 0\r\n      ? null\r\n      : { matDatepickerMax: { max: this.max, actual: controlValue } };\r\n  };\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue)\r\n      ? null\r\n      : { matDatepickerFilter: true };\r\n  };\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn | null = Validators.compose([\r\n    this._parseValidator,\r\n    this._minValidator,\r\n    this._maxValidator,\r\n    this._filterValidator\r\n  ]);\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid = false;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats,\r\n    @Optional() private _formField: MatFormField\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = this._dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n\r\n    if (this._datepicker) {\r\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\r\n        this.value = selected;\r\n        this._cvaOnChange(selected);\r\n        this._onTouched();\r\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  reset(value?: D | null): void {\r\n    this.value = value !== undefined ? value : this._firstValue;\r\n    this._cvaOnChange(this._value);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\r\n   */\r\n  getPopupConnectionElementRef(): ElementRef {\r\n    return this.getConnectedOverlayOrigin();\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  writeValue(value: D): void {\r\n    if (this._firstValue === undefined) {\r\n      this._firstValue = value;\r\n    }\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    const type = this._datepicker.type;\r\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse[type]);\r\n    this._lastValueValid = (!value && !date) || this._dateAdapter.isValid(date);\r\n    date = this._getValidDateOrNull(date);\r\n\r\n    if (!this._dateAdapter.sameDate(date, this._value)) {\r\n      this._value = date;\r\n      this._valueChange.emit(date);\r\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n    // update on every (input) change\r\n    this._cvaOnChange(date);\r\n  }\r\n\r\n  _onChange() {\r\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /** Handles blur events on the input. */\r\n  _onBlur() {\r\n    // Reformat the input only if we have a valid value.\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n\r\n    this._onTouched();\r\n  }\r\n\r\n  /** Formats a value and sets it on the input element. */\r\n  private _formatValue(value: D | null) {\r\n    const type = this._datepicker.type;\r\n    this._elementRef.nativeElement.value = value\r\n      ? this._dateAdapter.format(value, this._dateFormats.display[type])\r\n      : '';\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { merge, of as obsOf, Subscription } from 'rxjs';\r\nimport { MatDatepicker } from './datepicker';\r\nimport { MatDatepickerIntl } from './datepicker-intl';\r\n\r\n/** Can be used to override the icon of a `matDatepickerToggle`. */\r\n@Directive({\r\n  selector: '[matDatepickerToggleIcon]'\r\n})\r\nexport class MatDatepickerToggleIcon {}\r\n\r\n@Component({\r\n  selector: 'mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  // styleUrls: ['datepicker-toggle.css'],\r\n  host: {\r\n    class: 'mat-datepicker-toggle',\r\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened'\r\n  },\r\n  exportAs: 'matDatepickerToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  /** Datepicker instance that the button will toggle. */\r\n  @Input('for') datepicker: MatDatepicker<D>;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\r\n\r\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  _open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : obsOf();\r\n\r\n    const inputDisabled =\r\n      this.datepicker && this.datepicker._datepickerInput\r\n        ? this.datepicker._datepickerInput._disabledChange\r\n        : obsOf();\r\n\r\n    const datepickerToggled = this.datepicker\r\n      ? merge(this.datepicker.openedStream, this.datepicker.closedStream)\r\n      : obsOf();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      datepickerDisabled,\r\n      inputDisabled,\r\n      datepickerToggled\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCalendar } from './calendar';\r\nimport { MatCalendarBody } from './calendar-body';\r\nimport { MatClockView } from './clock-view';\r\nimport {\r\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n  MatDatepicker,\r\n  MatDatepickerContent\r\n} from './datepicker';\r\nimport { MatDatepickerInput } from './datepicker-input';\r\nimport { MatDatepickerIntl } from './datepicker-intl';\r\nimport { MatDatepickerToggle, MatDatepickerToggleIcon } from './datepicker-toggle';\r\nimport { MatMonthView } from './month-view';\r\nimport { MatYearView } from './year-view';\r\nimport { MatYearsView } from './years-view';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatIconModule,\r\n    OverlayModule,\r\n    A11yModule\r\n  ],\r\n  exports: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatClockView,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatYearsView\r\n  ],\r\n  declarations: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatClockView,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatYearsView\r\n  ],\r\n  providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\r\n  entryComponents: [MatDatepickerContent]\r\n})\r\nexport class MatDatepickerModule {}\r\n"]}