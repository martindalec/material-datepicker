{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://@martindalec/datepicker/core/date-adapter.ts","ng://@martindalec/datepicker/core/date-formats.ts","ng://@martindalec/datepicker/core/native-date-adapter.ts","ng://@martindalec/datepicker/core/native-date-formats.ts","ng://@martindalec/datepicker/core/index.ts","ng://@martindalec/datepicker/moment-adapter/moment-date-adapter.ts","ng://@martindalec/datepicker/moment-adapter/moment-date-formats.ts","ng://@martindalec/datepicker/moment-adapter/index.ts","ng://@martindalec/datepicker/datepicker-errors.ts","ng://@martindalec/datepicker/clock-view.ts","ng://@martindalec/datepicker/datepicker-animations.ts","ng://@martindalec/datepicker/datepicker-intl.ts","ng://@martindalec/datepicker/calendar-body.ts","ng://@martindalec/datepicker/month-view.ts","ng://@martindalec/datepicker/year-view.ts","ng://@martindalec/datepicker/years-view.ts","ng://@martindalec/datepicker/calendar.ts","ng://@martindalec/datepicker/datepicker.ts","ng://@martindalec/datepicker/datepicker-input.ts","ng://@martindalec/datepicker/datepicker-toggle.ts","ng://@martindalec/datepicker/datepicker-module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","MAT_DATE_LOCALE","InjectionToken","providedIn","factory","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","provide","useExisting","DateAdapter","_localeChanges","Subject","defineProperty","deserialize","value","isDateInstance","isValid","invalid","setLocale","locale","next","compareDate","first","second","unit","f","getYear","toString","indexOf","Number","concat","getMonth","slice","getDate","getHours","getMinutes","sameDate","clampDate","date","min","max","MAT_DATE_FORMATS","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","long","short","narrow","DEFAULT_DATE_NAMES","range","String","DEFAULT_HOUR_NAMES","DEFAULT_MINUTE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","valueFunction","valuesArray","NativeDateAdapter","_super","platform","matDateLocale","_this","useUtcForDisplay","TRIDENT","_clampDate","EDGE","getFullYear","setHours","setMinutes","setSeconds","ms","getDayOfWeek","getDay","getMonthNames","style","dtf_1","DateTimeFormat","month","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","dtf_2","day","getHourNames","dtf_3","hour","format","getMinuteNames","dtf_4","minute","getDayOfWeekNames","dtf_5","weekday","getYearName","dtf","year","getFirstDayOfWeek","getNumDaysInMonth","_createDateWithOverflow","clone","createDate","hours","minutes","Error","result","today","parse","displayFormat","setFullYear","Math","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","addCalendarHours","addCalendarMinutes","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","obj","isNaN","getTime","NaN","str","replace","UTC","getSeconds","getMilliseconds","Injectable","Platform","Optional","type","Inject","args","MAT_NATIVE_DATE_FORMATS","datetime","time","display","dateA11yLabel","monthDayLabel","monthDayA11yLabel","monthYearLabel","monthYearA11yLabel","timeLabel","NativeDateModule","NgModule","imports","PlatformModule","providers","useClass","MatNativeDateModule","useValue","ɵ0$1","moment","momentNs","MomentDateAdapter","dateLocale","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","shortMonths","monthsShort","dates","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","seconds","milliseconds","daysInMonth","parseFormat","add","ISO_8601","isMoment","MAT_MOMENT_DATE_FORMATS","MomentDateModule","deps","MatMomentDateModule","ɵ0$2","createMissingDateImplError","provider","MatClockView","_changeDetectorRef","_element","_dateAdapter","_dateFormats","clockStep","twelveHour","hourView","selectedTime","EventEmitter","selectedChange","changeView","_hours","_minutes","mouseMoveListener","event","_handleMousemove","mouseUpListener","_handleMouseup","_activeDate","oldActiveDate","validDate","_getValidDateOrNull","minDate","maxDate","_init","_selected","_minDate","_maxDate","_selectedHour","activeDate","_selectedMinute","radius","deg","round","transform","height","margin-top","ngAfterContentInit","_handleMousedown","setTime","document","addEventListener","preventDefault","removeEventListener","hourNames","minuteNames","_anteMeridian","radian","PI","push","displayValue","enabled","dateFilter","top","cos","left","sin","fontSize","markForCheck","trigger","nativeElement","triggerRect","getBoundingClientRect","width","offsetWidth","offsetHeight","pageX","undefined","touches","pageY","x","window","pageXOffset","y","pageYOffset","z","sqrt","outer","atan2","emit","_focusActiveCell","Component","selector","template","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","role","(mousedown)","preserveWhitespaces","ChangeDetectorRef","ElementRef","decorators","Input","Output","slideCalendar","transition","animate","keyframes","offset","opacity","controlActive","transformPanel","state","group","query","animateChild","fadeInCalendar","MatDatepickerIntl","changes","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","setToAMLabel","setToPMLabel","switchToMinuteViewLabel","switchToHourViewLabel","switchToMonthViewLabel","switchToYearViewLabel","switchToYearsViewLabel","buttonSubmitText","buttonSubmitLabel","buttonCancelText","buttonCancelLabel","ariaLabel","MatCalendarBody","_elementRef","_ngZone","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","runOutsideAngular","onStable","asObservable","pipe","take","subscribe","querySelector","focus","class","attr.aria-readonly","NgZone","MatMonthView","_dir","_userSelection","activeDateChange","narrowWeekdays","map","_weekdays","_activeValue","_getDateInCurrentMonth","_hasSameMonthAndYear","_selectedDate","_dateSelected","selectedYear","selectedMonth","selectedHours","selectedMinutes","selectedDate","_handleCalendarBodyKeydown","isRtl","_isRtl","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","END","PAGE_UP","altKey","PAGE_DOWN","ENTER","selected","_todayDate","_monthLabel","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","_createWeekCells","_matCalendarBody","dateNames","_weeks","_shouldEnableDate","MatCalendarCell","d1","d2","animations","Directionality","ViewChild","MatYearView","_selectedMonth","_getMonthInCurrentYear","_monthSelected","selectedDay","_todayMonth","_yearLabel","monthNames","_months","row","_createCellForMonth","monthName","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","MatYearsView","element","_years","_selectedYear","lastPosition","scrolled","_disposeScroller","fromEvent","sampleTime","mergeMap","ev","obsOf","_calculatePoints","pos","_handleScroll","ngOnDestroy","unsubscribe","abs","_populateYears","setTimeout","scrollTop","YEAR_LINE_HEIGHT","down","scroll","unshift","_yearSelected","el","total","scrollHeight","position","MatCalendar","_intl","changeDetectorRef","_moveFocusOnNextTick","startView","_dateFilterForViews","stateChanges","_hourView","_intlChanges","_startAt","_clampedActiveDate","_isAm","view","diff","_animationDir","_periodButtonText","_yearButtonText","_monthdayButtonText","_dayButtonText","_hourButtonText","_minuteButtonText","_currentView","startAt","ngAfterViewChecked","focusActiveCell","complete","ngOnChanges","_hasTime","change","firstChange","_getCurrentViewComponent","_periodButtonLabel","_nextButtonLabel","_prevButtonLabel","_submitClicked","_cancelClicked","_timeChanged","_timeSelected","_currentPeriodClicked","_previousClicked","_navCalendar","_nextClicked","_showHourView","_showMinuteView","_toggleAmPm","am","_previousEnabled","_isSameView","_nextEnabled","date1","date2","monthYear","hourMinute","clockView","monthView","yearView","yearsView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","Overlay","useFactory","MatDatepickerContent","ngAfterViewInit","_calendar","_handleKeydown","ESCAPE","datepicker","close","stopPropagation","[@transformPanel]","[class.mat-datepicker-content-touch]","(keydown)","MatDatepicker","_dialog","_overlay","_viewContainerRef","_scrollStrategy","_document","_touchUi","openedStream","closedStream","_opened","id","_validSelected","_focusedElementBeforeOpen","_inputSubscription","Subscription","EMPTY","_disabledChange","_selectedChanged","_datepickerInput","coerceBooleanProperty","_disabled","disabled","newValue","_datepicker","open","valid","_dateFilter","ngOnInit","_select","_popupRef","dispose","_popupComponentRef","oldValue","_registerInput","input","_valueChange","activeElement","touchUi","_openAsDialog","_openAsPopup","reset","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","direction","viewContainerRef","panelClass","afterClosed","componentInstance","ComponentPortal","_createPopup","attach","instance","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","scrollStrategy","merge","backdropClick","detachments","keydownEvents","filter","flexibleConnectedTo","getPopupConnectionElementRef","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPush","withPositions","originX","originY","overlayX","overlayY","MatDialog","ViewContainerRef","DOCUMENT","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","target","targetElement","_formField","dateChange","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","matDatepickerFilter","_validator","Validators","compose","registerDatepicker","_value","oldDate","_formatValue","_min","_max","blur","localeChanges","MatDatepickerInputEvent","_firstValue","registerOnValidatorChange","fn","validate","c","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","_onInput","_onChange","_onBlur","Directive","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[attr.disabled]","(input)","(change)","(blur)","MatFormField","MatDatepickerToggleIcon","MatDatepickerToggle","_stateChanges","_watchStateChanges","_open","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","ContentChild","MatDatepickerModule","CommonModule","MatButtonModule","MatDialogModule","MatIconModule","OverlayModule","A11yModule","exports","declarations","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { inject, InjectionToken, LOCALE_ID } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n/** InjectionToken for datepicker that can be used to override default locale code. */\r\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\r\n  providedIn: 'root',\r\n  factory: MAT_DATE_LOCALE_FACTORY\r\n});\r\n\r\n/** @docs-private */\r\nexport function MAT_DATE_LOCALE_FACTORY(): string {\r\n  return inject(LOCALE_ID);\r\n}\r\n\r\n/**\r\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\r\n * If you are importing and providing this in your code you can simply remove it.\r\n * @deprecated\r\n * @deletion-target 7.0.0\r\n */\r\nexport const MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID };\r\n\r\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\r\nexport abstract class DateAdapter<D> {\r\n  /** The locale to use for all dates. */\r\n  protected locale: any;\r\n\r\n  /** A stream that emits when the locale changes. */\r\n  get localeChanges(): Observable<void> {\r\n    return this._localeChanges;\r\n  }\r\n  protected _localeChanges = new Subject<void>();\r\n\r\n  /**\r\n   * Gets the year component of the given date.\r\n   * @param date The date to extract the year from.\r\n   * @returns The year component.\r\n   */\r\n  abstract getYear(date: D): number;\r\n\r\n  /**\r\n   * Gets the month component of the given date.\r\n   * @param date The date to extract the month from.\r\n   * @returns The month component (0-indexed, 0 = January).\r\n   */\r\n  abstract getMonth(date: D): number;\r\n\r\n  abstract getHours(date: D): number;\r\n\r\n  abstract setHours(date: D, value: number): void;\r\n\r\n  abstract getMinutes(date: D): number;\r\n\r\n  abstract setMinutes(date: D, value: number): void;\r\n\r\n  abstract setSeconds(date: D, value: number, ms?: number): void;\r\n\r\n  /**\r\n   * Gets the date of the month component of the given date.\r\n   * @param date The date to extract the date of the month from.\r\n   * @returns The month component (1-indexed, 1 = first of month).\r\n   */\r\n  abstract getDate(date: D): number;\r\n\r\n  /**\r\n   * Gets the day of the week component of the given date.\r\n   * @param date The date to extract the day of the week from.\r\n   * @returns The month component (0-indexed, 0 = Sunday).\r\n   */\r\n  abstract getDayOfWeek(date: D): number;\r\n\r\n  /**\r\n   * Gets a list of names for the months.\r\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\r\n   * @returns An ordered list of all month names, starting with January.\r\n   */\r\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\r\n\r\n  /**\r\n   * Gets a list of names for the dates of the month.\r\n   * @returns An ordered list of all date of the month names, starting with '1'.\r\n   */\r\n  abstract getDateNames(): string[];\r\n\r\n  abstract getHourNames(): string[];\r\n\r\n  abstract getMinuteNames(): string[];\r\n\r\n  /**\r\n   * Gets a list of names for the days of the week.\r\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\r\n   * @returns An ordered list of all weekday names, starting with Sunday.\r\n   */\r\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\r\n\r\n  /**\r\n   * Gets the name for the year of the given date.\r\n   * @param date The date to get the year name for.\r\n   * @returns The name of the given year (e.g. '2017').\r\n   */\r\n  abstract getYearName(date: D): string;\r\n\r\n  /**\r\n   * Gets the first day of the week.\r\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\r\n   */\r\n  abstract getFirstDayOfWeek(): number;\r\n\r\n  /**\r\n   * Gets the number of days in the month of the given date.\r\n   * @param date The date whose month should be checked.\r\n   * @returns The number of days in the month of the given date.\r\n   */\r\n  abstract getNumDaysInMonth(date: D): number;\r\n\r\n  /**\r\n   * Clones the given date.\r\n   * @param date The date to clone\r\n   * @returns A new date equal to the given date.\r\n   */\r\n  abstract clone(date: D): D;\r\n\r\n  /**\r\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\r\n   * month and date.\r\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\r\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\r\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\r\n   * @returns The new date, or null if invalid.\r\n   */\r\n  abstract createDate(year: number, month: number, date: number, hours?: number, minutes?: number): D;\r\n\r\n  /**\r\n   * Gets today's date.\r\n   * @returns Today's date.\r\n   */\r\n  abstract today(): D;\r\n\r\n  /**\r\n   * Parses a date from a user-provided value.\r\n   * @param value The value to parse.\r\n   * @param parseFormat The expected format of the value being parsed\r\n   *     (type is implementation-dependent).\r\n   * @returns The parsed date.\r\n   */\r\n  abstract parse(value: any, parseFormat: any): D | null;\r\n\r\n  /**\r\n   * Formats a date as a string according to the given format.\r\n   * @param date The value to format.\r\n   * @param displayFormat The format to use to display the date as a string.\r\n   * @returns The formatted date string.\r\n   */\r\n  abstract format(date: D, displayFormat: any): string;\r\n\r\n  /**\r\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\r\n   * calendar for each year and then finding the closest date in the new month. For example when\r\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\r\n   * @param date The date to add years to.\r\n   * @param years The number of years to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of years added.\r\n   */\r\n  abstract addCalendarYears(date: D, years: number): D;\r\n\r\n  /**\r\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\r\n   * calendar for each month and then finding the closest date in the new month. For example when\r\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\r\n   * @param date The date to add months to.\r\n   * @param months The number of months to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of months added.\r\n   */\r\n  abstract addCalendarMonths(date: D, months: number): D;\r\n\r\n  /**\r\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\r\n   * calendar for each day.\r\n   * @param date The date to add days to.\r\n   * @param days The number of days to add (may be negative).\r\n   * @returns A new date equal to the given one with the specified number of days added.\r\n   */\r\n  abstract addCalendarDays(date: D, days: number): D;\r\n\r\n  abstract addCalendarHours(date: D, hours: number): D;\r\n\r\n  abstract addCalendarMinutes(date: D, minutes: number): D;\r\n\r\n  /**\r\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\r\n   * This method is used to generate date strings that are compatible with native HTML attributes\r\n   * such as the `min` or `max` attribute of an `<input>`.\r\n   * @param date The date to get the ISO date string for.\r\n   * @returns The ISO date string date string.\r\n   */\r\n  abstract toIso8601(date: D): string;\r\n\r\n  /**\r\n   * Checks whether the given object is considered a date instance by this DateAdapter.\r\n   * @param obj The object to check\r\n   * @returns Whether the object is a date instance.\r\n   */\r\n  abstract isDateInstance(obj: any): boolean;\r\n\r\n  /**\r\n   * Checks whether the given date is valid.\r\n   * @param date The date to check.\r\n   * @returns Whether the date is valid.\r\n   */\r\n  abstract isValid(date: D): boolean;\r\n\r\n  /**\r\n   * Gets date instance that is not valid.\r\n   * @returns An invalid date.\r\n   */\r\n  abstract invalid(): D;\r\n\r\n  /**\r\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\r\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\r\n   * string). The default implementation does not allow any deserialization, it simply checks that\r\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\r\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\r\n   * support passing values from your backend directly to these properties by overriding this method\r\n   * to also deserialize the format used by your backend.\r\n   * @param value The value to be deserialized into a date object.\r\n   * @returns The deserialized date object, either a valid date, null if the value can be\r\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\r\n   */\r\n  deserialize(value: any): D | null {\r\n    if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\r\n      return value;\r\n    }\r\n    return this.invalid();\r\n  }\r\n\r\n  /**\r\n   * Sets the locale used for all dates.\r\n   * @param locale The new locale.\r\n   */\r\n  setLocale(locale: any) {\r\n    this.locale = locale;\r\n    this._localeChanges.next();\r\n  }\r\n\r\n  /**\r\n   * Compares two dates.\r\n   * @param first The first date to compare.\r\n   * @param second The second date to compare.\r\n   * @param unit Unit deep of the comparision.\r\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n   *     a number greater than 0 if the first date is later.\r\n   */\r\n  compareDate(first: D, second: D, unit = 'minute'): number {\r\n    let f = this.getYear(first).toString();\r\n    let s = this.getYear(second).toString();\r\n\r\n    if (['y', 'year', 'years'].indexOf(unit) >= 0) {\r\n      return Number(f) - Number(s);\r\n    } else {\r\n      f = f.concat(('00' + this.getMonth(first)).slice(-2));\r\n      s = s.concat(('00' + this.getMonth(second)).slice(-2));\r\n    }\r\n\r\n    if (['M', 'month', 'months'].indexOf(unit) >= 0) {\r\n      return Number(f) - Number(s);\r\n    } else {\r\n      f = f.concat(('00' + this.getDate(first)).slice(-2));\r\n      s = s.concat(('00' + this.getDate(second)).slice(-2));\r\n    }\r\n\r\n    if (['d', 'day', 'days'].indexOf(unit) >= 0) {\r\n      return Number(f) - Number(s);\r\n    } else {\r\n      f = f.concat(('00' + this.getHours(first)).slice(-2));\r\n      s = s.concat(('00' + this.getHours(second)).slice(-2));\r\n    }\r\n\r\n    if (['h', 'hour', 'hours'].indexOf(unit) >= 0) {\r\n      return Number(f) - Number(s);\r\n    } else {\r\n      f = f.concat(('00' + this.getMinutes(first)).slice(-2));\r\n      s = s.concat(('00' + this.getMinutes(second)).slice(-2));\r\n    }\r\n\r\n    return Number(f) - Number(s);\r\n  }\r\n\r\n  /**\r\n   * Checks if two dates are equal.\r\n   * @param first The first date to check.\r\n   * @param second The second date to check.\r\n   * @param unit Unit deep of the comparision.\r\n   * @returns Whether the two dates are equal.\r\n   *     Null dates are considered equal to other null dates.\r\n   */\r\n  sameDate(first: D | null, second: D | null, unit = 'minute'): boolean {\r\n    return first && second ? !this.compareDate(first, second, unit) : first === second;\r\n  }\r\n\r\n  /**\r\n   * Clamp the given date between min and max dates.\r\n   * @param date The date to clamp.\r\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\r\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\r\n   * @param unit Unit deep of the comparision.\r\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r\n   *     otherwise `date`.\r\n   */\r\n  clampDate(date: D | null, min?: D | null, max?: D | null, unit = 'minute'): D | null {\r\n    if (!date) {\r\n      return null;\r\n    }\r\n    if (min && this.compareDate(date, min, unit) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDate(date, max, unit) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nexport interface MatDateFormats {\r\n  parse: {\r\n    date: any;\r\n    datetime: any;\r\n    time: any;\r\n  };\r\n  display: {\r\n    date: any;\r\n    datetime: any;\r\n    time: any;\r\n    dateA11yLabel: any;\r\n    monthDayLabel: any;\r\n    monthDayA11yLabel: any;\r\n    monthYearLabel: any;\r\n    monthYearA11yLabel: any;\r\n    timeLabel: any;\r\n  };\r\n}\r\n\r\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_LOCALE } from './date-adapter';\r\n\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nconst SUPPORTS_INTL_API = typeof Intl !== 'undefined';\r\n\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n  long: [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n  ],\r\n  short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n\r\n/** The default hour names to use if Intl API is not available. */\r\nconst DEFAULT_HOUR_NAMES = range(24, String);\r\n\r\n/** The default minute names to use if Intl API is not available. */\r\nconst DEFAULT_MINUTE_NAMES = range(60, String);\r\n\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\n@Injectable()\r\nexport class NativeDateAdapter extends DateAdapter<Date> {\r\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n  private readonly _clampDate: boolean;\r\n\r\n  /**\r\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n   * will produce `'8/13/1800'`.\r\n   *\r\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n   * getting the string representation of a Date object from it's utc representation. We're keeping\r\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n   * though.\r\n   */\r\n  useUtcForDisplay: boolean = true;\r\n\r\n  constructor(\r\n    platform: Platform,\r\n    @Optional()\r\n    @Inject(MAT_DATE_LOCALE)\r\n    matDateLocale: string\r\n  ) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n\r\n    // IE does its own time zone correction, so we disable this on IE.\r\n    this.useUtcForDisplay = !platform.TRIDENT;\r\n    this._clampDate = platform.TRIDENT || platform.EDGE;\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return date.getDate();\r\n  }\r\n\r\n  getHours(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n\r\n  setHours(date: Date, value: number): void {\r\n    date.setHours(value);\r\n  }\r\n\r\n  getMinutes(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n\r\n  setMinutes(date: Date, value: number): void {\r\n    date.setMinutes(value);\r\n  }\r\n\r\n  setSeconds(date: Date, value: number, ms?: number): void {\r\n    date.setSeconds(value, ms);\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\r\n      return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\r\n      return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\r\n\r\n  getHourNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { hour: 'numeric', timeZone: 'utc' });\r\n      return range(24, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, 0, 0, i))));\r\n    }\r\n    return DEFAULT_HOUR_NAMES;\r\n  }\r\n\r\n  getMinuteNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { minute: 'numeric', timeZone: 'utc' });\r\n      return range(60, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, 0, 0, 0, i))));\r\n    }\r\n    return DEFAULT_MINUTE_NAMES;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\r\n      return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return this.createDate(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date),\r\n      this.getHours(date),\r\n      this.getMinutes(date)\r\n    );\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number, hours?: number, minutes?: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    const result = this._createDateWithOverflow(year, month, date, hours, minutes);\r\n\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() !== month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value === 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n\r\n    if (SUPPORTS_INTL_API) {\r\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n        date = this.clone(date);\r\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n      }\r\n\r\n      displayFormat = { ...displayFormat, timeZone: 'utc' };\r\n\r\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date) + months,\r\n      this.getDate(date),\r\n      this.getHours(date),\r\n      this.getMinutes(date)\r\n    );\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date) + days,\r\n      this.getHours(date),\r\n      this.getMinutes(date)\r\n    );\r\n  }\r\n\r\n  addCalendarHours(date: Date, hours: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date),\r\n      this.getHours(date) + hours,\r\n      this.getMinutes(date)\r\n    );\r\n  }\r\n\r\n  addCalendarMinutes(date: Date, minutes: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date),\r\n      this.getHours(date),\r\n      this.getMinutes(date) + minutes\r\n    );\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n   * invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Date | null {\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n      // string is the right format first.\r\n      if (ISO_8601_REGEX.test(value)) {\r\n        let date = new Date(value);\r\n        if (this.isValid(date)) {\r\n          return date;\r\n        }\r\n      }\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number, hours?: number, minutes?: number) {\r\n    const result = new Date(year, month, date, hours, minutes, 0);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * When converting Date object to string, javascript built-in functions may return wrong\r\n   * results because it applies its internal DST rules. The DST rules around the world change\r\n   * very frequently, and the current valid rule is not always valid in previous years though.\r\n   * We work around this problem building a new Date object which has its internal UTC\r\n   * representation with the local date and time.\r\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n   *    timeZone set to 'utc' to work fine.\r\n   * @param date Date from which we want to get the string representation according to dtf\r\n   * @returns A Date object with its UTC representation based on the passed in date info\r\n   */\r\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\r\n    const d = new Date(\r\n      Date.UTC(\r\n        date.getFullYear(),\r\n        date.getMonth(),\r\n        date.getDate(),\r\n        date.getHours(),\r\n        date.getMinutes(),\r\n        date.getSeconds(),\r\n        date.getMilliseconds()\r\n      )\r\n    );\r\n    return dtf.format(d);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { MatDateFormats } from './date-formats';\r\n\r\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\r\n  parse: {\r\n    date: null,\r\n    datetime: null,\r\n    time: null\r\n  },\r\n  display: {\r\n    date: { year: 'numeric', month: 'numeric', day: 'numeric' },\r\n    datetime: {\r\n      year: 'numeric',\r\n      month: 'numeric',\r\n      day: 'numeric',\r\n      hours: 'numeric',\r\n      minutes: 'numeric'\r\n    },\r\n    time: { hours: 'numeric', minutes: 'numeric' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthDayLabel: { month: 'short', day: 'numeric' },\r\n    monthDayA11yLabel: { month: 'long', day: 'numeric' },\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n    timeLabel: { hours: 'numeric', minutes: 'numeric' }\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { PlatformModule } from '@angular/cdk/platform';\r\nimport { NgModule } from '@angular/core';\r\nimport { DateAdapter } from './date-adapter';\r\nimport { MAT_DATE_FORMATS } from './date-formats';\r\nimport { NativeDateAdapter } from './native-date-adapter';\r\nimport { MAT_NATIVE_DATE_FORMATS } from './native-date-formats';\r\n\r\nexport * from './date-adapter';\r\nexport * from './date-formats';\r\nexport * from './native-date-adapter';\r\nexport * from './native-date-formats';\r\n\r\n@NgModule({\r\n  imports: [PlatformModule],\r\n  providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }]\r\n})\r\nexport class NativeDateModule {}\r\n\r\n@NgModule({\r\n  imports: [NativeDateModule],\r\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS }]\r\n})\r\nexport class MatNativeDateModule {}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_LOCALE } from '../core/index';\r\n\r\n// TODO(mmalerba): See if we can clean this up at some point.\r\nimport * as momentNs from 'moment-timezone';\r\nexport type Moment = momentNs.Moment;\r\nconst moment = momentNs;\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts Moment.js Dates for use with Angular Material. */\r\n@Injectable()\r\nexport class MomentDateAdapter extends DateAdapter<Moment> {\r\n  // Note: all of the methods that accept a `Moment` input parameter immediately call `this.clone`\r\n  // on it. This is to ensure that we're working with a `Moment` that has the correct locale setting\r\n  // while avoiding mutating the original object passed to us. Just calling `.locale(...)` on the\r\n  // input would mutate the object.\r\n\r\n  private _localeData: {\r\n    firstDayOfWeek: number;\r\n    longMonths: string[];\r\n    shortMonths: string[];\r\n    dates: string[];\r\n    longDaysOfWeek: string[];\r\n    shortDaysOfWeek: string[];\r\n    narrowDaysOfWeek: string[];\r\n  };\r\n\r\n  constructor(\r\n    @Optional()\r\n    @Inject(MAT_DATE_LOCALE)\r\n    dateLocale: string\r\n  ) {\r\n    super();\r\n    this.setLocale(dateLocale || moment.locale());\r\n  }\r\n\r\n  setLocale(locale: string) {\r\n    super.setLocale(locale);\r\n\r\n    const momentLocaleData = moment.localeData(locale);\r\n    this._localeData = {\r\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\r\n      longMonths: momentLocaleData.months(),\r\n      shortMonths: momentLocaleData.monthsShort(),\r\n      dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\r\n      longDaysOfWeek: momentLocaleData.weekdays(),\r\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\r\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin()\r\n    };\r\n  }\r\n\r\n  getYear(date: Moment): number {\r\n    return this.clone(date).year();\r\n  }\r\n\r\n  getMonth(date: Moment): number {\r\n    return this.clone(date).month();\r\n  }\r\n\r\n  getDate(date: Moment): number {\r\n    return this.clone(date).date();\r\n  }\r\n\r\n  getHours(date: Moment): number {\r\n    return this.clone(date).hours();\r\n  }\r\n\r\n  setHours(date: Moment, value: number): void {\r\n    date.hours(value);\r\n  }\r\n\r\n  getMinutes(date: Moment): number {\r\n    return this.clone(date).minutes();\r\n  }\r\n\r\n  setMinutes(date: Moment, value: number): void {\r\n    date.minutes(value);\r\n  }\r\n\r\n  setSeconds(date: Moment, value: number, ms?: number): void {\r\n    date.seconds(value);\r\n    if (ms) {\r\n      date.milliseconds(ms);\r\n    }\r\n  }\r\n\r\n  getDayOfWeek(date: Moment): number {\r\n    return this.clone(date).day();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\r\n    return style === 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return this._localeData.dates;\r\n  }\r\n\r\n  getHourNames(): string[] {\r\n    // TODO SUPPORTS_INTL_API\r\n    return range(24, String);\r\n  }\r\n\r\n  getMinuteNames(): string[] {\r\n    // TODO SUPPORTS_INTL_API\r\n    return range(60, String);\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (style === 'long') {\r\n      return this._localeData.longDaysOfWeek;\r\n    }\r\n    if (style === 'short') {\r\n      return this._localeData.shortDaysOfWeek;\r\n    }\r\n    return this._localeData.narrowDaysOfWeek;\r\n  }\r\n\r\n  getYearName(date: Moment): string {\r\n    return this.clone(date).format('YYYY');\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return this._localeData.firstDayOfWeek;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Moment): number {\r\n    return this.clone(date).daysInMonth();\r\n  }\r\n\r\n  clone(date: Moment): Moment {\r\n    const obj = date ? moment(date) : moment();\r\n    return obj.locale(this.locale);\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number, hours?: number, minutes?: number): Moment {\r\n    // Moment.js will create an invalid date if any of the components are out of bounds, but we\r\n    // explicitly check each case so we can throw more descriptive errors.\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    const result = moment({ year, month, date, hours, minutes, seconds: 0 });\r\n\r\n    // If the result isn't valid, the date must have been out of bounds for this month.\r\n    if (!result.isValid()) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result.locale(this.locale);\r\n  }\r\n\r\n  today(): Moment {\r\n    return moment().locale(this.locale);\r\n  }\r\n\r\n  parse(value: any, parseFormat: string | string[]): Moment | null {\r\n    if (parseFormat && value && typeof value === 'string') {\r\n      return moment(value, parseFormat, this.locale, true);\r\n    }\r\n    return value ? moment(value).locale(this.locale) : null;\r\n  }\r\n\r\n  format(date: Moment, displayFormat: string): string {\r\n    date = this.clone(date);\r\n    if (!this.isValid(date)) {\r\n      throw Error('MomentDateAdapter: Cannot format invalid date.');\r\n    }\r\n    return date.format(displayFormat);\r\n  }\r\n\r\n  addCalendarYears(date: Moment, years: number): Moment {\r\n    return this.clone(date).add({ years });\r\n  }\r\n\r\n  addCalendarMonths(date: Moment, months: number): Moment {\r\n    return this.clone(date).add({ months });\r\n  }\r\n\r\n  addCalendarDays(date: Moment, days: number): Moment {\r\n    return this.clone(date).add({ days });\r\n  }\r\n\r\n  addCalendarHours(date: Moment, hours: number): Moment {\r\n    return this.clone(date).add({ hours });\r\n  }\r\n\r\n  addCalendarMinutes(date: Moment, minutes: number): Moment {\r\n    return this.clone(date).add({ minutes });\r\n  }\r\n\r\n  toIso8601(date: Moment): string {\r\n    return this.clone(date).format();\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n   * string into null. Returns an invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Moment | null {\r\n    let date;\r\n    if (value instanceof Date) {\r\n      date = moment(value);\r\n    }\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      date = moment(value, moment.ISO_8601).locale(this.locale);\r\n    }\r\n    if (date && this.isValid(date)) {\r\n      return date;\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return moment.isMoment(obj) ? this.clone(obj).isValid() : moment(obj).isValid();\r\n  }\r\n\r\n  isValid(date: Moment): boolean {\r\n    return this.clone(date).isValid();\r\n  }\r\n\r\n  invalid(): Moment {\r\n    return moment.invalid();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { MatDateFormats } from '../core/index';\r\n\r\nexport const MAT_MOMENT_DATE_FORMATS: MatDateFormats = {\r\n  parse: {\r\n    date: ['YYYY-MM-DD', 'YYYY/MM/DD', 'll'],\r\n    datetime: ['YYYY-MM-DD HH:mm', 'YYYY/MM/DD HH:mm', 'll h:mma'],\r\n    time: ['H:mm', 'HH:mm', 'h:mm a', 'hh:mm a']\r\n  },\r\n  display: {\r\n    date: 'll',\r\n    datetime: 'll h:mma',\r\n    time: 'h:mm a',\r\n    dateA11yLabel: 'LL',\r\n    monthDayLabel: 'MMM D',\r\n    monthDayA11yLabel: 'MMMM D',\r\n    monthYearLabel: 'MMMM YYYY',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n    timeLabel: 'HH:mm'\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '../core/index';\r\nimport { MomentDateAdapter } from './moment-date-adapter';\r\nimport { MAT_MOMENT_DATE_FORMATS } from './moment-date-formats';\r\n\r\nexport * from './moment-date-adapter';\r\nexport * from './moment-date-formats';\r\nexport { DateAdapter, MatDateFormats, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '../core/index';\r\n\r\n@NgModule({\r\n  providers: [{ provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] }]\r\n})\r\nexport class MomentDateModule {}\r\n\r\n@NgModule({\r\n  imports: [MomentDateModule],\r\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS }]\r\n})\r\nexport class MatMomentDateModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** @docs-private */\r\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n    `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule ` +\r\n      `or provide a custom implementation.`\r\n  );\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nexport const CLOCK_RADIUS = 50;\r\nexport const CLOCK_INNER_RADIUS = 27.5;\r\nexport const CLOCK_OUTER_RADIUS = 41.25;\r\nexport const CLOCK_TICK_RADIUS = 7.0833;\r\n\r\nexport type ClockView = 'hour' | 'minute';\r\n\r\n/**\r\n * A clock that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-clock-view',\r\n  templateUrl: 'clock-view.html',\r\n  exportAs: 'matClockView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    role: 'clock',\r\n    '(mousedown)': '_handleMousedown($event)'\r\n  },\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatClockView<D> implements AfterContentInit {\r\n  /**\r\n   * The time to display in this clock view. (the rest is ignored)\r\n   */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (oldActiveDate && this._dateAdapter.compareDate(oldActiveDate, this._activeDate, 'minute')) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  // The currently selected date.\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  // A function used to filter which dates are selectable.\r\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  @Input() clockStep = 1;\r\n\r\n  @Input() twelveHour = false;\r\n\r\n  // Whether the clock is in hour view.\r\n  @Input() hourView = true;\r\n\r\n  // Emits when the final time was selected.\r\n  @Output() readonly selectedTime = new EventEmitter<D>();\r\n\r\n  // Emits when the currently selected date changes.\r\n  @Output() readonly selectedChange = new EventEmitter<D>();\r\n\r\n  // Emits when the currently selected date changes.\r\n  @Output() readonly changeView = new EventEmitter<void>();\r\n\r\n  // Hours and Minutes representing the clock view.\r\n  _hours: Array<any> = [];\r\n  _minutes: Array<any> = [];\r\n\r\n  _selectedHour: number | null;\r\n  _selectedMinute: number | null;\r\n  _anteMeridian: boolean;\r\n\r\n  private mouseMoveListener: any;\r\n  private mouseUpListener: any;\r\n\r\n  get _hand(): any {\r\n    this._selectedHour = this._dateAdapter.getHours(this.activeDate);\r\n    this._selectedMinute = this._dateAdapter.getMinutes(this.activeDate);\r\n    let radius = CLOCK_OUTER_RADIUS;\r\n    let deg = 0;\r\n\r\n    if (this.twelveHour) {\r\n      this._selectedHour = this._selectedHour < 12 ? this._selectedHour : this._selectedHour - 12;\r\n      this._selectedHour = this._selectedHour === 0 ? 12 : this._selectedHour;\r\n    }\r\n\r\n    if (this.hourView) {\r\n      const outer = this._selectedHour > 0 && this._selectedHour < 13;\r\n      radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\r\n      if (this.twelveHour) {\r\n        radius = CLOCK_OUTER_RADIUS;\r\n      }\r\n      deg = Math.round(this._selectedHour * (360 / (24 / 2)));\r\n    } else {\r\n      deg = Math.round(this._selectedMinute * (360 / 60));\r\n    }\r\n\r\n    return {\r\n      transform: `rotate(${deg}deg)`,\r\n      height: `${radius}%`,\r\n      'margin-top': `${50 - radius}%`\r\n    };\r\n  }\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _element: ElementRef,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this.mouseMoveListener = (event: any) => {\r\n      this._handleMousemove(event);\r\n    };\r\n    this.mouseUpListener = () => {\r\n      this._handleMouseup();\r\n    };\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  // Handles mousedown events on the clock body.\r\n  _handleMousedown(event: any) {\r\n    this.setTime(event);\r\n    document.addEventListener('mousemove', this.mouseMoveListener);\r\n    document.addEventListener('touchmove', this.mouseMoveListener);\r\n    document.addEventListener('mouseup', this.mouseUpListener);\r\n    document.addEventListener('touchend', this.mouseUpListener);\r\n  }\r\n\r\n  _handleMousemove(event: any) {\r\n    event.preventDefault();\r\n    this.setTime(event);\r\n  }\r\n\r\n  _handleMouseup() {\r\n    document.removeEventListener('mousemove', this.mouseMoveListener);\r\n    document.removeEventListener('touchmove', this.mouseMoveListener);\r\n    document.removeEventListener('mouseup', this.mouseUpListener);\r\n    document.removeEventListener('touchend', this.mouseUpListener);\r\n  }\r\n\r\n  // Initializes this clock view.\r\n  _init() {\r\n    this._hours.length = 0;\r\n    this._minutes.length = 0;\r\n\r\n    const hourNames = this._dateAdapter.getHourNames();\r\n    const minuteNames = this._dateAdapter.getMinuteNames();\r\n\r\n    if (this.twelveHour) {\r\n      this._anteMeridian = this._dateAdapter.getHours(this.activeDate) < 12;\r\n\r\n      for (let i = 0; i < hourNames.length / 2; i++) {\r\n        const radian = i / 6 * Math.PI;\r\n        const radius = CLOCK_OUTER_RADIUS;\r\n        const date = this._dateAdapter.createDate(\r\n          this._dateAdapter.getYear(this.activeDate),\r\n          this._dateAdapter.getMonth(this.activeDate),\r\n          this._dateAdapter.getDate(this.activeDate),\r\n          this._anteMeridian ? i : i + 12\r\n        );\r\n        this._hours.push({\r\n          value: i,\r\n          displayValue: i === 0 ? '12' : hourNames[i],\r\n          enabled: !this.dateFilter || this.dateFilter(date, 'hour'),\r\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\r\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS\r\n        });\r\n      }\r\n    } else {\r\n      for (let i = 0; i < hourNames.length; i++) {\r\n        const radian = i / 6 * Math.PI;\r\n        const outer = i > 0 && i < 13;\r\n        const radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\r\n        const date = this._dateAdapter.createDate(\r\n          this._dateAdapter.getYear(this.activeDate),\r\n          this._dateAdapter.getMonth(this.activeDate),\r\n          this._dateAdapter.getDate(this.activeDate),\r\n          i\r\n        );\r\n        this._hours.push({\r\n          value: i,\r\n          displayValue: i === 0 ? '12' : hourNames[i],\r\n          enabled: !this.dateFilter || this.dateFilter(date, 'hour'),\r\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\r\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,\r\n          fontSize: i > 0 && i < 13 ? '' : '80%'\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < minuteNames.length; i += 5) {\r\n      const radian = i / 30 * Math.PI;\r\n      const date = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate),\r\n        this._dateAdapter.getDate(this.activeDate),\r\n        this._dateAdapter.getHours(this.activeDate),\r\n        i\r\n      );\r\n      this._minutes.push({\r\n        value: i,\r\n        displayValue: i === 0 ? '00' : minuteNames[i],\r\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute'),\r\n        top: CLOCK_RADIUS - Math.cos(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS,\r\n        left: CLOCK_RADIUS + Math.sin(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS\r\n      });\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  // Set Time\r\n  private setTime(event: any) {\r\n    const trigger = this._element.nativeElement;\r\n    const triggerRect = trigger.getBoundingClientRect();\r\n    const width = trigger.offsetWidth;\r\n    const height = trigger.offsetHeight;\r\n    const pageX = event.pageX !== undefined ? event.pageX : event.touches[0].pageX;\r\n    const pageY = event.pageY !== undefined ? event.pageY : event.touches[0].pageY;\r\n    const x = width / 2 - (pageX - triggerRect.left - window.pageXOffset);\r\n    const y = height / 2 - (pageY - triggerRect.top - window.pageYOffset);\r\n    const unit = Math.PI / (this.hourView ? 6 : this.clockStep ? 30 / this.clockStep : 30);\r\n    const z = Math.sqrt(x * x + y * y);\r\n    const outer = this.hourView && z > (width * (CLOCK_OUTER_RADIUS / 100) + width * (CLOCK_INNER_RADIUS / 100)) / 2;\r\n\r\n    let radian = Math.atan2(-x, y);\r\n    if (radian < 0) {\r\n      radian = Math.PI * 2 + radian;\r\n    }\r\n    let value = Math.round(radian / unit);\r\n\r\n    const date = this._dateAdapter.clone(this.activeDate);\r\n\r\n    if (this.hourView) {\r\n      if (value === 12) {\r\n        value = 0;\r\n      }\r\n      value = this.twelveHour\r\n        ? this._anteMeridian ? value : value + 12\r\n        : outer ? (value === 0 ? 12 : value) : value === 0 ? 0 : value + 12;\r\n      this._dateAdapter.setHours(date, value);\r\n    } else {\r\n      if (this.clockStep) {\r\n        value *= this.clockStep;\r\n      }\r\n      if (value === 60) {\r\n        value = 0;\r\n      }\r\n      this._dateAdapter.setMinutes(date, value);\r\n    }\r\n\r\n    // validate if the resulting value is disabled and do not take action\r\n    if (this.dateFilter && !this.dateFilter(date, this.hourView ? 'hour' : 'minute')) {\r\n      return;\r\n    }\r\n\r\n    this.activeDate = date;\r\n    if (this.hourView) {\r\n      this.changeView.emit();\r\n      this.selectedChange.emit(this.activeDate);\r\n    } else {\r\n      this.selectedTime.emit(this.activeDate);\r\n    }\r\n  }\r\n\r\n  _focusActiveCell() {}\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n}\r\n","import {\r\n  animate,\r\n  animateChild,\r\n  AnimationTriggerMetadata,\r\n  group,\r\n  keyframes,\r\n  query,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger\r\n} from '@angular/animations';\r\n\r\nexport const slideCalendar: AnimationTriggerMetadata = trigger('slideCalendar', [\r\n  transition('* => left', [\r\n    animate(\r\n      180,\r\n      keyframes([\r\n        style({ transform: 'translateX(50%)', offset: 0.5, opacity: 0 }),\r\n        style({ transform: 'translateX(-50%)', offset: 0.51, opacity: 0 }),\r\n        style({ transform: 'translateX(0)', offset: 1, opacity: 1 })\r\n      ])\r\n    )\r\n  ]),\r\n  transition('* => right', [\r\n    animate(\r\n      180,\r\n      keyframes([\r\n        style({ transform: 'translateX(-50%)', offset: 0.5, opacity: 0 }),\r\n        style({ transform: 'translateX(50%)', offset: 0.51, opacity: 0 }),\r\n        style({ transform: 'translateX(0)', offset: 1, opacity: 1 })\r\n      ])\r\n    )\r\n  ])\r\n]);\r\n\r\nexport const controlActive: AnimationTriggerMetadata = trigger('controlActive', [\r\n  transition('* => active', [\r\n    animate(\r\n      '0.4s linear',\r\n      keyframes([\r\n        style({ transform: 'scale(0.9)' }),\r\n        style({ transform: 'scale(1.1)' }),\r\n        style({ transform: 'scale(1)' })\r\n      ])\r\n    )\r\n  ])\r\n]);\r\n\r\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\r\n  state('void', style({ opacity: 0, transform: 'scale(1, 0)' })),\r\n  state('enter', style({ opacity: 1, transform: 'scale(1, 1)' })),\r\n  transition(\r\n    'void => enter',\r\n    group([\r\n      query('@fadeInCalendar', animateChild()),\r\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\r\n    ])\r\n  ),\r\n  transition('* => void', animate('100ms linear', style({ opacity: 0 })))\r\n]);\r\n\r\nexport const fadeInCalendar: AnimationTriggerMetadata = trigger('fadeInCalendar', [\r\n  state('void', style({ opacity: 0 })),\r\n  state('enter', style({ opacity: 1 })),\r\n  transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\r\n]);\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport interface MatDatepickerIntlCatalog {\r\n  calendarLabel: string;\r\n  openCalendarLabel: string;\r\n  prevMonthLabel: string;\r\n  nextMonthLabel: string;\r\n  prevYearLabel: string;\r\n  nextYearLabel: string;\r\n  setToAMLabel: string;\r\n  setToPMLabel: string;\r\n  switchToMinuteViewLabel: string;\r\n  switchToHourViewLabel: string;\r\n  switchToMonthViewLabel: string;\r\n  switchToYearViewLabel: string;\r\n  switchToYearsViewLabel: string;\r\n  buttonSubmitText: string;\r\n  buttonSubmitLabel: string;\r\n  buttonCancelText: string;\r\n  buttonCancelLabel: string;\r\n}\r\n\r\n/** Datepicker data that requires internationalization. */\r\n@Injectable({ providedIn: 'root' })\r\nexport class MatDatepickerIntl implements MatDatepickerIntlCatalog {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes = new Subject<void>();\r\n\r\n  /** A label for the calendar popup (used by screen readers). */\r\n  calendarLabel = 'Calendar';\r\n\r\n  /** A label for the button used to open the calendar popup (used by screen readers). */\r\n  openCalendarLabel = 'Open calendar';\r\n\r\n  /** A label for the previous month button (used by screen readers). */\r\n  prevMonthLabel = 'Previous month';\r\n\r\n  /** A label for the next month button (used by screen readers). */\r\n  nextMonthLabel = 'Next month';\r\n\r\n  /** A label for the previous year button (used by screen readers). */\r\n  prevYearLabel = 'Previous year';\r\n\r\n  /** A label for the next year button (used by screen readers). */\r\n  nextYearLabel = 'Next year';\r\n\r\n  /** A label for the 'AM' button (used by screen readers). */\r\n  setToAMLabel = 'Set date to AM';\r\n\r\n  /** A label for the 'PM' button (used by screen readers). */\r\n  setToPMLabel = 'Set date to PM';\r\n\r\n  /** A label for the 'switch to minute view' button (used by screen readers). */\r\n  switchToMinuteViewLabel = 'Change to minute view';\r\n\r\n  /** A label for the 'switch to hour view' button (used by screen readers). */\r\n  switchToHourViewLabel = 'Change to hour view';\r\n\r\n  /** A label for the 'switch to month view' button (used by screen readers). */\r\n  switchToMonthViewLabel = 'Change to month view';\r\n\r\n  /** A label for the 'switch to year view' button (used by screen readers). */\r\n  switchToYearViewLabel = 'Change to year view';\r\n\r\n  /** A label for the 'switch to years view' button (used by screen readers). */\r\n  switchToYearsViewLabel = 'Change to years view';\r\n\r\n  /** Text for the 'submit' button. */\r\n  buttonSubmitText = 'Ok';\r\n\r\n  /** A label for the 'submit' button (used by screen readers). */\r\n  buttonSubmitLabel = 'Choose the current date';\r\n\r\n  /** Text for the 'cancel' button. */\r\n  buttonCancelText = 'Cancel';\r\n\r\n  /** A label for the 'cancel' button (used by screen readers). */\r\n  buttonCancelLabel = 'Cancel the date selection';\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  NgZone,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { take } from 'rxjs/operators';\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class MatCalendarCell {\r\n  constructor(\r\n    public value: number,\r\n    public displayValue: string,\r\n    public ariaLabel: string,\r\n    public enabled: boolean\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: '[mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  // styleUrls: ['calendar-body.scss'],\r\n  host: {\r\n    class: 'mat-calendar-body',\r\n    role: 'grid',\r\n    'attr.aria-readonly': 'true'\r\n  },\r\n  exportAs: 'matCalendarBody',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatCalendarBody {\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: MatCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** The value in the table that is active. */\r\n  @Input() activeValue: number;\r\n\r\n  /** The value in the table that is currently selected. */\r\n  @Input() selectedValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols = 7;\r\n\r\n  /** Whether to allow selection of disabled cells. */\r\n  @Input() allowDisabledSelection = false;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell = 0;\r\n\r\n  /**\r\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n   * maintained even as the table resizes.\r\n   */\r\n  @Input() cellAspectRatio = 0.55;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() readonly selectedValueChange = new EventEmitter<number>();\r\n\r\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) {}\r\n\r\n  _cellClicked(cell: MatCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  get _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length\r\n      ? this.numCols - this.rows[0].length\r\n      : 0;\r\n  }\r\n\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber === this.activeCell;\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable\r\n        .asObservable()\r\n        .pipe(take(1))\r\n        .subscribe(() => {\r\n          this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\r\n        });\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { slideCalendar } from './datepicker-animations';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'matMonthView',\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatMonthView<D> implements AfterContentInit {\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    this._activeValue = this._getDateInCurrentMonth(this.activeDate);\r\n\r\n    if (oldActiveDate && !this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  /** Animations handler */\r\n  @Input() animationDir: string;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection = new EventEmitter<void>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /** The active date on the calendar. */\r\n  _activeValue: number | null;\r\n\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number | null;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: { long: string; narrow: string }[];\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional() private _dir?: Directionality\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    const weekdays = longWeekdays.map((long, i) => {\r\n      return { long, narrow: narrowWeekdays[i].slice(0, 1) };\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    if (this._selectedDate !== date) {\r\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const selectedHours = this._dateAdapter.getHours(this.activeDate);\r\n      const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\r\n      const selectedDate = this._dateAdapter.createDate(\r\n        selectedYear,\r\n        selectedMonth,\r\n        date,\r\n        selectedHours,\r\n        selectedMinutes\r\n      );\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n\r\n    const isRtl = this._isRtl();\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(\r\n          this._activeDate,\r\n          1 - this._dateAdapter.getDate(this._activeDate)\r\n        );\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(\r\n          this._activeDate,\r\n          this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate)\r\n        );\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = event.altKey\r\n          ? this._dateAdapter.addCalendarYears(this._activeDate, -1)\r\n          : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = event.altKey\r\n          ? this._dateAdapter.addCalendarYears(this._activeDate, 1)\r\n          : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\r\n          this._userSelection.emit();\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._activeValue = this._getDateInCurrentMonth(this.activeDate);\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel = this._dateAdapter\r\n      .getMonthNames('short')\r\n      [this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate),\r\n      this._dateAdapter.getMonth(this.activeDate),\r\n      1\r\n    );\r\n    this._firstWeekOffset =\r\n      (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) %\r\n      DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell === DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate),\r\n        i + 1\r\n      );\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return (\r\n      !!date &&\r\n      (!this.dateFilter || this.dateFilter(date, 'day')) &&\r\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate, 'day') >= 0) &&\r\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate, 'day') <= 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.compareDate(d1, d2, 'month') === 0);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { MatCalendarBody, MatCalendarCell } from './calendar-body';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { slideCalendar } from './datepicker-animations';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'matYearView',\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatYearView<D> implements AfterContentInit {\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (\r\n      oldActiveDate &&\r\n      this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)\r\n    ) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  /** Animations handler */\r\n  @Input() animationDir: string;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional() private _dir?: Directionality\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1)\r\n    );\r\n    const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n    const selectedDay = this._dateAdapter.getDate(this.activeDate);\r\n    const selectedHours = this._dateAdapter.getHours(this.activeDate);\r\n    const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\r\n    const date = this._dateAdapter.createDate(\r\n      selectedYear,\r\n      month,\r\n      Math.min(selectedDay, daysInMonth),\r\n      selectedHours,\r\n      selectedMinutes\r\n    );\r\n    this.selectedChange.emit(date);\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    const monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row =>\r\n      row.map(month => this._createCellForMonth(month, monthNames[month]))\r\n    );\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate)\r\n      ? this._dateAdapter.getMonth(date)\r\n      : null;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    const ariaLabel = this._dateAdapter.format(\r\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n      this._dateFormats.display.monthYearA11yLabel\r\n    );\r\n    return new MatCalendarCell(\r\n      month,\r\n      monthName.toLocaleUpperCase(),\r\n      ariaLabel,\r\n      this._shouldEnableMonth(month)\r\n    );\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (\r\n      month === undefined ||\r\n      month === null ||\r\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n      this._isYearAndMonthBeforeMinDate(activeYear, month)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (\r\n      let d = firstOfMonth;\r\n      this._dateAdapter.getMonth(d) == month;\r\n      d = this._dateAdapter.addCalendarDays(d, 1)\r\n    ) {\r\n      if (this.dateFilter(d, 'day')) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n\r\n    const isRtl = this._isRtl();\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(\r\n          this._activeDate,\r\n          this._dateAdapter.getMonth(this._activeDate)\r\n        );\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(\r\n          this._activeDate,\r\n          11 - this._dateAdapter.getMonth(this._activeDate)\r\n        );\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          event.altKey ? -10 : -1\r\n        );\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          event.altKey ? 10 : 1\r\n        );\r\n        break;\r\n      case ENTER:\r\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { DOWN_ARROW, ENTER, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { of as obsOf, fromEvent } from 'rxjs';\r\nimport { mergeMap, sampleTime } from 'rxjs/operators';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nconst YEAR_LINE_HEIGHT = 35;\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-years-view',\r\n  templateUrl: 'years-view.html',\r\n  exportAs: 'matYearsView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatYearsView<D> implements AfterContentInit, OnDestroy {\r\n  /** The date to display in this view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (\r\n      oldActiveDate &&\r\n      this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)\r\n    ) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange = new EventEmitter<D>();\r\n\r\n  /** List of years. */\r\n  _years: Array<{ value: number; enabled: boolean }> = [];\r\n\r\n  /** The selected year. */\r\n  _selectedYear: number | null;\r\n\r\n  /** Scroller subscription. */\r\n  _disposeScroller: Subscription;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private element: ElementRef,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    const lastPosition = { scrolled: 0 };\r\n    this._disposeScroller = fromEvent(this.element.nativeElement, 'scroll')\r\n      .pipe(sampleTime(300), mergeMap((ev: any) => obsOf(this._calculatePoints())))\r\n      .subscribe((pos: any) => this._handleScroll(pos, lastPosition));\r\n\r\n    this._init();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._disposeScroller.unsubscribe();\r\n  }\r\n\r\n  abs(value: number) {\r\n    return Math.abs(value);\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._selectedYear = this._dateAdapter.getYear(this.selected ? this.selected : this.activeDate);\r\n\r\n    const date = this._dateAdapter.createDate(\r\n      this._selectedYear,\r\n      this._dateAdapter.getMonth(this.activeDate),\r\n      this._dateAdapter.getDate(this.activeDate),\r\n      this._dateAdapter.getHours(this.activeDate),\r\n      this._dateAdapter.getMinutes(this.activeDate)\r\n    );\r\n    this._years = [\r\n      {\r\n        value: this._selectedYear,\r\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute')\r\n      }\r\n    ];\r\n\r\n    this._populateYears();\r\n\r\n    setTimeout(() => {\r\n      this.element.nativeElement.scrollTop -=\r\n        this.element.nativeElement.offsetHeight / 2 - YEAR_LINE_HEIGHT / 2;\r\n    }, 20);\r\n  }\r\n\r\n  _populateYears(down = false) {\r\n    if (\r\n      (!down && !this._years[0].enabled) ||\r\n      (down && !this._years[this._years.length - 1].enabled)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n    const selectedDay = this._dateAdapter.getDate(this.activeDate);\r\n    const selectedHours = this._dateAdapter.getHours(this.activeDate);\r\n    const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\r\n\r\n    let scroll = 0;\r\n    for (let y = 1; y <= 10; y++) {\r\n      let year = this._years[this._years.length - 1].value;\r\n      let date = this._dateAdapter.createDate(\r\n        year + 1,\r\n        selectedMonth,\r\n        selectedDay,\r\n        selectedHours,\r\n        selectedMinutes\r\n      );\r\n      this._years.push({\r\n        value: year + 1,\r\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute')\r\n      });\r\n\r\n      year = this._years[0].value;\r\n      date = this._dateAdapter.createDate(\r\n        year - 1,\r\n        selectedMonth,\r\n        selectedDay,\r\n        selectedHours,\r\n        selectedMinutes\r\n      );\r\n      this._years.unshift({\r\n        value: year - 1,\r\n        enabled: !this.dateFilter || this.dateFilter(date, 'minute')\r\n      });\r\n\r\n      scroll += YEAR_LINE_HEIGHT;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.element.nativeElement.scrollTop += down ? YEAR_LINE_HEIGHT : scroll;\r\n    }, 10);\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  _yearSelected(year: number) {\r\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n    const selectedDay = this._dateAdapter.getDate(this.activeDate);\r\n    const selectedHours = this._dateAdapter.getHours(this.activeDate);\r\n    const selectedMinutes = this._dateAdapter.getMinutes(this.activeDate);\r\n    this.selectedChange.emit(\r\n      this._dateAdapter.createDate(year, selectedMonth, selectedDay, selectedHours, selectedMinutes)\r\n    );\r\n  }\r\n\r\n  _calculatePoints() {\r\n    const el = this.element.nativeElement;\r\n    return {\r\n      height: el.offsetHeight,\r\n      scrolled: el.scrollTop,\r\n      total: el.scrollHeight\r\n    };\r\n  }\r\n\r\n  _handleScroll(position, lastPosition) {\r\n    if (position.scrolled === 0 && lastPosition.scrolled > 0) {\r\n      this._populateYears(false);\r\n    } else if (position.height + position.scrolled === position.total) {\r\n      this._populateYears(true);\r\n    }\r\n    lastPosition.scrolled = position.scrolled;\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO handle @angular/cdk/keycode\r\n    switch (event.keyCode) {\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  _focusActiveCell() {}\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  AfterContentInit,\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { MatClockView } from './clock-view';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { DateAdapter } from './core/index';\r\nimport { controlActive, slideCalendar } from './datepicker-animations';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\nimport { MatDatepickerIntl } from './datepicker-intl';\r\nimport { MatMonthView } from './month-view';\r\nimport { MatYearView } from './year-view';\r\nimport { MatYearsView } from './years-view';\r\n\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport type MatCalendarView = 'clock' | 'month' | 'year' | 'years';\r\n\r\n/**\r\n * Possible return types.\r\n * @docs-private\r\n */\r\nexport type MatCalendarType = 'date' | 'datetime' | 'time';\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  // styleUrls: ['calendar.css'],\r\n  host: {\r\n    class: 'mat-calendar'\r\n  },\r\n  animations: [controlActive, slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnChanges, OnDestroy {\r\n  private _intlChanges: Subscription;\r\n\r\n  /**\r\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n   * We need to schedule it, rather than do it immediately, because we have to wait\r\n   * for Angular to re-evaluate the view children.\r\n   */\r\n  private _moveFocusOnNextTick = false;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    return this._startAt;\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The type of value handled by the calendar. */\r\n  @Input()\r\n  type: MatCalendarType = 'date';\r\n\r\n  /** Which view the calendar should be started in. */\r\n  @Input()\r\n  startView: MatCalendarView = 'month';\r\n\r\n  /** Current calendar view */\r\n  view: MatCalendarView;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: D | null) {\r\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this.activeDate = this._selected;\r\n  }\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input()\r\n  dateFilter: (date: D, unit?: string) => boolean;\r\n\r\n  /** Clock interval */\r\n  @Input()\r\n  clockStep = 1;\r\n\r\n  /** Clock hour format */\r\n  @Input()\r\n  twelveHour = false;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output()\r\n  selectedChange = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output()\r\n  _userSelection = new EventEmitter<void>();\r\n\r\n  /** Reference to the current clock view component. */\r\n  @ViewChild(MatClockView)\r\n  clockView: MatClockView<D>;\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(MatMonthView)\r\n  monthView: MatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(MatYearView)\r\n  yearView: MatYearView<D>;\r\n\r\n  /** Reference to the current years view component. */\r\n  @ViewChild(MatYearsView)\r\n  yearsView: MatYearsView<D>;\r\n\r\n  /** Date filter for the month and year views. */\r\n  _dateFilterForViews = (date: D, unit = 'minute') => {\r\n    return (\r\n      !!date &&\r\n      (!this.dateFilter || this.dateFilter(date)) &&\r\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate, unit) >= 0) &&\r\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate, unit) <= 0)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get activeDate(): D {\r\n    return this._clampedActiveDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._clampedActiveDate;\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n    this._isAm = this._dateAdapter.getHours(this._clampedActiveDate) < 12;\r\n\r\n    const unit = this.view === 'year' ? 'year' : 'month';\r\n    const diff = this._dateAdapter.compareDate(oldActiveDate, this._clampedActiveDate, unit);\r\n    if (diff) {\r\n      this._animationDir = diff > 0 ? 'left' : 'right';\r\n    }\r\n\r\n    // update the labels\r\n    const day = this._dateAdapter.getDayOfWeek(this.activeDate);\r\n    let hours = this._dateAdapter.getHours(this.activeDate);\r\n    if (this.twelveHour) {\r\n      hours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\r\n    }\r\n    const minutes = this._dateAdapter.getMinutes(this.activeDate);\r\n\r\n    switch (this.view) {\r\n      case 'year':\r\n        this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);\r\n        break;\r\n      default:\r\n        this._periodButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthYearLabel);\r\n    }\r\n    this._yearButtonText = this._dateAdapter.getYear(this.activeDate).toString();\r\n    this._monthdayButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthDayLabel);\r\n    this._dayButtonText = this._dateAdapter.getDayOfWeekNames('long')[day];\r\n    this._hourButtonText = hours.toString();\r\n    this._minuteButtonText = ('00' + minutes).slice(-2);\r\n\r\n    this.stateChanges.next();\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  get currentView(): MatCalendarView {\r\n    return this._currentView;\r\n  }\r\n  set currentView(value: MatCalendarView) {\r\n    this._currentView = value;\r\n    this._moveFocusOnNextTick = true;\r\n  }\r\n  private _currentView: MatCalendarView;\r\n\r\n  /**\r\n   * Emits whenever there is a state change that the header may need to respond to.\r\n   */\r\n  stateChanges = new Subject<void>();\r\n\r\n  /** Animations handler */\r\n  _animationDir: string;\r\n\r\n  /** Whether the active date is AM or not */\r\n  _isAm: boolean;\r\n\r\n  /** Whether the calendar process the time. */\r\n  _hasTime: boolean;\r\n\r\n  /** Whether the calendar is in hour view. */\r\n  _hourView: boolean = true;\r\n\r\n  /** The label for the calendar header buttons. */\r\n  _yearButtonText: string;\r\n\r\n  _dayButtonText: string;\r\n\r\n  _monthdayButtonText: string;\r\n\r\n  _hourButtonText: string;\r\n\r\n  _minuteButtonText: string;\r\n\r\n  /** The label for the current calendar view. */\r\n  _periodButtonText: string;\r\n\r\n  _periodButtonLabel: string;\r\n\r\n  /** The label for the the previous button. */\r\n  _prevButtonLabel: string;\r\n\r\n  /** The label for the the next button. */\r\n  _nextButtonLabel: string;\r\n\r\n  constructor(\r\n    public _intl: MatDatepickerIntl,\r\n    @Optional() private _dateAdapter: DateAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => {\r\n      changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.activeDate = this.startAt || this._dateAdapter.today();\r\n\r\n    this.changeView(this.startView, false);\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._moveFocusOnNextTick) {\r\n      this._moveFocusOnNextTick = false;\r\n      this.focusActiveCell();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this._hasTime = this.type.indexOf('time') >= 0;\r\n    const change = changes.selected || changes.minDate || changes.maxDate || changes.dateFilter;\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this._getCurrentViewComponent();\r\n      if (view) {\r\n        view._init();\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  changeView(view, focus = true) {\r\n    switch (view) {\r\n      case 'year':\r\n        this._periodButtonText = this._dateAdapter.getYearName(this.activeDate);\r\n        this._periodButtonLabel = this._intl.switchToYearsViewLabel;\r\n        this._nextButtonLabel = this._intl.nextYearLabel;\r\n        this._prevButtonLabel = this._intl.prevYearLabel;\r\n        break;\r\n      case 'month':\r\n        this._periodButtonText = this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthYearLabel);\r\n        this._periodButtonLabel = this._intl.switchToYearViewLabel;\r\n        this._nextButtonLabel = this._intl.nextMonthLabel;\r\n        this._prevButtonLabel = this._intl.prevMonthLabel;\r\n    }\r\n\r\n    this.view = view;\r\n    if (focus) {\r\n      this._moveFocusOnNextTick = true;\r\n    }\r\n  }\r\n\r\n  focusActiveCell() {\r\n    this._getCurrentViewComponent()._focusActiveCell();\r\n  }\r\n\r\n  _submitClicked(): void {\r\n    this.selectedChange.emit(this.activeDate);\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  _cancelClicked(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Handles date selection in the clock view. */\r\n  _timeChanged(date: D): void {\r\n    this.selected = date;\r\n  }\r\n\r\n  _timeSelected(date: D): void {\r\n    // if (this.autoOk && this.type === 'time') {\r\n    //   this.selectedChange.emit(date);\r\n    //   this._userSelection.emit();\r\n    // }\r\n    this.selected = date;\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D): void {\r\n    this.selected = date;\r\n    if (this._hasTime) {\r\n      this.changeView('clock');\r\n    }\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelected(month: D): void {\r\n    this.selected = month;\r\n    this.changeView('month');\r\n  }\r\n\r\n  _yearSelected(year: D): void {\r\n    this.selected = year;\r\n    this.changeView('year');\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  _currentPeriodClicked(): void {\r\n    this.changeView(this.view === 'month' ? 'year' : 'years');\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  _previousClicked(): void {\r\n    this._navCalendar(-1);\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  _nextClicked(): void {\r\n    this._navCalendar(1);\r\n  }\r\n\r\n  /** Handles user clicks on the time labels. */\r\n  _showHourView(): void {\r\n    if (this._hasTime) {\r\n      this._hourView = true;\r\n      this.changeView('clock');\r\n    }\r\n  }\r\n\r\n  _showMinuteView(): void {\r\n    this._hourView = false;\r\n    this.changeView('clock');\r\n  }\r\n\r\n  _toggleAmPm(am): void {\r\n    this._isAm = !this._isAm;\r\n    const date = this._dateAdapter.addCalendarHours(this.activeDate, this._isAm ? -12 : 12);\r\n    if (this._dateFilterForViews(date, 'minute')) {\r\n      this.selected = date;\r\n    }\r\n\r\n    // if (this._isAm !== am) {\r\n    //   const date = this._dateAdapter.addCalendarHours(this.activeDate, this._isAm ? 12 : -12);\r\n    //   if (this._dateFilterForViews(date, 'minute')) {\r\n    //     this.selected = date;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  _previousEnabled(): boolean {\r\n    if (!this.minDate) {\r\n      return true;\r\n    }\r\n    return !this.minDate || !this._isSameView(this.activeDate, this.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  _nextEnabled(): boolean {\r\n    return !this.maxDate || !this._isSameView(this.activeDate, this.maxDate);\r\n  }\r\n\r\n  /** Handles calendar diffs. */\r\n  _navCalendar(diff): void {\r\n    switch (this.view) {\r\n      case 'year':\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this.activeDate, diff);\r\n        break;\r\n      case 'month':\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this.activeDate, diff);\r\n        break;\r\n      case 'clock':\r\n        this.activeDate = this._hourView\r\n          ? this._dateAdapter.addCalendarHours(this.activeDate, diff)\r\n          : this._dateAdapter.addCalendarMinutes(this.activeDate, diff);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    switch (this.view) {\r\n      case 'year':\r\n        return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);\r\n      case 'month':\r\n        const monthYear = this._dateFormats.display.monthYearLabel;\r\n        return this._dateAdapter.format(date1, monthYear) === this._dateAdapter.format(date2, monthYear);\r\n      case 'clock':\r\n        const hourMinute = this._dateFormats.display.timeLabel;\r\n        return this._dateAdapter.format(date1, hourMinute) === this._dateAdapter.format(date2, hourMinute);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n\r\n  /** Returns the component instance that corresponds to the current calendar view. */\r\n  private _getCurrentViewComponent() {\r\n    return this.clockView || this.monthView || this.yearView || this.yearsView;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  ScrollStrategy\r\n} from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { take, filter } from 'rxjs/operators';\r\nimport { merge, Subject, Subscription } from 'rxjs';\r\nimport { MatCalendar, MatCalendarType, MatCalendarView } from './calendar';\r\nimport { DateAdapter } from './core/index';\r\nimport { fadeInCalendar, transformPanel } from './datepicker-animations';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\nimport { MatDatepickerInput } from './datepicker-input';\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\r\n  'mat-datepicker-scroll-strategy'\r\n);\r\n\r\n/** @docs-private */\r\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** @docs-private */\r\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY\r\n};\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  // styleUrls: ['datepicker-content.scss'],\r\n  host: {\r\n    class: 'mat-datepicker-content',\r\n    '[@transformPanel]': '\"enter\"',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n    '(keydown)': '_handleKeydown($event)'\r\n  },\r\n  animations: [transformPanel, fadeInCalendar],\r\n  exportAs: 'matDatepickerContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatDatepickerContent<D> implements AfterViewInit {\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\r\n\r\n  /** Reference to the datepicker that created the overlay. */\r\n  datepicker: MatDatepicker<D>;\r\n\r\n  /** Whether the datepicker is above or below the input. */\r\n  _isAbove: boolean;\r\n\r\n  ngAfterViewInit() {\r\n    this._calendar.focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * Handles keydown event on datepicker content.\r\n   * @param event The event.\r\n   */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ESCAPE) {\r\n      this.datepicker.close();\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  selector: 'mat-datepicker',\r\n  template: '',\r\n  exportAs: 'matDatepicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatDatepicker<D> implements OnInit, OnDestroy {\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The type of value handled by the calendar. */\r\n  @Input() type: MatCalendarType = 'date';\r\n\r\n  /** Which view the calendar should be started in. */\r\n  @Input() startView: MatCalendarView = 'month';\r\n\r\n  /** Clock interval */\r\n  @Input() clockStep = 1;\r\n\r\n  /** Clock hour format */\r\n  @Input() twelveHour = true;\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean {\r\n    return this._touchUi;\r\n  }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = true;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this._datepickerInput\r\n      ? this._datepickerInput.disabled\r\n      : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Whether the datepicker is connected to a date type one */\r\n  @Input()\r\n  set matDatepicker(value: MatDatepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n    }\r\n  }\r\n  _datepicker: MatDatepicker<D>;\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean {\r\n    return this._opened;\r\n  }\r\n  set opened(value: boolean) {\r\n    value ? this.open() : this.close();\r\n  }\r\n  private _opened = false;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null {\r\n    return this._validSelected;\r\n  }\r\n  set _selected(value: D | null) {\r\n    const valid = this._dateAdapter.clampDate(value, this._minDate, this._maxDate);\r\n    if (valid) {\r\n      // round the minutes\r\n      let minutes = this._dateAdapter.getMinutes(valid);\r\n      minutes = Math.round(minutes / this.clockStep) * this.clockStep;\r\n      this._dateAdapter.setMinutes(valid, minutes);\r\n      this._dateAdapter.setSeconds(valid, 0);\r\n    }\r\n    this._validSelected = valid;\r\n  }\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null, unit?: string) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\r\n\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  _datepickerInput: MatDatepickerInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly _disabledChange = new Subject<boolean>();\r\n\r\n  /** Emits new selected date when selected date changes. */\r\n  readonly _selectedChanged = new Subject<D>();\r\n\r\n  constructor(\r\n    private _dialog: MatDialog,\r\n    private _overlay: Overlay,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional() private _dir: Directionality,\r\n    @Optional()\r\n    @Inject(DOCUMENT)\r\n    private _document: any\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // prevent inconsistent type and view\r\n    switch (this.type) {\r\n      case 'date':\r\n        this.startView = this.startView !== 'clock' ? this.startView : 'month';\r\n        break;\r\n      case 'time':\r\n        this.startView = 'clock';\r\n        break;\r\n      default:\r\n        this.startView = this.startView;\r\n    }\r\n\r\n    if (this._datepicker) {\r\n      this._datepicker._selectedChanged.subscribe((date: D) => {\r\n        const value = this._dateAdapter.createDate(\r\n          this._dateAdapter.getYear(date),\r\n          this._dateAdapter.getMonth(date),\r\n          this._dateAdapter.getDate(date),\r\n          this._selected ? this._dateAdapter.getHours(this._selected) : 0,\r\n          this._selected ? this._dateAdapter.getMinutes(this._selected) : 0\r\n        );\r\n        // update the corresponding changes\r\n        this._select(value);\r\n      });\r\n    }\r\n\r\n    // refresh the input\r\n    this._datepickerInput.value = this._selected;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._selectedChanged.complete();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /** Selects the given date */\r\n  _select(date: D): void {\r\n    const oldValue = this._selected;\r\n    this._selected = date;\r\n    const unit = this.type.indexOf('time') >= 0 ? 'minute' : 'day';\r\n    if (!this._dateAdapter.sameDate(oldValue, this._selected, unit)) {\r\n      this._selectedChanged.next(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: MatDatepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('A MatDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription = this._datepickerInput._valueChange.subscribe(\r\n      (value: D | null) =>\r\n        (this._selected =\r\n          value && this._dateAdapter.isDateInstance(value) ? this._dateAdapter.clone(value) : null)\r\n    );\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  reset(value?: D | null) {\r\n    this._datepickerInput.reset(value);\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (\r\n      this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function'\r\n    ) {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: 'mat-datepicker-dialog'\r\n    });\r\n\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(\r\n        MatDatepickerContent,\r\n        this._viewContainerRef\r\n      );\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\r\n      this._popupComponentRef.instance.datepicker = this;\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable\r\n        .asObservable()\r\n        .pipe(take(1))\r\n        .subscribe(() => {\r\n          this._popupRef.updatePosition();\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: 'mat-datepicker-popup'\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(\r\n        filter(event => {\r\n          // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n          return (\r\n            event.keyCode === ESCAPE ||\r\n            (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW)\r\n          );\r\n        })\r\n      )\r\n    ).subscribe(() => this.close());\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay\r\n      .position()\r\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\r\n      .withTransformOriginOn('.mat-datepicker-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withPush(false)\r\n      .withPositions([\r\n        {\r\n          originX: 'start',\r\n          originY: 'bottom',\r\n          overlayX: 'start',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'start',\r\n          originY: 'top',\r\n          overlayX: 'start',\r\n          overlayY: 'bottom'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'bottom',\r\n          overlayX: 'end',\r\n          overlayY: 'top'\r\n        },\r\n        {\r\n          originX: 'end',\r\n          originY: 'top',\r\n          overlayX: 'end',\r\n          overlayY: 'bottom'\r\n        }\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators\r\n} from '@angular/forms';\r\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { Subscription } from 'rxjs';\r\nimport { DateAdapter } from './core/index';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from './core/index';\r\nimport { MatDatepicker } from './datepicker';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\nexport const MAT_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport class MatDatepickerInputEvent<D> {\r\n  /** The new value for the target datepicker input. */\r\n  value: D | null;\r\n\r\n  constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    public target: MatDatepickerInput<D>,\r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    public targetElement: HTMLElement\r\n  ) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n/** Directive used to connect an input to a MatDatepicker. */\r\n@Directive({\r\n  selector: 'input[matDatepicker]',\r\n  providers: [\r\n    MAT_DATEPICKER_VALUE_ACCESSOR,\r\n    MAT_DATEPICKER_VALIDATORS,\r\n    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput }\r\n  ],\r\n  host: {\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[attr.disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onBlur()',\r\n    '(keydown)': '_onKeydown($event)'\r\n  },\r\n  exportAs: 'matDatepickerInput'\r\n})\r\nexport class MatDatepickerInput<D>\r\n  implements AfterContentInit, ControlValueAccessor, OnDestroy, Validator {\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set matDatepicker(value: MatDatepicker<D>) {\r\n    this.registerDatepicker(value);\r\n  }\r\n  _datepicker: MatDatepicker<D>;\r\n\r\n  private registerDatepicker(value: MatDatepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\r\n\r\n  /** Function that can be used to filter out dates within the datepicker. */\r\n  @Input()\r\n  set matDatepickerFilter(filter: (date: D | null, unit?: string) => boolean) {\r\n    this._dateFilter = filter;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null, unit?: string) => boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null {\r\n    return this._value;\r\n  }\r\n  set value(value: D | null) {\r\n    value = this._dateAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n\r\n    const oldDate = this.value;\r\n    this._value = value;\r\n    this._formatValue(value);\r\n\r\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n  }\r\n  private _value: D | null;\r\n  private _firstValue: D | null;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null {\r\n    return this._min;\r\n  }\r\n  set min(value: D | null) {\r\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _min: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null {\r\n    return this._max;\r\n  }\r\n  set max(value: D | null) {\r\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n  private _max: D | null;\r\n\r\n  /** Whether the datepicker-input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n    const element = this._elementRef.nativeElement;\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n\r\n    // We need to null check the `blur` method, because it's undefined during SSR.\r\n    if (newValue && element.blur) {\r\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n      // is problematic, because it would mean that it triggers another change detection cycle,\r\n      // which then causes a changed after checked error if the input element was focused before.\r\n      element.blur();\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<D | null>();\r\n\r\n  /** Emits when the disabled state has changed */\r\n  _disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {};\r\n\r\n  private _cvaOnChange: (value: any) => void = () => {};\r\n\r\n  private _validatorOnChange = () => {};\r\n\r\n  private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n  private _localeSubscription = Subscription.EMPTY;\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid\r\n      ? null\r\n      : { matDatepickerParse: { text: this._elementRef.nativeElement.value } };\r\n  };\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this.min || !controlValue || this._dateAdapter.compareDate(this.min, controlValue) <= 0\r\n      ? null\r\n      : { matDatepickerMin: { min: this.min, actual: controlValue } };\r\n  };\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this.max || !controlValue || this._dateAdapter.compareDate(this.max, controlValue) >= 0\r\n      ? null\r\n      : { matDatepickerMax: { max: this.max, actual: controlValue } };\r\n  };\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue)\r\n      ? null\r\n      : { matDatepickerFilter: true };\r\n  };\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn | null = Validators.compose([\r\n    this._parseValidator,\r\n    this._minValidator,\r\n    this._maxValidator,\r\n    this._filterValidator\r\n  ]);\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid = false;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    @Optional() public _dateAdapter: DateAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATE_FORMATS)\r\n    private _dateFormats: MatDateFormats,\r\n    @Optional() private _formField: MatFormField\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = this._dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n\r\n    if (this._datepicker) {\r\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\r\n        this.value = selected;\r\n        this._cvaOnChange(selected);\r\n        this._onTouched();\r\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  reset(value?: D | null): void {\r\n    this.value = value !== undefined ? value : this._firstValue;\r\n    this._cvaOnChange(this._value);\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\r\n   */\r\n  getPopupConnectionElementRef(): ElementRef {\r\n    return this.getConnectedOverlayOrigin();\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  writeValue(value: D): void {\r\n    if (this._firstValue === undefined) {\r\n      this._firstValue = value;\r\n    }\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    const type = this._datepicker.type;\r\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse[type]);\r\n    this._lastValueValid = (!value && !date) || this._dateAdapter.isValid(date);\r\n    date = this._getValidDateOrNull(date);\r\n\r\n    if (!this._dateAdapter.sameDate(date, this._value)) {\r\n      this._value = date;\r\n      this._valueChange.emit(date);\r\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n    // update on every (input) change\r\n    this._cvaOnChange(date);\r\n  }\r\n\r\n  _onChange() {\r\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /** Handles blur events on the input. */\r\n  _onBlur() {\r\n    // Reformat the input only if we have a valid value.\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n\r\n    this._onTouched();\r\n  }\r\n\r\n  /** Formats a value and sets it on the input element. */\r\n  private _formatValue(value: D | null) {\r\n    const type = this._datepicker.type;\r\n    this._elementRef.nativeElement.value = value\r\n      ? this._dateAdapter.format(value, this._dateFormats.display[type])\r\n      : '';\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { merge, of as obsOf, Subscription } from 'rxjs';\r\nimport { MatDatepicker } from './datepicker';\r\nimport { MatDatepickerIntl } from './datepicker-intl';\r\n\r\n/** Can be used to override the icon of a `matDatepickerToggle`. */\r\n@Directive({\r\n  selector: '[matDatepickerToggleIcon]'\r\n})\r\nexport class MatDatepickerToggleIcon {}\r\n\r\n@Component({\r\n  selector: 'mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  // styleUrls: ['datepicker-toggle.css'],\r\n  host: {\r\n    class: 'mat-datepicker-toggle',\r\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened'\r\n  },\r\n  exportAs: 'matDatepickerToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  /** Datepicker instance that the button will toggle. */\r\n  @Input('for') datepicker: MatDatepicker<D>;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\r\n\r\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  _open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : obsOf();\r\n\r\n    const inputDisabled =\r\n      this.datepicker && this.datepicker._datepickerInput\r\n        ? this.datepicker._datepickerInput._disabledChange\r\n        : obsOf();\r\n\r\n    const datepickerToggled = this.datepicker\r\n      ? merge(this.datepicker.openedStream, this.datepicker.closedStream)\r\n      : obsOf();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      datepickerDisabled,\r\n      inputDisabled,\r\n      datepickerToggled\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCalendar } from './calendar';\r\nimport { MatCalendarBody } from './calendar-body';\r\nimport { MatClockView } from './clock-view';\r\nimport {\r\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n  MatDatepicker,\r\n  MatDatepickerContent\r\n} from './datepicker';\r\nimport { MatDatepickerInput } from './datepicker-input';\r\nimport { MatDatepickerIntl } from './datepicker-intl';\r\nimport { MatDatepickerToggle, MatDatepickerToggleIcon } from './datepicker-toggle';\r\nimport { MatMonthView } from './month-view';\r\nimport { MatYearView } from './year-view';\r\nimport { MatYearsView } from './years-view';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatIconModule,\r\n    OverlayModule,\r\n    A11yModule\r\n  ],\r\n  exports: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatClockView,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatYearsView\r\n  ],\r\n  declarations: [\r\n    MatCalendar,\r\n    MatCalendarBody,\r\n    MatDatepicker,\r\n    MatDatepickerContent,\r\n    MatDatepickerInput,\r\n    MatDatepickerToggle,\r\n    MatDatepickerToggleIcon,\r\n    MatClockView,\r\n    MatMonthView,\r\n    MatYearView,\r\n    MatYearsView\r\n  ],\r\n  providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\r\n  entryComponents: [MatDatepickerContent]\r\n})\r\nexport class MatDatepickerModule {}\r\n"]}