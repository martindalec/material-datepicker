/**
 * @fileoverview added by tsickle
 * Generated from: datepicker-animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, animateChild, group, keyframes, query, state, style, transition, trigger } from '@angular/animations';
/** @type {?} */
export const slideCalendar = trigger('slideCalendar', [
    transition('* => left', [
        animate(180, keyframes([
            style({ transform: 'translateX(50%)', offset: 0.5, opacity: 0 }),
            style({ transform: 'translateX(-50%)', offset: 0.51, opacity: 0 }),
            style({ transform: 'translateX(0)', offset: 1, opacity: 1 })
        ]))
    ]),
    transition('* => right', [
        animate(180, keyframes([
            style({ transform: 'translateX(-50%)', offset: 0.5, opacity: 0 }),
            style({ transform: 'translateX(50%)', offset: 0.51, opacity: 0 }),
            style({ transform: 'translateX(0)', offset: 1, opacity: 1 })
        ]))
    ])
]);
/** @type {?} */
export const controlActive = trigger('controlActive', [
    transition('* => active', [
        animate('0.4s linear', keyframes([
            style({ transform: 'scale(0.9)' }),
            style({ transform: 'scale(1.1)' }),
            style({ transform: 'scale(1)' })
        ]))
    ])
]);
/** @type {?} */
export const transformPanel = trigger('transformPanel', [
    state('void', style({ opacity: 0, transform: 'scale(1, 0)' })),
    state('enter', style({ opacity: 1, transform: 'scale(1, 1)' })),
    transition('void => enter', group([
        query('@fadeInCalendar', animateChild()),
        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')
    ])),
    transition('* => void', animate('100ms linear', style({ opacity: 0 })))
]);
/** @type {?} */
export const fadeInCalendar = trigger('fadeInCalendar', [
    state('void', style({ opacity: 0 })),
    state('enter', style({ opacity: 1 })),
    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1hbmltYXRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG1hcnRpbmRhbGVjL2RhdGVwaWNrZXIvIiwic291cmNlcyI6WyJkYXRlcGlja2VyLWFuaW1hdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsT0FBTyxFQUNQLFlBQVksRUFFWixLQUFLLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1IsTUFBTSxxQkFBcUIsQ0FBQzs7QUFFN0IsTUFBTSxPQUFPLGFBQWEsR0FBNkIsT0FBTyxDQUFDLGVBQWUsRUFBRTtJQUM5RSxVQUFVLENBQUMsV0FBVyxFQUFFO1FBQ3RCLE9BQU8sQ0FDTCxHQUFHLEVBQ0gsU0FBUyxDQUFDO1lBQ1IsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ2hFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNsRSxLQUFLLENBQUMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQzdELENBQUMsQ0FDSDtLQUNGLENBQUM7SUFDRixVQUFVLENBQUMsWUFBWSxFQUFFO1FBQ3ZCLE9BQU8sQ0FDTCxHQUFHLEVBQ0gsU0FBUyxDQUFDO1lBQ1IsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ2pFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNqRSxLQUFLLENBQUMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQzdELENBQUMsQ0FDSDtLQUNGLENBQUM7Q0FDSCxDQUFDOztBQUVGLE1BQU0sT0FBTyxhQUFhLEdBQTZCLE9BQU8sQ0FBQyxlQUFlLEVBQUU7SUFDOUUsVUFBVSxDQUFDLGFBQWEsRUFBRTtRQUN4QixPQUFPLENBQ0wsYUFBYSxFQUNiLFNBQVMsQ0FBQztZQUNSLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsQ0FBQztZQUNsQyxLQUFLLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUM7WUFDbEMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDO1NBQ2pDLENBQUMsQ0FDSDtLQUNGLENBQUM7Q0FDSCxDQUFDOztBQUVGLE1BQU0sT0FBTyxjQUFjLEdBQTZCLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtJQUNoRixLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDOUQsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELFVBQVUsQ0FDUixlQUFlLEVBQ2YsS0FBSyxDQUFDO1FBQ0osS0FBSyxDQUFDLGlCQUFpQixFQUFFLFlBQVksRUFBRSxDQUFDO1FBQ3hDLE9BQU8sQ0FBQyx3Q0FBd0MsQ0FBQztLQUNsRCxDQUFDLENBQ0g7SUFDRCxVQUFVLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUN4RSxDQUFDOztBQUVGLE1BQU0sT0FBTyxjQUFjLEdBQTZCLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtJQUNoRixLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckMsVUFBVSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsOENBQThDLENBQUMsQ0FBQztDQUNqRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBhbmltYXRlLFxyXG4gIGFuaW1hdGVDaGlsZCxcclxuICBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEsXHJcbiAgZ3JvdXAsXHJcbiAga2V5ZnJhbWVzLFxyXG4gIHF1ZXJ5LFxyXG4gIHN0YXRlLFxyXG4gIHN0eWxlLFxyXG4gIHRyYW5zaXRpb24sXHJcbiAgdHJpZ2dlclxyXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNsaWRlQ2FsZW5kYXI6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSA9IHRyaWdnZXIoJ3NsaWRlQ2FsZW5kYXInLCBbXHJcbiAgdHJhbnNpdGlvbignKiA9PiBsZWZ0JywgW1xyXG4gICAgYW5pbWF0ZShcclxuICAgICAgMTgwLFxyXG4gICAgICBrZXlmcmFtZXMoW1xyXG4gICAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCg1MCUpJywgb2Zmc2V0OiAwLjUsIG9wYWNpdHk6IDAgfSksXHJcbiAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJywgb2Zmc2V0OiAwLjUxLCBvcGFjaXR5OiAwIH0pLFxyXG4gICAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwKScsIG9mZnNldDogMSwgb3BhY2l0eTogMSB9KVxyXG4gICAgICBdKVxyXG4gICAgKVxyXG4gIF0pLFxyXG4gIHRyYW5zaXRpb24oJyogPT4gcmlnaHQnLCBbXHJcbiAgICBhbmltYXRlKFxyXG4gICAgICAxODAsXHJcbiAgICAgIGtleWZyYW1lcyhbXHJcbiAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJywgb2Zmc2V0OiAwLjUsIG9wYWNpdHk6IDAgfSksXHJcbiAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDUwJSknLCBvZmZzZXQ6IDAuNTEsIG9wYWNpdHk6IDAgfSksXHJcbiAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJywgb2Zmc2V0OiAxLCBvcGFjaXR5OiAxIH0pXHJcbiAgICAgIF0pXHJcbiAgICApXHJcbiAgXSlcclxuXSk7XHJcblxyXG5leHBvcnQgY29uc3QgY29udHJvbEFjdGl2ZTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhID0gdHJpZ2dlcignY29udHJvbEFjdGl2ZScsIFtcclxuICB0cmFuc2l0aW9uKCcqID0+IGFjdGl2ZScsIFtcclxuICAgIGFuaW1hdGUoXHJcbiAgICAgICcwLjRzIGxpbmVhcicsXHJcbiAgICAgIGtleWZyYW1lcyhbXHJcbiAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICdzY2FsZSgwLjkpJyB9KSxcclxuICAgICAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3NjYWxlKDEuMSknIH0pLFxyXG4gICAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAnc2NhbGUoMSknIH0pXHJcbiAgICAgIF0pXHJcbiAgICApXHJcbiAgXSlcclxuXSk7XHJcblxyXG5leHBvcnQgY29uc3QgdHJhbnNmb3JtUGFuZWw6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSA9IHRyaWdnZXIoJ3RyYW5zZm9ybVBhbmVsJywgW1xyXG4gIHN0YXRlKCd2b2lkJywgc3R5bGUoeyBvcGFjaXR5OiAwLCB0cmFuc2Zvcm06ICdzY2FsZSgxLCAwKScgfSkpLFxyXG4gIHN0YXRlKCdlbnRlcicsIHN0eWxlKHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAnc2NhbGUoMSwgMSknIH0pKSxcclxuICB0cmFuc2l0aW9uKFxyXG4gICAgJ3ZvaWQgPT4gZW50ZXInLFxyXG4gICAgZ3JvdXAoW1xyXG4gICAgICBxdWVyeSgnQGZhZGVJbkNhbGVuZGFyJywgYW5pbWF0ZUNoaWxkKCkpLFxyXG4gICAgICBhbmltYXRlKCc0MDBtcyBjdWJpYy1iZXppZXIoMC4yNSwgMC44LCAwLjI1LCAxKScpXHJcbiAgICBdKVxyXG4gICksXHJcbiAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgYW5pbWF0ZSgnMTAwbXMgbGluZWFyJywgc3R5bGUoeyBvcGFjaXR5OiAwIH0pKSlcclxuXSk7XHJcblxyXG5leHBvcnQgY29uc3QgZmFkZUluQ2FsZW5kYXI6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSA9IHRyaWdnZXIoJ2ZhZGVJbkNhbGVuZGFyJywgW1xyXG4gIHN0YXRlKCd2b2lkJywgc3R5bGUoeyBvcGFjaXR5OiAwIH0pKSxcclxuICBzdGF0ZSgnZW50ZXInLCBzdHlsZSh7IG9wYWNpdHk6IDEgfSkpLFxyXG4gIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIGFuaW1hdGUoJzQwMG1zIDEwMG1zIGN1YmljLWJlemllcigwLjU1LCAwLCAwLjU1LCAwLjIpJykpXHJcbl0pO1xyXG4iXX0=